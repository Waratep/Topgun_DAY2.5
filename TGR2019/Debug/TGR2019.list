
TGR2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800a138  0800a138  0001a138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a6e0  0800a6e0  0001a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a6e8  0800a6e8  0001a6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006dc  20000000  0800a6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000878  200006dc  0800adcc  000206dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000f54  0800adcc  00020f54  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000206dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037348  00000000  00000000  0002070c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000643a  00000000  00000000  00057a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001dd8a  00000000  00000000  0005de8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001ef0  00000000  00000000  0007bc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002490  00000000  00000000  0007db08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001043c  00000000  00000000  0007ff98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000c370  00000000  00000000  000903d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009c744  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c34  00000000  00000000  0009c7c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  000a33f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  000a3490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006dc 	.word	0x200006dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a11c 	.word	0x0800a11c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006e0 	.word	0x200006e0
 80001cc:	0800a11c 	.word	0x0800a11c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <I2Cx_Init.constprop.8>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
  i2c_handler->Init.OwnAddress1      = 0;
 8000eb2:	482a      	ldr	r0, [pc, #168]	; (8000f5c <I2Cx_Init.constprop.8+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000eb4:	4c2a      	ldr	r4, [pc, #168]	; (8000f60 <I2Cx_Init.constprop.8+0xb0>)
  i2c_handler->Init.OwnAddress1      = 0;
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <I2Cx_Init.constprop.8+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000eb8:	4d2b      	ldr	r5, [pc, #172]	; (8000f68 <I2Cx_Init.constprop.8+0xb8>)
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000eba:	4f2c      	ldr	r7, [pc, #176]	; (8000f6c <I2Cx_Init.constprop.8+0xbc>)
  i2c_handler->Init.OwnAddress1      = 0;
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e884 0049 	stmia.w	r4, {r0, r3, r6}
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	60e2      	str	r2, [r4, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000ec6:	6126      	str	r6, [r4, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000ec8:	6166      	str	r6, [r4, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000eca:	61e6      	str	r6, [r4, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000ecc:	6226      	str	r6, [r4, #32]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ece:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000ed6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000ed8:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000ee2:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000ee4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ee8:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000eea:	2312      	movs	r3, #18
 8000eec:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ef2:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000ef4:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000ef6:	4638      	mov	r0, r7
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000ef8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000efa:	f000 fdb1 	bl	8001a60 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000efe:	a903      	add	r1, sp, #12
 8000f00:	4638      	mov	r0, r7
 8000f02:	f000 fdad 	bl	8001a60 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000f06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f0c:	65ab      	str	r3, [r5, #88]	; 0x58
 8000f0e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8000f18:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000f1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f1e:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000f20:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000f22:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f26:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000f28:	4632      	mov	r2, r6
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	2021      	movs	r0, #33	; 0x21
 8000f2e:	f000 fc7b 	bl	8001828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000f32:	2021      	movs	r0, #33	; 0x21
 8000f34:	f000 fcac 	bl	8001890 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000f38:	4632      	mov	r2, r6
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	2022      	movs	r0, #34	; 0x22
 8000f3e:	f000 fc73 	bl	8001828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000f42:	2022      	movs	r0, #34	; 0x22
 8000f44:	f000 fca4 	bl	8001890 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f001 f891 	bl	8002070 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000f4e:	4631      	mov	r1, r6
 8000f50:	4620      	mov	r0, r4
 8000f52:	f001 fb97 	bl	8002684 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000f56:	b009      	add	sp, #36	; 0x24
 8000f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40005800 	.word	0x40005800
 8000f60:	200007bc 	.word	0x200007bc
 8000f64:	00702681 	.word	0x00702681
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000400 	.word	0x48000400

08000f70 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8000f70:	f7ff bf9e 	b.w	8000eb0 <I2Cx_Init.constprop.8>

08000f74 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000f74:	b510      	push	{r4, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000f7e:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	460a      	mov	r2, r1
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	9400      	str	r4, [sp, #0]
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <SENSOR_IO_Write+0x30>)
 8000f90:	f001 fa02 	bl	8002398 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8000f94:	b120      	cbz	r0, 8000fa0 <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8000f96:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <SENSOR_IO_Write+0x30>)
 8000f98:	f001 f8bb 	bl	8002112 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000f9c:	f7ff ff88 	bl	8000eb0 <I2Cx_Init.constprop.8>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8000fa0:	b006      	add	sp, #24
 8000fa2:	bd10      	pop	{r4, pc}
 8000fa4:	200007bc 	.word	0x200007bc

08000fa8 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000fa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 8000faa:	aa06      	add	r2, sp, #24
 8000fac:	2300      	movs	r3, #0
 8000fae:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000fbe:	460a      	mov	r2, r1
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <SENSOR_IO_Read+0x38>)
 8000fc4:	f001 faa0 	bl	8002508 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000fc8:	b120      	cbz	r0, 8000fd4 <SENSOR_IO_Read+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <SENSOR_IO_Read+0x38>)
 8000fcc:	f001 f8a1 	bl	8002112 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8000fd0:	f7ff ff6e 	bl	8000eb0 <I2Cx_Init.constprop.8>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8000fd4:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000fd8:	b007      	add	sp, #28
 8000fda:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fde:	bf00      	nop
 8000fe0:	200007bc 	.word	0x200007bc

08000fe4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000fe6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8000fea:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8000fee:	460a      	mov	r2, r1
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <SENSOR_IO_ReadMultiple+0x2c>)
 8000ff6:	f001 fa87 	bl	8002508 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	b120      	cbz	r0, 8001008 <SENSOR_IO_ReadMultiple+0x24>
  HAL_I2C_DeInit(i2c_handler);
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <SENSOR_IO_ReadMultiple+0x2c>)
 8001000:	f001 f887 	bl	8002112 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001004:	f7ff ff54 	bl	8000eb0 <I2Cx_Init.constprop.8>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8001008:	4620      	mov	r0, r4
 800100a:	b004      	add	sp, #16
 800100c:	bd10      	pop	{r4, pc}
 800100e:	bf00      	nop
 8001010:	200007bc 	.word	0x200007bc

08001014 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001014:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001016:	4c07      	ldr	r4, [pc, #28]	; (8001034 <BSP_ACCELERO_Init+0x20>)
 8001018:	68a3      	ldr	r3, [r4, #8]
 800101a:	4798      	blx	r3
 800101c:	286a      	cmp	r0, #106	; 0x6a
 800101e:	d107      	bne.n	8001030 <BSP_ACCELERO_Init+0x1c>
    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <BSP_ACCELERO_Init+0x24>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001022:	f244 4030 	movw	r0, #17456	; 0x4430
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001026:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800102c:	2000      	movs	r0, #0
 800102e:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 8001030:	2001      	movs	r0, #1
  }  

  return ret;
}
 8001032:	bd10      	pop	{r4, pc}
 8001034:	2000005c 	.word	0x2000005c
 8001038:	200006f8 	.word	0x200006f8

0800103c <BSP_ACCELERO_AccGetXYZ>:
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv != NULL)
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <BSP_ACCELERO_AccGetXYZ+0x10>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	b113      	cbz	r3, 8001048 <BSP_ACCELERO_AccGetXYZ+0xc>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	b103      	cbz	r3, 8001048 <BSP_ACCELERO_AccGetXYZ+0xc>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001046:	4718      	bx	r3
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200006f8 	.word	0x200006f8

08001050 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001050:	b510      	push	{r4, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001052:	4c07      	ldr	r4, [pc, #28]	; (8001070 <BSP_GYRO_Init+0x20>)
 8001054:	68a3      	ldr	r3, [r4, #8]
 8001056:	4798      	blx	r3
 8001058:	286a      	cmp	r0, #106	; 0x6a
 800105a:	d107      	bne.n	800106c <BSP_GYRO_Init+0x1c>
    ret = GYRO_ERROR;
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <BSP_GYRO_Init+0x24>)

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800105e:	f244 403c 	movw	r0, #17468	; 0x443c
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001062:	601c      	str	r4, [r3, #0]
    GyroscopeDrv->Init(ctrl);
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001068:	2000      	movs	r0, #0
 800106a:	bd10      	pop	{r4, pc}
    ret = GYRO_ERROR;
 800106c:	2001      	movs	r0, #1
  }
  
  return ret;
}
 800106e:	bd10      	pop	{r4, pc}
 8001070:	20000090 	.word	0x20000090
 8001074:	200006fc 	.word	0x200006fc

08001078 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv != NULL)
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <BSP_GYRO_GetXYZ+0x10>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	b113      	cbz	r3, 8001084 <BSP_GYRO_GetXYZ+0xc>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	b103      	cbz	r3, 8001084 <BSP_GYRO_GetXYZ+0xc>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001082:	4718      	bx	r3
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200006fc 	.word	0x200006fc

0800108c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800108c:	b510      	push	{r4, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800108e:	4c07      	ldr	r4, [pc, #28]	; (80010ac <BSP_HSENSOR_Init+0x20>)
 8001090:	20be      	movs	r0, #190	; 0xbe
 8001092:	6863      	ldr	r3, [r4, #4]
 8001094:	4798      	blx	r3
 8001096:	28bc      	cmp	r0, #188	; 0xbc
 8001098:	d106      	bne.n	80010a8 <BSP_HSENSOR_Init+0x1c>
  {
    ret = HSENSOR_ERROR;
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <BSP_HSENSOR_Init+0x24>)
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800109c:	20be      	movs	r0, #190	; 0xbe
    Hsensor_drv = &HTS221_H_Drv;
 800109e:	601c      	str	r4, [r3, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	4798      	blx	r3
    ret = HSENSOR_OK;
 80010a4:	2000      	movs	r0, #0
 80010a6:	bd10      	pop	{r4, pc}
    ret = HSENSOR_ERROR;
 80010a8:	2001      	movs	r0, #1
  }
  
  return ret;
}
 80010aa:	bd10      	pop	{r4, pc}
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000700 	.word	0x20000700

080010b4 <BSP_HSENSOR_ReadHumidity>:
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80010b4:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <BSP_HSENSOR_ReadHumidity+0xc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	20be      	movs	r0, #190	; 0xbe
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	4718      	bx	r3
 80010be:	bf00      	nop
 80010c0:	20000700 	.word	0x20000700

080010c4 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80010c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80010c6:	4d0f      	ldr	r5, [pc, #60]	; (8001104 <BSP_MAGNETO_Init+0x40>)
 80010c8:	68ab      	ldr	r3, [r5, #8]
 80010ca:	4798      	blx	r3
 80010cc:	283d      	cmp	r0, #61	; 0x3d
 80010ce:	d117      	bne.n	8001100 <BSP_MAGNETO_Init+0x3c>
    ret = MAGNETO_ERROR;
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <BSP_MAGNETO_Init+0x44>)
 80010d2:	601d      	str	r5, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80010d4:	2358      	movs	r3, #88	; 0x58
 80010d6:	f88d 3000 	strb.w	r3, [sp]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80010da:	2308      	movs	r3, #8
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80010dc:	2400      	movs	r4, #0
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80010de:	f88d 3003 	strb.w	r3, [sp, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80010e2:	2340      	movs	r3, #64	; 0x40
 80010e4:	f88d 3004 	strb.w	r3, [sp, #4]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80010e8:	f88d 4001 	strb.w	r4, [sp, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80010ec:	f88d 4002 	strb.w	r4, [sp, #2]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80010f0:	aa02      	add	r2, sp, #8
 80010f2:	e912 0003 	ldmdb	r2, {r0, r1}
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80010fa:	4620      	mov	r0, r4
  } 

  return ret;  
}
 80010fc:	b003      	add	sp, #12
 80010fe:	bd30      	pop	{r4, r5, pc}
    ret = MAGNETO_ERROR;
 8001100:	2001      	movs	r0, #1
 8001102:	e7fb      	b.n	80010fc <BSP_MAGNETO_Init+0x38>
 8001104:	2000001c 	.word	0x2000001c
 8001108:	20000704 	.word	0x20000704

0800110c <BSP_MAGNETO_GetXYZ>:
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
  if(MagnetoDrv != NULL)
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <BSP_MAGNETO_GetXYZ+0x10>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	b113      	cbz	r3, 8001118 <BSP_MAGNETO_GetXYZ+0xc>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	b103      	cbz	r3, 8001118 <BSP_MAGNETO_GetXYZ+0xc>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8001116:	4718      	bx	r3
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000704 	.word	0x20000704

08001120 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001120:	b510      	push	{r4, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001122:	4c07      	ldr	r4, [pc, #28]	; (8001140 <BSP_PSENSOR_Init+0x20>)
 8001124:	20ba      	movs	r0, #186	; 0xba
 8001126:	6863      	ldr	r3, [r4, #4]
 8001128:	4798      	blx	r3
 800112a:	28b1      	cmp	r0, #177	; 0xb1
 800112c:	d106      	bne.n	800113c <BSP_PSENSOR_Init+0x1c>
  {
    ret = PSENSOR_ERROR;
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <BSP_PSENSOR_Init+0x24>)
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001130:	20ba      	movs	r0, #186	; 0xba
     Psensor_drv = &LPS22HB_P_Drv;
 8001132:	601c      	str	r4, [r3, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001138:	2000      	movs	r0, #0
 800113a:	bd10      	pop	{r4, pc}
    ret = PSENSOR_ERROR;
 800113c:	2001      	movs	r0, #1
  }
  
  return ret;
}
 800113e:	bd10      	pop	{r4, pc}
 8001140:	20000050 	.word	0x20000050
 8001144:	20000708 	.word	0x20000708

08001148 <BSP_PSENSOR_ReadPressure>:
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <BSP_PSENSOR_ReadPressure+0xc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	20ba      	movs	r0, #186	; 0xba
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4718      	bx	r3
 8001152:	bf00      	nop
 8001154:	20000708 	.word	0x20000708

08001158 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001158:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800115a:	4c06      	ldr	r4, [pc, #24]	; (8001174 <BSP_TSENSOR_Init+0x1c>)
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <BSP_TSENSOR_Init+0x20>)
 800115e:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001160:	f7ff ff06 	bl	8000f70 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	2100      	movs	r1, #0
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	20be      	movs	r0, #190	; 0xbe
 800116c:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 800116e:	2000      	movs	r0, #0
 8001170:	bd10      	pop	{r4, pc}
 8001172:	bf00      	nop
 8001174:	2000070c 	.word	0x2000070c
 8001178:	2000000c 	.word	0x2000000c

0800117c <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800117c:	4b02      	ldr	r3, [pc, #8]	; (8001188 <BSP_TSENSOR_ReadTemp+0xc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	20be      	movs	r0, #190	; 0xbe
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	4718      	bx	r3
 8001186:	bf00      	nop
 8001188:	2000070c 	.word	0x2000070c

0800118c <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800118c:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800118e:	b2c4      	uxtb	r4, r0
 8001190:	2120      	movs	r1, #32
 8001192:	4620      	mov	r0, r4
 8001194:	f7ff ff08 	bl	8000fa8 <SENSOR_IO_Read>
 8001198:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800119c:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 80011a0:	4620      	mov	r0, r4
 80011a2:	2120      	movs	r1, #32
}
 80011a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80011a8:	f7ff bee4 	b.w	8000f74 <SENSOR_IO_Write>

080011ac <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80011ac:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80011ae:	b2c4      	uxtb	r4, r0
 80011b0:	2120      	movs	r1, #32
 80011b2:	4620      	mov	r0, r4
 80011b4:	f7ff fef8 	bl	8000fa8 <SENSOR_IO_Read>
 80011b8:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80011bc:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 80011c0:	4620      	mov	r0, r4
 80011c2:	2120      	movs	r1, #32
}
 80011c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80011c8:	f7ff bed4 	b.w	8000f74 <SENSOR_IO_Write>

080011cc <HTS221_H_ReadID>:
{  
 80011cc:	b510      	push	{r4, lr}
 80011ce:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 80011d0:	f7ff fece 	bl	8000f70 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80011d4:	b2e0      	uxtb	r0, r4
 80011d6:	210f      	movs	r1, #15
}
 80011d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80011dc:	f7ff bee4 	b.w	8000fa8 <SENSOR_IO_Read>

080011e0 <HTS221_H_ReadHumidity>:
{
 80011e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80011e4:	fa5f f880 	uxtb.w	r8, r0
 80011e8:	2302      	movs	r3, #2
 80011ea:	aa01      	add	r2, sp, #4
 80011ec:	21b0      	movs	r1, #176	; 0xb0
 80011ee:	4640      	mov	r0, r8
 80011f0:	f7ff fef8 	bl	8000fe4 <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80011f4:	2302      	movs	r3, #2
 80011f6:	aa01      	add	r2, sp, #4
 80011f8:	21b6      	movs	r1, #182	; 0xb6
 80011fa:	4640      	mov	r0, r8
  H0_rh = buffer[0] >> 1;
 80011fc:	f89d 6004 	ldrb.w	r6, [sp, #4]
  H1_rh = buffer[1] >> 1;
 8001200:	f89d 5005 	ldrb.w	r5, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001204:	f7ff feee 	bl	8000fe4 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001208:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800120c:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001210:	2302      	movs	r3, #2
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001212:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001216:	aa01      	add	r2, sp, #4
 8001218:	21ba      	movs	r1, #186	; 0xba
 800121a:	4640      	mov	r0, r8
 800121c:	f7ff fee2 	bl	8000fe4 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001220:	b227      	sxth	r7, r4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001222:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001226:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800122a:	aa01      	add	r2, sp, #4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800122c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001230:	21a8      	movs	r1, #168	; 0xa8
 8001232:	2302      	movs	r3, #2
 8001234:	4640      	mov	r0, r8
 8001236:	f7ff fed5 	bl	8000fe4 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800123a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800123e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001242:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001246:	b21b      	sxth	r3, r3
 8001248:	1bdb      	subs	r3, r3, r7
 800124a:	ee07 3a90 	vmov	s15, r3
  H0_rh = buffer[0] >> 1;
 800124e:	0876      	lsrs	r6, r6, #1
  H1_rh = buffer[1] >> 1;
 8001250:	086d      	lsrs	r5, r5, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001252:	1bab      	subs	r3, r5, r6
 8001254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001258:	ee07 3a90 	vmov	s15, r3
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800125c:	b224      	sxth	r4, r4
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800125e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001262:	1be4      	subs	r4, r4, r7
 8001264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001268:	ee07 4a10 	vmov	s14, r4
 800126c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001270:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8001274:	ee07 6a90 	vmov	s15, r6
 8001278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        : ( tmp_f <    0.0f ) ?    0.0f
 800127c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80012b8 <HTS221_H_ReadHumidity+0xd8>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001280:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8001284:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001288:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 800128c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	dc0d      	bgt.n	80012b2 <HTS221_H_ReadHumidity+0xd2>
        : tmp_f;
 8001296:	eef5 7a40 	vcmp.f32	s15, #0.0
 800129a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80012bc <HTS221_H_ReadHumidity+0xdc>
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	bf48      	it	mi
 80012a4:	eef0 7a47 	vmovmi.f32	s15, s14
}
 80012a8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80012ac:	b002      	add	sp, #8
 80012ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        : ( tmp_f <    0.0f ) ?    0.0f
 80012b2:	eef0 7a47 	vmov.f32	s15, s14
 80012b6:	e7f7      	b.n	80012a8 <HTS221_H_ReadHumidity+0xc8>
 80012b8:	447a0000 	.word	0x447a0000
 80012bc:	00000000 	.word	0x00000000

080012c0 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80012c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80012c4:	fa5f f880 	uxtb.w	r8, r0
 80012c8:	aa01      	add	r2, sp, #4
 80012ca:	2302      	movs	r3, #2
 80012cc:	21b2      	movs	r1, #178	; 0xb2
 80012ce:	4640      	mov	r0, r8
 80012d0:	f7ff fe88 	bl	8000fe4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80012d4:	2135      	movs	r1, #53	; 0x35
 80012d6:	4640      	mov	r0, r8
 80012d8:	f7ff fe66 	bl	8000fa8 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80012dc:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80012de:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80012e2:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80012e6:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80012e8:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80012ec:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 80012f0:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 80012f2:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80012f4:	2304      	movs	r3, #4
 80012f6:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 80012fa:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80012fc:	21bc      	movs	r1, #188	; 0xbc
 80012fe:	4640      	mov	r0, r8
 8001300:	f7ff fe70 	bl	8000fe4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001304:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8001308:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800130c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001310:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001314:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001318:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800131a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800131e:	21aa      	movs	r1, #170	; 0xaa
 8001320:	2302      	movs	r3, #2
 8001322:	4640      	mov	r0, r8
 8001324:	f7ff fe5e 	bl	8000fe4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001328:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800132c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001330:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001334:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001336:	b21b      	sxth	r3, r3
 8001338:	1bdb      	subs	r3, r3, r7
  T0_degC = T0_degC_x8_u16 >> 3;
 800133a:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	1bab      	subs	r3, r5, r6
 8001342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001346:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800134a:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800134c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001350:	1be4      	subs	r4, r4, r7
 8001352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001356:	ee07 4a10 	vmov	s14, r4
 800135a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800135e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001362:	ee07 6a90 	vmov	s15, r6
 8001366:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 800136a:	ee36 0a80 	vadd.f32	s0, s13, s0
 800136e:	b002      	add	sp, #8
 8001370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001374 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001374:	b507      	push	{r0, r1, r2, lr}
 8001376:	ab02      	add	r3, sp, #8
 8001378:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800137c:	2120      	movs	r1, #32
 800137e:	f89d 2000 	ldrb.w	r2, [sp]
 8001382:	203c      	movs	r0, #60	; 0x3c
 8001384:	f7ff fdf6 	bl	8000f74 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001388:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800138c:	2121      	movs	r1, #33	; 0x21
 800138e:	203c      	movs	r0, #60	; 0x3c
 8001390:	f7ff fdf0 	bl	8000f74 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001394:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001398:	2122      	movs	r1, #34	; 0x22
 800139a:	203c      	movs	r0, #60	; 0x3c
 800139c:	f7ff fdea 	bl	8000f74 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80013a0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80013a4:	2123      	movs	r1, #35	; 0x23
 80013a6:	203c      	movs	r0, #60	; 0x3c
 80013a8:	f7ff fde4 	bl	8000f74 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80013ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80013b0:	2124      	movs	r1, #36	; 0x24
 80013b2:	203c      	movs	r0, #60	; 0x3c
}
 80013b4:	b003      	add	sp, #12
 80013b6:	f85d eb04 	ldr.w	lr, [sp], #4
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80013ba:	f7ff bddb 	b.w	8000f74 <SENSOR_IO_Write>

080013be <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80013be:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80013c0:	2122      	movs	r1, #34	; 0x22
 80013c2:	203c      	movs	r0, #60	; 0x3c
 80013c4:	f7ff fdf0 	bl	8000fa8 <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80013c8:	f000 02fc 	and.w	r2, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80013cc:	f042 0203 	orr.w	r2, r2, #3
 80013d0:	2122      	movs	r1, #34	; 0x22
 80013d2:	203c      	movs	r0, #60	; 0x3c
}
 80013d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80013d8:	f7ff bdcc 	b.w	8000f74 <SENSOR_IO_Write>

080013dc <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80013dc:	b510      	push	{r4, lr}
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80013de:	2122      	movs	r1, #34	; 0x22
{  
 80013e0:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80013e2:	203c      	movs	r0, #60	; 0x3c
 80013e4:	f7ff fde0 	bl	8000fa8 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80013e8:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 80013ec:	b10c      	cbz	r4, 80013f2 <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80013ee:	f042 0220 	orr.w	r2, r2, #32
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80013f2:	2122      	movs	r1, #34	; 0x22
 80013f4:	203c      	movs	r0, #60	; 0x3c
}
 80013f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80013fa:	f7ff bdbb 	b.w	8000f74 <SENSOR_IO_Write>

080013fe <LIS3MDL_MagReadID>:
{
 80013fe:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8001400:	f7ff fdb6 	bl	8000f70 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001404:	210f      	movs	r1, #15
 8001406:	203c      	movs	r0, #60	; 0x3c
}
 8001408:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800140c:	f7ff bdcc 	b.w	8000fa8 <SENSOR_IO_Read>

08001410 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001410:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001412:	2121      	movs	r1, #33	; 0x21
{
 8001414:	b085      	sub	sp, #20
 8001416:	4605      	mov	r5, r0
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001418:	203c      	movs	r0, #60	; 0x3c
 800141a:	f7ff fdc5 	bl	8000fa8 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800141e:	2306      	movs	r3, #6
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001420:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001422:	aa02      	add	r2, sp, #8
 8001424:	21a8      	movs	r1, #168	; 0xa8
 8001426:	203c      	movs	r0, #60	; 0x3c
 8001428:	f7ff fddc 	bl	8000fe4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800142c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001430:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001434:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001438:	f8ad 3000 	strh.w	r3, [sp]
 800143c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001440:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001444:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001448:	f8ad 3002 	strh.w	r3, [sp, #2]
 800144c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001450:	f89d 300c 	ldrb.w	r3, [sp, #12]
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001454:	f004 0460 	and.w	r4, r4, #96	; 0x60
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001458:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  switch(ctrlm & 0x60)
 800145c:	2c20      	cmp	r4, #32
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800145e:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlm & 0x60)
 8001462:	d021      	beq.n	80014a8 <LIS3MDL_MagReadXYZ+0x98>
 8001464:	d803      	bhi.n	800146e <LIS3MDL_MagReadXYZ+0x5e>
 8001466:	b14c      	cbz	r4, 800147c <LIS3MDL_MagReadXYZ+0x6c>
  float sensitivity = 0;
 8001468:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80014b4 <LIS3MDL_MagReadXYZ+0xa4>
 800146c:	e008      	b.n	8001480 <LIS3MDL_MagReadXYZ+0x70>
  switch(ctrlm & 0x60)
 800146e:	2c40      	cmp	r4, #64	; 0x40
 8001470:	d01d      	beq.n	80014ae <LIS3MDL_MagReadXYZ+0x9e>
 8001472:	2c60      	cmp	r4, #96	; 0x60
 8001474:	d1f8      	bne.n	8001468 <LIS3MDL_MagReadXYZ+0x58>
    break;
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
    break;
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001476:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80014b8 <LIS3MDL_MagReadXYZ+0xa8>
    break;    
 800147a:	e001      	b.n	8001480 <LIS3MDL_MagReadXYZ+0x70>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800147c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80014bc <LIS3MDL_MagReadXYZ+0xac>
 8001480:	2200      	movs	r2, #0
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001482:	f93d 3012 	ldrsh.w	r3, [sp, r2, lsl #1]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001496:	ee17 3a90 	vmov	r3, s15
 800149a:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 800149e:	3201      	adds	r2, #1
  for(i=0; i<3; i++)
 80014a0:	2a03      	cmp	r2, #3
 80014a2:	d1ee      	bne.n	8001482 <LIS3MDL_MagReadXYZ+0x72>
  }
}
 80014a4:	b005      	add	sp, #20
 80014a6:	bd30      	pop	{r4, r5, pc}
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80014a8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014c0 <LIS3MDL_MagReadXYZ+0xb0>
    break;
 80014ac:	e7e8      	b.n	8001480 <LIS3MDL_MagReadXYZ+0x70>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80014ae:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014c4 <LIS3MDL_MagReadXYZ+0xb4>
    break;
 80014b2:	e7e5      	b.n	8001480 <LIS3MDL_MagReadXYZ+0x70>
 80014b4:	00000000 	.word	0x00000000
 80014b8:	3f147ae1 	.word	0x3f147ae1
 80014bc:	3e0f5c29 	.word	0x3e0f5c29
 80014c0:	3e947ae1 	.word	0x3e947ae1
 80014c4:	3edc28f6 	.word	0x3edc28f6

080014c8 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80014c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014ca:	2400      	movs	r4, #0
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80014cc:	b2c6      	uxtb	r6, r0
 80014ce:	ad01      	add	r5, sp, #4
 80014d0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80014d4:	b2c9      	uxtb	r1, r1
 80014d6:	4630      	mov	r0, r6
 80014d8:	f7ff fd66 	bl	8000fa8 <SENSOR_IO_Read>
 80014dc:	5528      	strb	r0, [r5, r4]
 80014de:	3401      	adds	r4, #1
  for(i = 0; i < 3; i++)
 80014e0:	2c03      	cmp	r4, #3
 80014e2:	d1f5      	bne.n	80014d0 <LPS22HB_P_ReadPressure+0x8>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80014e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80014e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80014f6:	4313      	orrs	r3, r2

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80014f8:	021a      	lsls	r2, r3, #8
    tmp |= 0xFF000000;
 80014fa:	bf48      	it	mi
 80014fc:	f043 437f 	orrmi.w	r3, r3, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 8001500:	2264      	movs	r2, #100	; 0x64
 8001502:	4353      	muls	r3, r2
 8001504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001508:	fb93 f3f2 	sdiv	r3, r3, r2

  return (float)((float)raw_press / 100.0f);
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8001514:	eddf 7a02 	vldr	s15, [pc, #8]	; 8001520 <LPS22HB_P_ReadPressure+0x58>
 8001518:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800151c:	b002      	add	sp, #8
 800151e:	bd70      	pop	{r4, r5, r6, pc}
 8001520:	42c80000 	.word	0x42c80000

08001524 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001524:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001526:	b2c4      	uxtb	r4, r0
 8001528:	211a      	movs	r1, #26
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff fd3c 	bl	8000fa8 <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 8001530:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001534:	f042 0201 	orr.w	r2, r2, #1
 8001538:	4620      	mov	r0, r4
 800153a:	211a      	movs	r1, #26
 800153c:	f7ff fd1a 	bl	8000f74 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001540:	2110      	movs	r1, #16
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fd30 	bl	8000fa8 <SENSOR_IO_Read>
 8001548:	f000 028d 	and.w	r2, r0, #141	; 0x8d
  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800154c:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8001550:	4620      	mov	r0, r4
 8001552:	2110      	movs	r1, #16
}  
 8001554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001558:	f7ff bd0c 	b.w	8000f74 <SENSOR_IO_Write>

0800155c <LPS22HB_P_Init>:
  LPS22HB_Init(DeviceAddr);
 800155c:	f7ff bfe2 	b.w	8001524 <LPS22HB_Init>

08001560 <LPS22HB_P_ReadID>:
{  
 8001560:	b510      	push	{r4, lr}
 8001562:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 8001564:	f7ff fd04 	bl	8000f70 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001568:	b2e0      	uxtb	r0, r4
 800156a:	210f      	movs	r1, #15
}
 800156c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001570:	f7ff bd1a 	b.w	8000fa8 <SENSOR_IO_Read>

08001574 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001574:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001576:	2110      	movs	r1, #16
{  
 8001578:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800157a:	20d4      	movs	r0, #212	; 0xd4
 800157c:	f7ff fd14 	bl	8000fa8 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8001580:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8001584:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	2110      	movs	r1, #16
 800158a:	20d4      	movs	r0, #212	; 0xd4
 800158c:	f7ff fcf2 	bl	8000f74 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001590:	2112      	movs	r1, #18
 8001592:	20d4      	movs	r0, #212	; 0xd4
 8001594:	f7ff fd08 	bl	8000fa8 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8001598:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800159c:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 80015a0:	2112      	movs	r1, #18
 80015a2:	20d4      	movs	r0, #212	; 0xd4
}
 80015a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80015a8:	f7ff bce4 	b.w	8000f74 <SENSOR_IO_Write>

080015ac <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80015ac:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80015ae:	2110      	movs	r1, #16
 80015b0:	20d4      	movs	r0, #212	; 0xd4
 80015b2:	f7ff fcf9 	bl	8000fa8 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80015b6:	2110      	movs	r1, #16
 80015b8:	f000 020f 	and.w	r2, r0, #15
}
 80015bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80015c0:	20d4      	movs	r0, #212	; 0xd4
 80015c2:	f7ff bcd7 	b.w	8000f74 <SENSOR_IO_Write>

080015c6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80015c6:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80015c8:	2115      	movs	r1, #21
{
 80015ca:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80015cc:	20d4      	movs	r0, #212	; 0xd4
 80015ce:	f7ff fceb 	bl	8000fa8 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80015d2:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 80015d6:	b10c      	cbz	r4, 80015dc <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80015d8:	f042 0210 	orr.w	r2, r2, #16
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80015dc:	2115      	movs	r1, #21
 80015de:	20d4      	movs	r0, #212	; 0xd4
}
 80015e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80015e4:	f7ff bcc6 	b.w	8000f74 <SENSOR_IO_Write>

080015e8 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80015e8:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80015ea:	2111      	movs	r1, #17
{  
 80015ec:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80015ee:	20d4      	movs	r0, #212	; 0xd4
 80015f0:	f7ff fcda 	bl	8000fa8 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 80015f4:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 80015f8:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	2111      	movs	r1, #17
 80015fe:	20d4      	movs	r0, #212	; 0xd4
 8001600:	f7ff fcb8 	bl	8000f74 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001604:	2112      	movs	r1, #18
 8001606:	20d4      	movs	r0, #212	; 0xd4
 8001608:	f7ff fcce 	bl	8000fa8 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 800160c:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001610:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8001614:	2112      	movs	r1, #18
 8001616:	20d4      	movs	r0, #212	; 0xd4
}
 8001618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800161c:	f7ff bcaa 	b.w	8000f74 <SENSOR_IO_Write>

08001620 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001620:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001622:	2111      	movs	r1, #17
 8001624:	20d4      	movs	r0, #212	; 0xd4
 8001626:	f7ff fcbf 	bl	8000fa8 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800162a:	2111      	movs	r1, #17
 800162c:	f000 020f 	and.w	r2, r0, #15
}
 8001630:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001634:	20d4      	movs	r0, #212	; 0xd4
 8001636:	f7ff bc9d 	b.w	8000f74 <SENSOR_IO_Write>

0800163a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800163a:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800163c:	2116      	movs	r1, #22
{  
 800163e:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001640:	20d4      	movs	r0, #212	; 0xd4
 8001642:	f7ff fcb1 	bl	8000fa8 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001646:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 800164a:	b10c      	cbz	r4, 8001650 <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800164c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001650:	2116      	movs	r1, #22
 8001652:	20d4      	movs	r0, #212	; 0xd4
}
 8001654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001658:	f7ff bc8c 	b.w	8000f74 <SENSOR_IO_Write>

0800165c <LSM6DSL_GyroReadID>:
{
 800165c:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 800165e:	f7ff fc87 	bl	8000f70 <SENSOR_IO_Init>
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001662:	210f      	movs	r1, #15
 8001664:	20d4      	movs	r0, #212	; 0xd4
}
 8001666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800166a:	f7ff bc9d 	b.w	8000fa8 <SENSOR_IO_Read>

0800166e <LSM6DSL_AccReadID>:
 800166e:	f7ff bff5 	b.w	800165c <LSM6DSL_GyroReadID>
	...

08001674 <LSM6DSL_AccReadXYZ>:
{
 8001674:	b530      	push	{r4, r5, lr}
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001676:	2110      	movs	r1, #16
{
 8001678:	b085      	sub	sp, #20
 800167a:	4605      	mov	r5, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800167c:	20d4      	movs	r0, #212	; 0xd4
 800167e:	f7ff fc93 	bl	8000fa8 <SENSOR_IO_Read>
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001682:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001684:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001686:	aa02      	add	r2, sp, #8
 8001688:	2128      	movs	r1, #40	; 0x28
 800168a:	20d4      	movs	r0, #212	; 0xd4
 800168c:	f7ff fcaa 	bl	8000fe4 <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001690:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001694:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001698:	4817      	ldr	r0, [pc, #92]	; (80016f8 <LSM6DSL_AccReadXYZ+0x84>)
 800169a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800169e:	f8ad 3000 	strh.w	r3, [sp]
 80016a2:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80016a6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80016aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80016ae:	f8ad 3002 	strh.w	r3, [sp, #2]
 80016b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80016b6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80016ba:	f004 040c 	and.w	r4, r4, #12
 80016be:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80016c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80016c6:	ed90 7a00 	vldr	s14, [r0]
 80016ca:	f8ad 3004 	strh.w	r3, [sp, #4]
 80016ce:	2200      	movs	r2, #0
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80016d0:	f93d 3012 	ldrsh.w	r3, [sp, r2, lsl #1]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e4:	ee17 3a90 	vmov	r3, s15
 80016e8:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 80016ec:	3201      	adds	r2, #1
  for(i=0; i<3; i++)
 80016ee:	2a03      	cmp	r2, #3
 80016f0:	d1ee      	bne.n	80016d0 <LSM6DSL_AccReadXYZ+0x5c>
}
 80016f2:	b005      	add	sp, #20
 80016f4:	bd30      	pop	{r4, r5, pc}
 80016f6:	bf00      	nop
 80016f8:	0800a138 	.word	0x0800a138

080016fc <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80016fc:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80016fe:	2111      	movs	r1, #17
{
 8001700:	b085      	sub	sp, #20
 8001702:	4604      	mov	r4, r0
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001704:	20d4      	movs	r0, #212	; 0xd4
 8001706:	f7ff fc4f 	bl	8000fa8 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800170a:	2306      	movs	r3, #6
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800170c:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800170e:	aa02      	add	r2, sp, #8
 8001710:	2122      	movs	r1, #34	; 0x22
 8001712:	20d4      	movs	r0, #212	; 0xd4
 8001714:	f7ff fc66 	bl	8000fe4 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001718:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800171c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001720:	4815      	ldr	r0, [pc, #84]	; (8001778 <LSM6DSL_GyroReadXYZAngRate+0x7c>)
 8001722:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001726:	f8ad 3000 	strh.w	r3, [sp]
 800172a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800172e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001732:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001736:	f8ad 3002 	strh.w	r3, [sp, #2]
 800173a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800173e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001742:	f005 050c 	and.w	r5, r5, #12
 8001746:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800174a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800174e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001752:	ed90 7a00 	vldr	s14, [r0]
 8001756:	2300      	movs	r3, #0
 8001758:	4620      	mov	r0, r4
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800175a:	f93d 2013 	ldrsh.w	r2, [sp, r3, lsl #1]
 800175e:	ee07 2a90 	vmov	s15, r2
 8001762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001766:	3301      	adds	r3, #1
 8001768:	ee67 7a87 	vmul.f32	s15, s15, s14
  for(i=0; i<3; i++)
 800176c:	2b03      	cmp	r3, #3
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800176e:	ece0 7a01 	vstmia	r0!, {s15}
  for(i=0; i<3; i++)
 8001772:	d1f2      	bne.n	800175a <LSM6DSL_GyroReadXYZAngRate+0x5e>
  }
}
 8001774:	b005      	add	sp, #20
 8001776:	bd30      	pop	{r4, r5, pc}
 8001778:	0800a16c 	.word	0x0800a16c

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_InitTick+0x2c>)
{
 8001780:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001788:	fbb0 f0f3 	udiv	r0, r0, r3
 800178c:	f000 f88c 	bl	80018a8 <HAL_SYSTICK_Config>
 8001790:	4604      	mov	r4, r0
 8001792:	b938      	cbnz	r0, 80017a4 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001794:	4602      	mov	r2, r0
 8001796:	4629      	mov	r1, r5
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f000 f844 	bl	8001828 <HAL_NVIC_SetPriority>
 80017a0:	4620      	mov	r0, r4
 80017a2:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 80017a4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80017a6:	bd38      	pop	{r3, r4, r5, pc}
 80017a8:	2000024c 	.word	0x2000024c

080017ac <HAL_Init>:
{
 80017ac:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f000 f828 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff ffe1 	bl	800177c <HAL_InitTick>
 80017ba:	4604      	mov	r4, r0
 80017bc:	b918      	cbnz	r0, 80017c6 <HAL_Init+0x1a>
    HAL_MspInit();
 80017be:	f003 f909 	bl	80049d4 <HAL_MspInit>
}
 80017c2:	4620      	mov	r0, r4
 80017c4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80017c6:	2401      	movs	r4, #1
 80017c8:	e7fb      	b.n	80017c2 <HAL_Init+0x16>
	...

080017cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80017cc:	4a02      	ldr	r2, [pc, #8]	; (80017d8 <HAL_IncTick+0xc>)
 80017ce:	6813      	ldr	r3, [r2, #0]
 80017d0:	3301      	adds	r3, #1
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000808 	.word	0x20000808

080017dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80017dc:	4b01      	ldr	r3, [pc, #4]	; (80017e4 <HAL_GetTick+0x8>)
 80017de:	6818      	ldr	r0, [r3, #0]
}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000808 	.word	0x20000808

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b538      	push	{r3, r4, r5, lr}
 80017ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff fff6 	bl	80017dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80017f2:	4605      	mov	r5, r0
  {
    wait++;
 80017f4:	bf18      	it	ne
 80017f6:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017f8:	f7ff fff0 	bl	80017dc <HAL_GetTick>
 80017fc:	1b40      	subs	r0, r0, r5
 80017fe:	4284      	cmp	r4, r0
 8001800:	d8fa      	bhi.n	80017f8 <HAL_Delay+0x10>
  {
  }
}
 8001802:	bd38      	pop	{r3, r4, r5, pc}

08001804 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001806:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001808:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001814:	0200      	lsls	r0, r0, #8
 8001816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800181e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001820:	60d3      	str	r3, [r2, #12]
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182a:	b530      	push	{r4, r5, lr}
 800182c:	68dc      	ldr	r4, [r3, #12]
 800182e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001832:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	2b04      	cmp	r3, #4
 800183a:	bf28      	it	cs
 800183c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 0501 	mov.w	r5, #1
 8001844:	fa05 f303 	lsl.w	r3, r5, r3
 8001848:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184c:	bf8c      	ite	hi
 800184e:	3c03      	subhi	r4, #3
 8001850:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001852:	4019      	ands	r1, r3
 8001854:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001856:	fa05 f404 	lsl.w	r4, r5, r4
 800185a:	3c01      	subs	r4, #1
 800185c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800185e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	ea42 0201 	orr.w	r2, r2, r1
 8001864:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	bfaf      	iteee	ge
 800186a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	f000 000f 	andlt.w	r0, r0, #15
 8001872:	4b06      	ldrlt	r3, [pc, #24]	; (800188c <HAL_NVIC_SetPriority+0x64>)
 8001874:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	bfa5      	ittet	ge
 8001878:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800187c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001884:	bd30      	pop	{r4, r5, pc}
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00
 800188c:	e000ed14 	.word	0xe000ed14

08001890 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001890:	0942      	lsrs	r2, r0, #5
 8001892:	2301      	movs	r3, #1
 8001894:	f000 001f 	and.w	r0, r0, #31
 8001898:	fa03 f000 	lsl.w	r0, r3, r0
 800189c:	4b01      	ldr	r3, [pc, #4]	; (80018a4 <HAL_NVIC_EnableIRQ+0x14>)
 800189e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	3801      	subs	r0, #1
 80018aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018ae:	d20a      	bcs.n	80018c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	21f0      	movs	r1, #240	; 0xf0
 80018b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <DFSDM_GetChannelFromInstance+0x54>)
 80018d6:	4298      	cmp	r0, r3
 80018d8:	d017      	beq.n	800190a <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 80018da:	3320      	adds	r3, #32
 80018dc:	4298      	cmp	r0, r3
 80018de:	d016      	beq.n	800190e <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 80018e0:	3320      	adds	r3, #32
 80018e2:	4298      	cmp	r0, r3
 80018e4:	d015      	beq.n	8001912 <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if (Instance == DFSDM1_Channel3)
 80018e6:	3320      	adds	r3, #32
 80018e8:	4298      	cmp	r0, r3
 80018ea:	d014      	beq.n	8001916 <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018ec:	3320      	adds	r3, #32
 80018ee:	4298      	cmp	r0, r3
 80018f0:	d013      	beq.n	800191a <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 80018f2:	3320      	adds	r3, #32
 80018f4:	4298      	cmp	r0, r3
 80018f6:	d012      	beq.n	800191e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 80018f8:	3320      	adds	r3, #32
 80018fa:	4298      	cmp	r0, r3
 80018fc:	d011      	beq.n	8001922 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
  {
    channel = 7;
 80018fe:	3320      	adds	r3, #32
 8001900:	4298      	cmp	r0, r3
 8001902:	bf0c      	ite	eq
 8001904:	2007      	moveq	r0, #7
 8001906:	2000      	movne	r0, #0
 8001908:	4770      	bx	lr
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 800190a:	2000      	movs	r0, #0
 800190c:	4770      	bx	lr
    channel = 1;
 800190e:	2001      	movs	r0, #1
 8001910:	4770      	bx	lr
    channel = 2;
 8001912:	2002      	movs	r0, #2
 8001914:	4770      	bx	lr
    channel = 3;
 8001916:	2003      	movs	r0, #3
 8001918:	4770      	bx	lr
    channel = 4;
 800191a:	2004      	movs	r0, #4
 800191c:	4770      	bx	lr
    channel = 5;
 800191e:	2005      	movs	r0, #5
 8001920:	4770      	bx	lr
    channel = 6;
 8001922:	2006      	movs	r0, #6
  }

  return channel;
}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40016000 	.word	0x40016000

0800192c <HAL_DFSDM_ChannelInit>:
{
 800192c:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 800192e:	4604      	mov	r4, r0
 8001930:	2800      	cmp	r0, #0
 8001932:	d067      	beq.n	8001a04 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001934:	6800      	ldr	r0, [r0, #0]
 8001936:	4d34      	ldr	r5, [pc, #208]	; (8001a08 <HAL_DFSDM_ChannelInit+0xdc>)
 8001938:	f7ff ffcc 	bl	80018d4 <DFSDM_GetChannelFromInstance>
 800193c:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d15f      	bne.n	8001a04 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001944:	4620      	mov	r0, r4
 8001946:	f003 f85d 	bl	8004a04 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_DFSDM_ChannelInit+0xe0>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	3201      	adds	r2, #1
 8001950:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d119      	bne.n	800198c <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_DFSDM_ChannelInit+0xe4>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001960:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68a1      	ldr	r1, [r4, #8]
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8001970:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001972:	7922      	ldrb	r2, [r4, #4]
 8001974:	2a01      	cmp	r2, #1
 8001976:	d105      	bne.n	8001984 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001978:	68e1      	ldr	r1, [r4, #12]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	3901      	subs	r1, #1
 800197e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001982:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800198a:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800198c:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800198e:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001990:	6803      	ldr	r3, [r0, #0]
 8001992:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8001996:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001998:	6923      	ldr	r3, [r4, #16]
 800199a:	6802      	ldr	r2, [r0, #0]
 800199c:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 800199e:	69a1      	ldr	r1, [r4, #24]
 80019a0:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019a2:	4313      	orrs	r3, r2
 80019a4:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80019a6:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80019a8:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80019aa:	f023 030f 	bic.w	r3, r3, #15
 80019ae:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80019b0:	69e3      	ldr	r3, [r4, #28]
 80019b2:	6802      	ldr	r2, [r0, #0]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	4313      	orrs	r3, r2
 80019b8:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80019ba:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80019bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80019be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80019c0:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 80019c4:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80019c6:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80019c8:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80019ca:	430b      	orrs	r3, r1
 80019cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019d0:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80019d2:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80019d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80019dc:	6843      	ldr	r3, [r0, #4]
 80019de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80019e8:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80019ea:	6803      	ldr	r3, [r0, #0]
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80019f2:	2301      	movs	r3, #1
 80019f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80019f8:	f7ff ff6c 	bl	80018d4 <DFSDM_GetChannelFromInstance>
 80019fc:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8001a00:	2000      	movs	r0, #0
 8001a02:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a04:	2001      	movs	r0, #1
}
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
 8001a08:	20000710 	.word	0x20000710
 8001a0c:	20000730 	.word	0x20000730
 8001a10:	40016000 	.word	0x40016000

08001a14 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a14:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001a18:	2a02      	cmp	r2, #2
{
 8001a1a:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a1c:	d003      	beq.n	8001a26 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1e:	2204      	movs	r2, #4
 8001a20:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001a22:	2001      	movs	r0, #1
 8001a24:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a26:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a28:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a2a:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a2e:	f021 010e 	bic.w	r1, r1, #14
 8001a32:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001a34:	6811      	ldr	r1, [r2, #0]
 8001a36:	f021 0101 	bic.w	r1, r1, #1
 8001a3a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001a3e:	2101      	movs	r1, #1
 8001a40:	f002 021c 	and.w	r2, r2, #28
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001a4a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001a50:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001a54:	b113      	cbz	r3, 8001a5c <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 8001a56:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001a58:	4620      	mov	r0, r4
 8001a5a:	bd10      	pop	{r4, pc}
 8001a5c:	4618      	mov	r0, r3
    }
  }
  return status;
}
 8001a5e:	bd10      	pop	{r4, pc}

08001a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a64:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a68:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001c14 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a6c:	4c67      	ldr	r4, [pc, #412]	; (8001c0c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001a70:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a72:	9a01      	ldr	r2, [sp, #4]
 8001a74:	40da      	lsrs	r2, r3
 8001a76:	d102      	bne.n	8001a7e <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001a78:	b005      	add	sp, #20
 8001a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a7e:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001a80:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a82:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001a84:	ea12 0e06 	ands.w	lr, r2, r6
 8001a88:	f000 80b1 	beq.w	8001bee <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8c:	684a      	ldr	r2, [r1, #4]
 8001a8e:	f022 0710 	bic.w	r7, r2, #16
 8001a92:	2f02      	cmp	r7, #2
 8001a94:	d116      	bne.n	8001ac4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001a96:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001a9a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a9e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001aa2:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001aaa:	f04f 0c0f 	mov.w	ip, #15
 8001aae:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001ab2:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ab6:	690d      	ldr	r5, [r1, #16]
 8001ab8:	fa05 f50a 	lsl.w	r5, r5, sl
 8001abc:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001ac0:	f8c9 5020 	str.w	r5, [r9, #32]
 8001ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ac8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001aca:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ace:	fa05 f50c 	lsl.w	r5, r5, ip
 8001ad2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ad4:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ad8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001adc:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae2:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001ae8:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aec:	d811      	bhi.n	8001b12 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001aee:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001af0:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001af4:	68cf      	ldr	r7, [r1, #12]
 8001af6:	fa07 f70c 	lsl.w	r7, r7, ip
 8001afa:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001afe:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b00:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b02:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b06:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001b0a:	409f      	lsls	r7, r3
 8001b0c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001b10:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b12:	f1ba 0f03 	cmp.w	sl, #3
 8001b16:	d107      	bne.n	8001b28 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001b18:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b1a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001b1e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001b22:	409f      	lsls	r7, r3
 8001b24:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001b26:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001b28:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b2a:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b2c:	688e      	ldr	r6, [r1, #8]
 8001b2e:	fa06 f60c 	lsl.w	r6, r6, ip
 8001b32:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001b34:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b36:	00d5      	lsls	r5, r2, #3
 8001b38:	d559      	bpl.n	8001bee <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001b3e:	f045 0501 	orr.w	r5, r5, #1
 8001b42:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001b46:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001b4a:	f023 0603 	bic.w	r6, r3, #3
 8001b4e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001b52:	f005 0501 	and.w	r5, r5, #1
 8001b56:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001b5a:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b5c:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b60:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b62:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001b68:	270f      	movs	r7, #15
 8001b6a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b6e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b72:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b76:	d03c      	beq.n	8001bf2 <HAL_GPIO_Init+0x192>
 8001b78:	4d25      	ldr	r5, [pc, #148]	; (8001c10 <HAL_GPIO_Init+0x1b0>)
 8001b7a:	42a8      	cmp	r0, r5
 8001b7c:	d03b      	beq.n	8001bf6 <HAL_GPIO_Init+0x196>
 8001b7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b82:	42a8      	cmp	r0, r5
 8001b84:	d039      	beq.n	8001bfa <HAL_GPIO_Init+0x19a>
 8001b86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b8a:	42a8      	cmp	r0, r5
 8001b8c:	d037      	beq.n	8001bfe <HAL_GPIO_Init+0x19e>
 8001b8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b92:	42a8      	cmp	r0, r5
 8001b94:	d035      	beq.n	8001c02 <HAL_GPIO_Init+0x1a2>
 8001b96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b9a:	42a8      	cmp	r0, r5
 8001b9c:	d033      	beq.n	8001c06 <HAL_GPIO_Init+0x1a6>
 8001b9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ba2:	42a8      	cmp	r0, r5
 8001ba4:	bf14      	ite	ne
 8001ba6:	2507      	movne	r5, #7
 8001ba8:	2506      	moveq	r5, #6
 8001baa:	fa05 f50c 	lsl.w	r5, r5, ip
 8001bae:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bb0:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001bb2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001bb4:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bb8:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001bba:	bf54      	ite	pl
 8001bbc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001bbe:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001bc2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001bc4:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc6:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001bc8:	bf54      	ite	pl
 8001bca:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001bcc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001bd0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001bd2:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd4:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001bd6:	bf54      	ite	pl
 8001bd8:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001bda:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001bde:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001be0:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be2:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001be4:	bf54      	ite	pl
 8001be6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001be8:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001bec:	60e5      	str	r5, [r4, #12]
    position++;
 8001bee:	3301      	adds	r3, #1
 8001bf0:	e73f      	b.n	8001a72 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf2:	2500      	movs	r5, #0
 8001bf4:	e7d9      	b.n	8001baa <HAL_GPIO_Init+0x14a>
 8001bf6:	2501      	movs	r5, #1
 8001bf8:	e7d7      	b.n	8001baa <HAL_GPIO_Init+0x14a>
 8001bfa:	2502      	movs	r5, #2
 8001bfc:	e7d5      	b.n	8001baa <HAL_GPIO_Init+0x14a>
 8001bfe:	2503      	movs	r5, #3
 8001c00:	e7d3      	b.n	8001baa <HAL_GPIO_Init+0x14a>
 8001c02:	2504      	movs	r5, #4
 8001c04:	e7d1      	b.n	8001baa <HAL_GPIO_Init+0x14a>
 8001c06:	2505      	movs	r5, #5
 8001c08:	e7cf      	b.n	8001baa <HAL_GPIO_Init+0x14a>
 8001c0a:	bf00      	nop
 8001c0c:	40010400 	.word	0x40010400
 8001c10:	48000400 	.word	0x48000400
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001c1c:	4c47      	ldr	r4, [pc, #284]	; (8001d3c <HAL_GPIO_DeInit+0x124>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c1e:	f8df a124 	ldr.w	sl, [pc, #292]	; 8001d44 <HAL_GPIO_DeInit+0x12c>
 8001c22:	f8df b124 	ldr.w	fp, [pc, #292]	; 8001d48 <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00u;
 8001c26:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c28:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001c2c:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != 0x00u)
 8001c30:	fa31 f203 	lsrs.w	r2, r1, r3
 8001c34:	d102      	bne.n	8001c3c <HAL_GPIO_DeInit+0x24>
      }
    }

    position++;
  }
}
 8001c36:	b003      	add	sp, #12
 8001c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c3c:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent != 0x00u)
 8001c40:	ea11 0206 	ands.w	r2, r1, r6
 8001c44:	9201      	str	r2, [sp, #4]
 8001c46:	d06a      	beq.n	8001d1e <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001c48:	6807      	ldr	r7, [r0, #0]
 8001c4a:	005a      	lsls	r2, r3, #1
 8001c4c:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001c50:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001c54:	4317      	orrs	r7, r2
 8001c56:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001c5a:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001c5c:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8001c60:	f003 0e07 	and.w	lr, r3, #7
 8001c64:	463d      	mov	r5, r7
 8001c66:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001c6a:	270f      	movs	r7, #15
 8001c6c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001c70:	ea25 0e0e 	bic.w	lr, r5, lr
 8001c74:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c78:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8001c7c:	43d2      	mvns	r2, r2
 8001c7e:	ea0e 0e02 	and.w	lr, lr, r2
 8001c82:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c86:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8001c8a:	43f6      	mvns	r6, r6
 8001c8c:	ea0e 0e06 	and.w	lr, lr, r6
 8001c90:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c94:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8001c98:	ea02 020e 	and.w	r2, r2, lr
 8001c9c:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001c9e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001ca0:	4016      	ands	r6, r2
 8001ca2:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001ca4:	f023 0603 	bic.w	r6, r3, #3
 8001ca8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001cac:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001cb0:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001cb4:	68b2      	ldr	r2, [r6, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001cb6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001cba:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001cbe:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001cc2:	ea02 0c07 	and.w	ip, r2, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001cc6:	d02c      	beq.n	8001d22 <HAL_GPIO_DeInit+0x10a>
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_GPIO_DeInit+0x128>)
 8001cca:	4290      	cmp	r0, r2
 8001ccc:	d02b      	beq.n	8001d26 <HAL_GPIO_DeInit+0x10e>
 8001cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cd2:	4290      	cmp	r0, r2
 8001cd4:	d029      	beq.n	8001d2a <HAL_GPIO_DeInit+0x112>
 8001cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cda:	4290      	cmp	r0, r2
 8001cdc:	d027      	beq.n	8001d2e <HAL_GPIO_DeInit+0x116>
 8001cde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ce2:	4290      	cmp	r0, r2
 8001ce4:	d025      	beq.n	8001d32 <HAL_GPIO_DeInit+0x11a>
 8001ce6:	4550      	cmp	r0, sl
 8001ce8:	d025      	beq.n	8001d36 <HAL_GPIO_DeInit+0x11e>
 8001cea:	4558      	cmp	r0, fp
 8001cec:	bf0c      	ite	eq
 8001cee:	2206      	moveq	r2, #6
 8001cf0:	2207      	movne	r2, #7
 8001cf2:	fa02 f20e 	lsl.w	r2, r2, lr
 8001cf6:	4594      	cmp	ip, r2
 8001cf8:	d111      	bne.n	8001d1e <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001cfa:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 8001cfc:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001cfe:	ea22 0707 	bic.w	r7, r2, r7
 8001d02:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 8001d04:	6822      	ldr	r2, [r4, #0]
 8001d06:	43ed      	mvns	r5, r5
 8001d08:	402a      	ands	r2, r5
 8001d0a:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001d0c:	6862      	ldr	r2, [r4, #4]
 8001d0e:	402a      	ands	r2, r5
 8001d10:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001d12:	68a2      	ldr	r2, [r4, #8]
 8001d14:	402a      	ands	r2, r5
 8001d16:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001d18:	68e2      	ldr	r2, [r4, #12]
 8001d1a:	4015      	ands	r5, r2
 8001d1c:	60e5      	str	r5, [r4, #12]
    position++;
 8001d1e:	3301      	adds	r3, #1
 8001d20:	e786      	b.n	8001c30 <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001d22:	2200      	movs	r2, #0
 8001d24:	e7e5      	b.n	8001cf2 <HAL_GPIO_DeInit+0xda>
 8001d26:	2201      	movs	r2, #1
 8001d28:	e7e3      	b.n	8001cf2 <HAL_GPIO_DeInit+0xda>
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	e7e1      	b.n	8001cf2 <HAL_GPIO_DeInit+0xda>
 8001d2e:	2203      	movs	r2, #3
 8001d30:	e7df      	b.n	8001cf2 <HAL_GPIO_DeInit+0xda>
 8001d32:	2204      	movs	r2, #4
 8001d34:	e7dd      	b.n	8001cf2 <HAL_GPIO_DeInit+0xda>
 8001d36:	2205      	movs	r2, #5
 8001d38:	e7db      	b.n	8001cf2 <HAL_GPIO_DeInit+0xda>
 8001d3a:	bf00      	nop
 8001d3c:	40010400 	.word	0x40010400
 8001d40:	48000400 	.word	0x48000400
 8001d44:	48001400 	.word	0x48001400
 8001d48:	48001800 	.word	0x48001800

08001d4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d4c:	b10a      	cbz	r2, 8001d52 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d4e:	6181      	str	r1, [r0, #24]
 8001d50:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d52:	6281      	str	r1, [r0, #40]	; 0x28
 8001d54:	4770      	bx	lr

08001d56 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d56:	4770      	bx	lr

08001d58 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001d58:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001d5c:	6959      	ldr	r1, [r3, #20]
 8001d5e:	4201      	tst	r1, r0
 8001d60:	d002      	beq.n	8001d68 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d62:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d64:	f7ff fff7 	bl	8001d56 <HAL_GPIO_EXTI_Callback>
 8001d68:	bd08      	pop	{r3, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40010400 	.word	0x40010400

08001d70 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d70:	6803      	ldr	r3, [r0, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d76:	bf44      	itt	mi
 8001d78:	2200      	movmi	r2, #0
 8001d7a:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d80:	bf5e      	ittt	pl
 8001d82:	699a      	ldrpl	r2, [r3, #24]
 8001d84:	f042 0201 	orrpl.w	r2, r2, #1
 8001d88:	619a      	strpl	r2, [r3, #24]
 8001d8a:	4770      	bx	lr

08001d8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001d8c:	b530      	push	{r4, r5, lr}
 8001d8e:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001d90:	6805      	ldr	r5, [r0, #0]
 8001d92:	4323      	orrs	r3, r4
 8001d94:	0d64      	lsrs	r4, r4, #21
 8001d96:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001d9a:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001d9e:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001da2:	6868      	ldr	r0, [r5, #4]
 8001da4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001da8:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001dac:	4319      	orrs	r1, r3
 8001dae:	f044 0403 	orr.w	r4, r4, #3
 8001db2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001db6:	ea20 0404 	bic.w	r4, r0, r4
 8001dba:	4321      	orrs	r1, r4
 8001dbc:	6069      	str	r1, [r5, #4]
 8001dbe:	bd30      	pop	{r4, r5, pc}

08001dc0 <I2C_WaitOnFlagUntilTimeout>:
{
 8001dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc4:	9f06      	ldr	r7, [sp, #24]
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	4688      	mov	r8, r1
 8001dca:	4616      	mov	r6, r2
 8001dcc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dce:	6822      	ldr	r2, [r4, #0]
 8001dd0:	6993      	ldr	r3, [r2, #24]
 8001dd2:	ea38 0303 	bics.w	r3, r8, r3
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	42b3      	cmp	r3, r6
 8001dde:	d002      	beq.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001de0:	2000      	movs	r0, #0
}
 8001de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001de6:	1c6b      	adds	r3, r5, #1
 8001de8:	d0f2      	beq.n	8001dd0 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dea:	f7ff fcf7 	bl	80017dc <HAL_GetTick>
 8001dee:	1bc0      	subs	r0, r0, r7
 8001df0:	4285      	cmp	r5, r0
 8001df2:	d301      	bcc.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0x38>
 8001df4:	2d00      	cmp	r5, #0
 8001df6:	d1ea      	bne.n	8001dce <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001dfa:	f043 0320 	orr.w	r3, r3, #32
 8001dfe:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e00:	2320      	movs	r3, #32
 8001e02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001e0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001e10:	2001      	movs	r0, #1
 8001e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e16 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e16:	6803      	ldr	r3, [r0, #0]
{
 8001e18:	b570      	push	{r4, r5, r6, lr}
 8001e1a:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e1c:	6998      	ldr	r0, [r3, #24]
 8001e1e:	f010 0010 	ands.w	r0, r0, #16
{
 8001e22:	460d      	mov	r5, r1
 8001e24:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e26:	d116      	bne.n	8001e56 <I2C_IsAcknowledgeFailed+0x40>
 8001e28:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001e2a:	1c69      	adds	r1, r5, #1
 8001e2c:	d014      	beq.n	8001e58 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2e:	f7ff fcd5 	bl	80017dc <HAL_GetTick>
 8001e32:	1b80      	subs	r0, r0, r6
 8001e34:	4285      	cmp	r5, r0
 8001e36:	d300      	bcc.n	8001e3a <I2C_IsAcknowledgeFailed+0x24>
 8001e38:	b96d      	cbnz	r5, 8001e56 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e3c:	f043 0320 	orr.w	r3, r3, #32
 8001e40:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	2320      	movs	r3, #32
 8001e44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001e4e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001e52:	2001      	movs	r0, #1
}
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	6999      	ldr	r1, [r3, #24]
 8001e5a:	068a      	lsls	r2, r1, #26
 8001e5c:	d5e5      	bpl.n	8001e2a <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e5e:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e60:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e62:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001e64:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e66:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001e68:	f7ff ff82 	bl	8001d70 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001e6c:	6822      	ldr	r2, [r4, #0]
 8001e6e:	6853      	ldr	r3, [r2, #4]
 8001e70:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001e74:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001e78:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e8a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001e8e:	e7db      	b.n	8001e48 <I2C_IsAcknowledgeFailed+0x32>

08001e90 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001e90:	b570      	push	{r4, r5, r6, lr}
 8001e92:	4604      	mov	r4, r0
 8001e94:	460d      	mov	r5, r1
 8001e96:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	079b      	lsls	r3, r3, #30
 8001e9e:	d501      	bpl.n	8001ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea4:	4632      	mov	r2, r6
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7ff ffb4 	bl	8001e16 <I2C_IsAcknowledgeFailed>
 8001eae:	b9a0      	cbnz	r0, 8001eda <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001eb0:	1c6a      	adds	r2, r5, #1
 8001eb2:	d0f1      	beq.n	8001e98 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb4:	f7ff fc92 	bl	80017dc <HAL_GetTick>
 8001eb8:	1b80      	subs	r0, r0, r6
 8001eba:	4285      	cmp	r5, r0
 8001ebc:	d301      	bcc.n	8001ec2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001ebe:	2d00      	cmp	r5, #0
 8001ec0:	d1ea      	bne.n	8001e98 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ec2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ec4:	f043 0320 	orr.w	r3, r3, #32
 8001ec8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001ed6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001eda:	2001      	movs	r0, #1
}
 8001edc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ee0 <I2C_RequestMemoryWrite>:
{
 8001ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ee2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001ee4:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ee6:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <I2C_RequestMemoryWrite+0x60>)
 8001ee8:	9300      	str	r3, [sp, #0]
{
 8001eea:	4605      	mov	r5, r0
 8001eec:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ef2:	b2fa      	uxtb	r2, r7
 8001ef4:	f7ff ff4a 	bl	8001d8c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef8:	4632      	mov	r2, r6
 8001efa:	9908      	ldr	r1, [sp, #32]
 8001efc:	4628      	mov	r0, r5
 8001efe:	f7ff ffc7 	bl	8001e90 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f02:	b110      	cbz	r0, 8001f0a <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8001f04:	2001      	movs	r0, #1
}
 8001f06:	b003      	add	sp, #12
 8001f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f0a:	2f01      	cmp	r7, #1
 8001f0c:	682b      	ldr	r3, [r5, #0]
 8001f0e:	d10c      	bne.n	8001f2a <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f10:	b2e4      	uxtb	r4, r4
 8001f12:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f14:	9b08      	ldr	r3, [sp, #32]
 8001f16:	9600      	str	r6, [sp, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2180      	movs	r1, #128	; 0x80
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	f7ff ff4f 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001f22:	3000      	adds	r0, #0
 8001f24:	bf18      	it	ne
 8001f26:	2001      	movne	r0, #1
 8001f28:	e7ed      	b.n	8001f06 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f2a:	0a22      	lsrs	r2, r4, #8
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f2e:	9908      	ldr	r1, [sp, #32]
 8001f30:	4632      	mov	r2, r6
 8001f32:	4628      	mov	r0, r5
 8001f34:	f7ff ffac 	bl	8001e90 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d1e3      	bne.n	8001f04 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f3c:	682b      	ldr	r3, [r5, #0]
 8001f3e:	e7e7      	b.n	8001f10 <I2C_RequestMemoryWrite+0x30>
 8001f40:	80002000 	.word	0x80002000

08001f44 <I2C_RequestMemoryRead>:
{
 8001f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f46:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001f48:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <I2C_RequestMemoryRead+0x60>)
 8001f4c:	9300      	str	r3, [sp, #0]
{
 8001f4e:	4605      	mov	r5, r0
 8001f50:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f52:	2300      	movs	r3, #0
 8001f54:	b2fa      	uxtb	r2, r7
 8001f56:	f7ff ff19 	bl	8001d8c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f5a:	4632      	mov	r2, r6
 8001f5c:	9908      	ldr	r1, [sp, #32]
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f7ff ff96 	bl	8001e90 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f64:	b110      	cbz	r0, 8001f6c <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8001f66:	2001      	movs	r0, #1
}
 8001f68:	b003      	add	sp, #12
 8001f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f6c:	2f01      	cmp	r7, #1
 8001f6e:	682b      	ldr	r3, [r5, #0]
 8001f70:	d10c      	bne.n	8001f8c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f72:	b2e4      	uxtb	r4, r4
 8001f74:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f76:	9b08      	ldr	r3, [sp, #32]
 8001f78:	9600      	str	r6, [sp, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2140      	movs	r1, #64	; 0x40
 8001f7e:	4628      	mov	r0, r5
 8001f80:	f7ff ff1e 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8001f84:	3000      	adds	r0, #0
 8001f86:	bf18      	it	ne
 8001f88:	2001      	movne	r0, #1
 8001f8a:	e7ed      	b.n	8001f68 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f8c:	0a22      	lsrs	r2, r4, #8
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f90:	9908      	ldr	r1, [sp, #32]
 8001f92:	4632      	mov	r2, r6
 8001f94:	4628      	mov	r0, r5
 8001f96:	f7ff ff7b 	bl	8001e90 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d1e3      	bne.n	8001f66 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	e7e7      	b.n	8001f72 <I2C_RequestMemoryRead+0x2e>
 8001fa2:	bf00      	nop
 8001fa4:	80002000 	.word	0x80002000

08001fa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	4604      	mov	r4, r0
 8001fac:	460d      	mov	r5, r1
 8001fae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	069b      	lsls	r3, r3, #26
 8001fb6:	d501      	bpl.n	8001fbc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001fb8:	2000      	movs	r0, #0
 8001fba:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fbc:	4632      	mov	r2, r6
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f7ff ff28 	bl	8001e16 <I2C_IsAcknowledgeFailed>
 8001fc6:	b990      	cbnz	r0, 8001fee <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc8:	f7ff fc08 	bl	80017dc <HAL_GetTick>
 8001fcc:	1b80      	subs	r0, r0, r6
 8001fce:	4285      	cmp	r5, r0
 8001fd0:	d301      	bcc.n	8001fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001fd2:	2d00      	cmp	r5, #0
 8001fd4:	d1ec      	bne.n	8001fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fd8:	f043 0320 	orr.w	r3, r3, #32
 8001fdc:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	2320      	movs	r3, #32
 8001fe0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001fea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001fee:	2001      	movs	r0, #1
}
 8001ff0:	bd70      	pop	{r4, r5, r6, pc}

08001ff2 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001ff2:	b570      	push	{r4, r5, r6, lr}
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	460d      	mov	r5, r1
 8001ff8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	075b      	lsls	r3, r3, #29
 8002000:	d40e      	bmi.n	8002020 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002002:	4632      	mov	r2, r6
 8002004:	4629      	mov	r1, r5
 8002006:	4620      	mov	r0, r4
 8002008:	f7ff ff05 	bl	8001e16 <I2C_IsAcknowledgeFailed>
 800200c:	b9f0      	cbnz	r0, 800204c <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	0691      	lsls	r1, r2, #26
 8002014:	d51c      	bpl.n	8002050 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	0752      	lsls	r2, r2, #29
 800201a:	d503      	bpl.n	8002024 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 800201c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800201e:	b10a      	cbz	r2, 8002024 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8002020:	2000      	movs	r0, #0
 8002022:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002024:	2120      	movs	r1, #32
 8002026:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800202e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002032:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203c:	2300      	movs	r3, #0
 800203e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002040:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002048:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800204c:	2001      	movs	r0, #1
}
 800204e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002050:	f7ff fbc4 	bl	80017dc <HAL_GetTick>
 8002054:	1b80      	subs	r0, r0, r6
 8002056:	4285      	cmp	r5, r0
 8002058:	d301      	bcc.n	800205e <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800205a:	2d00      	cmp	r5, #0
 800205c:	d1cd      	bne.n	8001ffa <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800205e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002060:	f043 0320 	orr.w	r3, r3, #32
 8002064:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002066:	2320      	movs	r3, #32
 8002068:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 800206c:	2300      	movs	r3, #0
 800206e:	e7eb      	b.n	8002048 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08002070 <HAL_I2C_Init>:
{
 8002070:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002072:	4604      	mov	r4, r0
 8002074:	2800      	cmp	r0, #0
 8002076:	d04a      	beq.n	800210e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002078:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800207c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002080:	b91b      	cbnz	r3, 800208a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002082:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002086:	f002 fcef 	bl	8004a68 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800208a:	2324      	movs	r3, #36	; 0x24
 800208c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002090:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002092:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800209c:	6862      	ldr	r2, [r4, #4]
 800209e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020a4:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020a6:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020b0:	d124      	bne.n	80020fc <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020b6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020b8:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020ba:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020bc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80020c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020c4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020cc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020ce:	6922      	ldr	r2, [r4, #16]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	69a1      	ldr	r1, [r4, #24]
 80020d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020d8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020da:	6a21      	ldr	r1, [r4, #32]
 80020dc:	69e2      	ldr	r2, [r4, #28]
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ea:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80020ec:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ee:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020f4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80020fa:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020fc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002100:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002102:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002104:	bf04      	itt	eq
 8002106:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800210a:	605a      	streq	r2, [r3, #4]
 800210c:	e7d4      	b.n	80020b8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800210e:	2001      	movs	r0, #1
}
 8002110:	bd10      	pop	{r4, pc}

08002112 <HAL_I2C_DeInit>:
{
 8002112:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002114:	4604      	mov	r4, r0
 8002116:	b198      	cbz	r0, 8002140 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8002118:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800211a:	2324      	movs	r3, #36	; 0x24
 800211c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002120:	6813      	ldr	r3, [r2, #0]
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002128:	f002 fcd4 	bl	8004ad4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212c:	2000      	movs	r0, #0
 800212e:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8002130:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8002134:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002138:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800213a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 800213e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002140:	2001      	movs	r0, #1
}
 8002142:	bd10      	pop	{r4, pc}

08002144 <HAL_I2C_Master_Transmit>:
{
 8002144:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002148:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800214a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800214e:	2b20      	cmp	r3, #32
{
 8002150:	4604      	mov	r4, r0
 8002152:	460e      	mov	r6, r1
 8002154:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002156:	f040 8084 	bne.w	8002262 <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 800215a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800215e:	2b01      	cmp	r3, #1
 8002160:	d07f      	beq.n	8002262 <HAL_I2C_Master_Transmit+0x11e>
 8002162:	2701      	movs	r7, #1
 8002164:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002168:	f7ff fb38 	bl	80017dc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800216c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800216e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002170:	9000      	str	r0, [sp, #0]
 8002172:	463a      	mov	r2, r7
 8002174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002178:	4620      	mov	r0, r4
 800217a:	f7ff fe21 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 800217e:	b118      	cbz	r0, 8002188 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8002180:	2001      	movs	r0, #1
}
 8002182:	b003      	add	sp, #12
 8002184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002188:	2321      	movs	r3, #33	; 0x21
 800218a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800218e:	2310      	movs	r3, #16
 8002190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002194:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002196:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800219a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800219c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80021a4:	6360      	str	r0, [r4, #52]	; 0x34
 80021a6:	4b30      	ldr	r3, [pc, #192]	; (8002268 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021a8:	d926      	bls.n	80021f8 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021ae:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021b4:	4631      	mov	r1, r6
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7ff fde8 	bl	8001d8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021be:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80021c0:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c2:	462a      	mov	r2, r5
 80021c4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80021c6:	b9fb      	cbnz	r3, 8002208 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c8:	f7ff feee 	bl	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d1d7      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	2120      	movs	r1, #32
 80021d4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80021dc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80021e0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80021ee:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80021f6:	e7c4      	b.n	8002182 <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80021f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80021fa:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80021fc:	b292      	uxth	r2, r2
 80021fe:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	e7d5      	b.n	80021b4 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002208:	f7ff fe42 	bl	8001e90 <I2C_WaitOnTXISFlagUntilTimeout>
 800220c:	2800      	cmp	r0, #0
 800220e:	d1b7      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002212:	6822      	ldr	r2, [r4, #0]
 8002214:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002218:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800221a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800221c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800221e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002220:	3b01      	subs	r3, #1
 8002222:	b29b      	uxth	r3, r3
 8002224:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002226:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002228:	3a01      	subs	r2, #1
 800222a:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800222c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800222e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0c3      	beq.n	80021bc <HAL_I2C_Master_Transmit+0x78>
 8002234:	2a00      	cmp	r2, #0
 8002236:	d1c1      	bne.n	80021bc <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002238:	9500      	str	r5, [sp, #0]
 800223a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	4620      	mov	r0, r4
 8002240:	f7ff fdbe 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8002244:	2800      	cmp	r0, #0
 8002246:	d19b      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002248:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	2bff      	cmp	r3, #255	; 0xff
 800224e:	d903      	bls.n	8002258 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002250:	22ff      	movs	r2, #255	; 0xff
 8002252:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002254:	9000      	str	r0, [sp, #0]
 8002256:	e7ab      	b.n	80021b0 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8002258:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800225a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800225c:	b292      	uxth	r2, r2
 800225e:	8522      	strh	r2, [r4, #40]	; 0x28
 8002260:	e7ce      	b.n	8002200 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8002262:	2002      	movs	r0, #2
 8002264:	e78d      	b.n	8002182 <HAL_I2C_Master_Transmit+0x3e>
 8002266:	bf00      	nop
 8002268:	80002000 	.word	0x80002000

0800226c <HAL_I2C_Master_Receive>:
{
 800226c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002270:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002272:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002276:	2b20      	cmp	r3, #32
{
 8002278:	4604      	mov	r4, r0
 800227a:	460e      	mov	r6, r1
 800227c:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800227e:	f040 8086 	bne.w	800238e <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8002282:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002286:	2b01      	cmp	r3, #1
 8002288:	f000 8081 	beq.w	800238e <HAL_I2C_Master_Receive+0x122>
 800228c:	2701      	movs	r7, #1
 800228e:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002292:	f7ff faa3 	bl	80017dc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002296:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002298:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800229a:	9000      	str	r0, [sp, #0]
 800229c:	463a      	mov	r2, r7
 800229e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7ff fd8c 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 80022a8:	b118      	cbz	r0, 80022b2 <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 80022aa:	2001      	movs	r0, #1
}
 80022ac:	b003      	add	sp, #12
 80022ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022b2:	2322      	movs	r3, #34	; 0x22
 80022b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022b8:	2310      	movs	r3, #16
 80022ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022be:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80022c0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80022c6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80022ce:	6360      	str	r0, [r4, #52]	; 0x34
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d2:	d926      	bls.n	8002322 <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022d4:	22ff      	movs	r2, #255	; 0xff
 80022d6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80022d8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022de:	4631      	mov	r1, r6
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7ff fd53 	bl	8001d8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80022ea:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ec:	462a      	mov	r2, r5
 80022ee:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80022f0:	b9fb      	cbnz	r3, 8002332 <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f2:	f7ff fe59 	bl	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d1d7      	bne.n	80022aa <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	2120      	movs	r1, #32
 80022fe:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002306:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800230a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002314:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002318:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800231c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002320:	e7c4      	b.n	80022ac <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 8002322:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002324:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002326:	b292      	uxth	r2, r2
 8002328:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800232a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	e7d5      	b.n	80022de <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002332:	f7ff fe5e 	bl	8001ff2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002336:	2800      	cmp	r0, #0
 8002338:	d1b7      	bne.n	80022aa <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800233a:	6822      	ldr	r2, [r4, #0]
 800233c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800233e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002340:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002342:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002344:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002346:	3301      	adds	r3, #1
 8002348:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800234a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800234c:	3b01      	subs	r3, #1
 800234e:	b29b      	uxth	r3, r3
 8002350:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002352:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002354:	3a01      	subs	r2, #1
 8002356:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002358:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800235a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0c2      	beq.n	80022e6 <HAL_I2C_Master_Receive+0x7a>
 8002360:	2a00      	cmp	r2, #0
 8002362:	d1c0      	bne.n	80022e6 <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002364:	9500      	str	r5, [sp, #0]
 8002366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002368:	2180      	movs	r1, #128	; 0x80
 800236a:	4620      	mov	r0, r4
 800236c:	f7ff fd28 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8002370:	2800      	cmp	r0, #0
 8002372:	d19a      	bne.n	80022aa <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002374:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	2bff      	cmp	r3, #255	; 0xff
 800237a:	d903      	bls.n	8002384 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800237c:	22ff      	movs	r2, #255	; 0xff
 800237e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002380:	9000      	str	r0, [sp, #0]
 8002382:	e7aa      	b.n	80022da <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8002384:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002386:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002388:	b292      	uxth	r2, r2
 800238a:	8522      	strh	r2, [r4, #40]	; 0x28
 800238c:	e7cd      	b.n	800232a <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 800238e:	2002      	movs	r0, #2
 8002390:	e78c      	b.n	80022ac <HAL_I2C_Master_Receive+0x40>
 8002392:	bf00      	nop
 8002394:	80002400 	.word	0x80002400

08002398 <HAL_I2C_Mem_Write>:
{
 8002398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800239c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800239e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80023a2:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a4:	2b20      	cmp	r3, #32
{
 80023a6:	4604      	mov	r4, r0
 80023a8:	460f      	mov	r7, r1
 80023aa:	9203      	str	r2, [sp, #12]
 80023ac:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80023b0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b4:	f040 80a5 	bne.w	8002502 <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 80023b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023ba:	b113      	cbz	r3, 80023c2 <HAL_I2C_Mem_Write+0x2a>
 80023bc:	f1ba 0f00 	cmp.w	sl, #0
 80023c0:	d106      	bne.n	80023d0 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c6:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80023c8:	2001      	movs	r0, #1
}
 80023ca:	b005      	add	sp, #20
 80023cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80023d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	f000 8094 	beq.w	8002502 <HAL_I2C_Mem_Write+0x16a>
 80023da:	2501      	movs	r5, #1
 80023dc:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80023e0:	f7ff f9fc 	bl	80017dc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023e4:	2319      	movs	r3, #25
 80023e6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80023e8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ea:	462a      	mov	r2, r5
 80023ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7ff fce5 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 80023f6:	4681      	mov	r9, r0
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d1e5      	bne.n	80023c8 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023fc:	2321      	movs	r3, #33	; 0x21
 80023fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002402:	2340      	movs	r3, #64	; 0x40
 8002404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800240c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800240e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002410:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002414:	9601      	str	r6, [sp, #4]
 8002416:	f8cd 8000 	str.w	r8, [sp]
 800241a:	465b      	mov	r3, fp
 800241c:	9a03      	ldr	r2, [sp, #12]
 800241e:	4639      	mov	r1, r7
 8002420:	4620      	mov	r0, r4
 8002422:	f7ff fd5d 	bl	8001ee0 <I2C_RequestMemoryWrite>
 8002426:	b110      	cbz	r0, 800242e <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8002428:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800242c:	e7cc      	b.n	80023c8 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800242e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d955      	bls.n	80024e2 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002436:	22ff      	movs	r2, #255	; 0xff
 8002438:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800243a:	9000      	str	r0, [sp, #0]
 800243c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002440:	4639      	mov	r1, r7
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff fca2 	bl	8001d8c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002448:	4632      	mov	r2, r6
 800244a:	4641      	mov	r1, r8
 800244c:	4620      	mov	r0, r4
 800244e:	f7ff fd1f 	bl	8001e90 <I2C_WaitOnTXISFlagUntilTimeout>
 8002452:	2800      	cmp	r0, #0
 8002454:	d1b8      	bne.n	80023c8 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002458:	6822      	ldr	r2, [r4, #0]
 800245a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800245e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002460:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002462:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002464:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002466:	3b01      	subs	r3, #1
 8002468:	b29b      	uxth	r3, r3
 800246a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800246c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800246e:	3a01      	subs	r2, #1
 8002470:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002472:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002474:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002476:	b1ab      	cbz	r3, 80024a4 <HAL_I2C_Mem_Write+0x10c>
 8002478:	b9a2      	cbnz	r2, 80024a4 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800247a:	9600      	str	r6, [sp, #0]
 800247c:	4643      	mov	r3, r8
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	4620      	mov	r0, r4
 8002482:	f7ff fc9d 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8002486:	2800      	cmp	r0, #0
 8002488:	d19e      	bne.n	80023c8 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800248a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	2bff      	cmp	r3, #255	; 0xff
 8002490:	d92f      	bls.n	80024f2 <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002492:	22ff      	movs	r2, #255	; 0xff
 8002494:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002496:	9000      	str	r0, [sp, #0]
 8002498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800249c:	4639      	mov	r1, r7
 800249e:	4620      	mov	r0, r4
 80024a0:	f7ff fc74 	bl	8001d8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80024a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1cd      	bne.n	8002448 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ac:	4632      	mov	r2, r6
 80024ae:	4641      	mov	r1, r8
 80024b0:	4620      	mov	r0, r4
 80024b2:	f7ff fd79 	bl	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d186      	bne.n	80023c8 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	2120      	movs	r1, #32
 80024be:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80024c6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80024ca:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80024d8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024dc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80024e0:	e773      	b.n	80023ca <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80024e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024e4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80024e6:	b292      	uxth	r2, r2
 80024e8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	e7a6      	b.n	8002440 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80024f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024f4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80024f6:	b292      	uxth	r2, r2
 80024f8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	e7cc      	b.n	800249c <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 8002502:	2002      	movs	r0, #2
 8002504:	e761      	b.n	80023ca <HAL_I2C_Mem_Write+0x32>
	...

08002508 <HAL_I2C_Mem_Read>:
{
 8002508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800250c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800250e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002512:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002514:	2b20      	cmp	r3, #32
{
 8002516:	4604      	mov	r4, r0
 8002518:	460f      	mov	r7, r1
 800251a:	9203      	str	r2, [sp, #12]
 800251c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002520:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002524:	f040 80a9 	bne.w	800267a <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800252a:	b113      	cbz	r3, 8002532 <HAL_I2C_Mem_Read+0x2a>
 800252c:	f1ba 0f00 	cmp.w	sl, #0
 8002530:	d106      	bne.n	8002540 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002536:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002538:	2001      	movs	r0, #1
}
 800253a:	b005      	add	sp, #20
 800253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002540:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002544:	2b01      	cmp	r3, #1
 8002546:	f000 8098 	beq.w	800267a <HAL_I2C_Mem_Read+0x172>
 800254a:	2501      	movs	r5, #1
 800254c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002550:	f7ff f944 	bl	80017dc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002554:	2319      	movs	r3, #25
 8002556:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002558:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800255a:	462a      	mov	r2, r5
 800255c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002560:	4620      	mov	r0, r4
 8002562:	f7ff fc2d 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 8002566:	4681      	mov	r9, r0
 8002568:	2800      	cmp	r0, #0
 800256a:	d1e5      	bne.n	8002538 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800256c:	2322      	movs	r3, #34	; 0x22
 800256e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002572:	2340      	movs	r3, #64	; 0x40
 8002574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002578:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800257c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800257e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002580:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002584:	9601      	str	r6, [sp, #4]
 8002586:	f8cd 8000 	str.w	r8, [sp]
 800258a:	465b      	mov	r3, fp
 800258c:	9a03      	ldr	r2, [sp, #12]
 800258e:	4639      	mov	r1, r7
 8002590:	4620      	mov	r0, r4
 8002592:	f7ff fcd7 	bl	8001f44 <I2C_RequestMemoryRead>
 8002596:	b110      	cbz	r0, 800259e <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8002598:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800259c:	e7cc      	b.n	8002538 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800259e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2bff      	cmp	r3, #255	; 0xff
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_I2C_Mem_Read+0x178>)
 80025a6:	d958      	bls.n	800265a <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a8:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80025aa:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ac:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80025ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80025b2:	4639      	mov	r1, r7
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7ff fbe9 	bl	8001d8c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025ba:	9600      	str	r6, [sp, #0]
 80025bc:	4643      	mov	r3, r8
 80025be:	2200      	movs	r2, #0
 80025c0:	2104      	movs	r1, #4
 80025c2:	4620      	mov	r0, r4
 80025c4:	f7ff fbfc 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	2800      	cmp	r0, #0
 80025ca:	d1b5      	bne.n	8002538 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025cc:	6822      	ldr	r2, [r4, #0]
 80025ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80025d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80025d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80025d8:	3301      	adds	r3, #1
 80025da:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80025dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80025e6:	3a01      	subs	r2, #1
 80025e8:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025ea:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80025ec:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025ee:	b1ab      	cbz	r3, 800261c <HAL_I2C_Mem_Read+0x114>
 80025f0:	b9a2      	cbnz	r2, 800261c <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025f2:	9600      	str	r6, [sp, #0]
 80025f4:	4643      	mov	r3, r8
 80025f6:	2180      	movs	r1, #128	; 0x80
 80025f8:	4620      	mov	r0, r4
 80025fa:	f7ff fbe1 	bl	8001dc0 <I2C_WaitOnFlagUntilTimeout>
 80025fe:	2800      	cmp	r0, #0
 8002600:	d19a      	bne.n	8002538 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002602:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2bff      	cmp	r3, #255	; 0xff
 8002608:	d92f      	bls.n	800266a <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800260a:	22ff      	movs	r2, #255	; 0xff
 800260c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800260e:	9000      	str	r0, [sp, #0]
 8002610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002614:	4639      	mov	r1, r7
 8002616:	4620      	mov	r0, r4
 8002618:	f7ff fbb8 	bl	8001d8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800261c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ca      	bne.n	80025ba <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002624:	4632      	mov	r2, r6
 8002626:	4641      	mov	r1, r8
 8002628:	4620      	mov	r0, r4
 800262a:	f7ff fcbd 	bl	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800262e:	2800      	cmp	r0, #0
 8002630:	d182      	bne.n	8002538 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	2120      	movs	r1, #32
 8002636:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800263e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002642:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800264c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002650:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002654:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002658:	e76f      	b.n	800253a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800265a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800265c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800265e:	b292      	uxth	r2, r2
 8002660:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	e7a3      	b.n	80025b2 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 800266a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800266c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800266e:	b292      	uxth	r2, r2
 8002670:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	e7cc      	b.n	8002614 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 800267a:	2002      	movs	r0, #2
 800267c:	e75d      	b.n	800253a <HAL_I2C_Mem_Read+0x32>
 800267e:	bf00      	nop
 8002680:	80002400 	.word	0x80002400

08002684 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002684:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	2a20      	cmp	r2, #32
{
 800268c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800268e:	d11d      	bne.n	80026cc <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002690:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002694:	2b01      	cmp	r3, #1
 8002696:	d019      	beq.n	80026cc <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002698:	2324      	movs	r3, #36	; 0x24
 800269a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800269e:	6803      	ldr	r3, [r0, #0]
 80026a0:	681c      	ldr	r4, [r3, #0]
 80026a2:	f024 0401 	bic.w	r4, r4, #1
 80026a6:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026a8:	681c      	ldr	r4, [r3, #0]
 80026aa:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80026ae:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026b0:	681c      	ldr	r4, [r3, #0]
 80026b2:	4321      	orrs	r1, r4
 80026b4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	f041 0101 	orr.w	r1, r1, #1
 80026bc:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026be:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80026c4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2002      	movs	r0, #2
  }
}
 80026ce:	bd10      	pop	{r4, pc}

080026d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026d0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d2:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80026d6:	b2e4      	uxtb	r4, r4
 80026d8:	2c20      	cmp	r4, #32
 80026da:	d11c      	bne.n	8002716 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d018      	beq.n	8002716 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026e4:	2324      	movs	r3, #36	; 0x24
 80026e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026ea:	6803      	ldr	r3, [r0, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026f4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026f6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026fa:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026fe:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002708:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800270a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800270e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002712:	4618      	mov	r0, r3
 8002714:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002716:	2002      	movs	r0, #2
  }
}
 8002718:	bd10      	pop	{r4, pc}

0800271a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800271a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800271e:	4604      	mov	r4, r0
{
 8002720:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8002722:	2800      	cmp	r0, #0
 8002724:	d074      	beq.n	8002810 <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002726:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800272a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800272e:	b91b      	cbnz	r3, 8002738 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002730:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002734:	f002 fafa 	bl	8004d2c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002738:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800273a:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 800273c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002740:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8002744:	f001 fd5f 	bl	8004206 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800274a:	466e      	mov	r6, sp
 800274c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800274e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002750:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002752:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002756:	e886 0003 	stmia.w	r6, {r0, r1}
 800275a:	f104 0804 	add.w	r8, r4, #4
 800275e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002762:	6820      	ldr	r0, [r4, #0]
 8002764:	f001 fd20 	bl	80041a8 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002768:	2100      	movs	r1, #0
 800276a:	6820      	ldr	r0, [r4, #0]
 800276c:	f001 fd51 	bl	8004212 <USB_SetCurrentMode>
 8002770:	2100      	movs	r1, #0
 8002772:	4622      	mov	r2, r4
 8002774:	4623      	mov	r3, r4
 8002776:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800277a:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800277c:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 800277e:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002782:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8002786:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8002788:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 800278a:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800278e:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8002792:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002794:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8002796:	6518      	str	r0, [r3, #80]	; 0x50
 8002798:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 800279c:	d1ef      	bne.n	800277e <HAL_PCD_Init+0x64>
 800279e:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027a0:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 80027a2:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 80027a6:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 80027a8:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 80027aa:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ae:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027b2:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027b6:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027ba:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 80027be:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 80027c2:	d1ee      	bne.n	80027a2 <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80027c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c6:	466e      	mov	r6, sp
 80027c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80027ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80027ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027d2:	e886 0003 	stmia.w	r6, {r0, r1}
 80027d6:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80027da:	6820      	ldr	r0, [r4, #0]
 80027dc:	f001 fd5a 	bl	8004294 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 80027e0:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80027e2:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027e6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027f0:	4620      	mov	r0, r4
 80027f2:	f000 f80f 	bl	8002814 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 80027f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d102      	bne.n	8002802 <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 80027fc:	4620      	mov	r0, r4
 80027fe:	f000 f81c 	bl	800283a <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002802:	6820      	ldr	r0, [r4, #0]
 8002804:	f001 fde2 	bl	80043cc <USB_DevDisconnect>

  return HAL_OK;
 8002808:	2000      	movs	r0, #0
}
 800280a:	b00a      	add	sp, #40	; 0x28
 800280c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002810:	2001      	movs	r0, #1
 8002812:	e7fa      	b.n	800280a <HAL_PCD_Init+0xf0>

08002814 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002814:	6802      	ldr	r2, [r0, #0]
{
 8002816:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8002818:	2101      	movs	r1, #1
 800281a:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800281e:	2000      	movs	r0, #0
 8002820:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002824:	6993      	ldr	r3, [r2, #24]
 8002826:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800282a:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800282c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800282e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002832:	f043 0303 	orr.w	r3, r3, #3
 8002836:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8002838:	4770      	bx	lr

0800283a <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800283a:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 800283c:	2301      	movs	r3, #1
 800283e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8002842:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002848:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 800284a:	2000      	movs	r0, #0
 800284c:	4770      	bx	lr
	...

08002850 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002850:	4a02      	ldr	r2, [pc, #8]	; (800285c <HAL_PWR_EnableBkUpAccess+0xc>)
 8002852:	6813      	ldr	r3, [r2, #0]
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4770      	bx	lr
 800285c:	40007000 	.word	0x40007000

08002860 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002860:	4b02      	ldr	r3, [pc, #8]	; (800286c <HAL_PWREx_GetVoltageRange+0xc>)
 8002862:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002864:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40007000 	.word	0x40007000

08002870 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002872:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002874:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002878:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800287c:	d11c      	bne.n	80028b8 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800287e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002882:	d015      	beq.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800288a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002890:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002892:	6811      	ldr	r1, [r2, #0]
 8002894:	2232      	movs	r2, #50	; 0x32
 8002896:	434a      	muls	r2, r1
 8002898:	490f      	ldr	r1, [pc, #60]	; (80028d8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800289a:	fbb2 f2f1 	udiv	r2, r2, r1
 800289e:	4619      	mov	r1, r3
 80028a0:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a2:	6958      	ldr	r0, [r3, #20]
 80028a4:	0540      	lsls	r0, r0, #21
 80028a6:	d500      	bpl.n	80028aa <HAL_PWREx_ControlVoltageScaling+0x3a>
 80028a8:	b922      	cbnz	r2, 80028b4 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028aa:	694b      	ldr	r3, [r1, #20]
 80028ac:	055b      	lsls	r3, r3, #21
 80028ae:	d40d      	bmi.n	80028cc <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028b0:	2000      	movs	r0, #0
 80028b2:	4770      	bx	lr
        wait_loop_index--;
 80028b4:	3a01      	subs	r2, #1
 80028b6:	e7f4      	b.n	80028a2 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028bc:	bf1f      	itttt	ne
 80028be:	681a      	ldrne	r2, [r3, #0]
 80028c0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80028c4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80028c8:	601a      	strne	r2, [r3, #0]
 80028ca:	e7f1      	b.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80028cc:	2003      	movs	r0, #3
}
 80028ce:	4770      	bx	lr
 80028d0:	40007000 	.word	0x40007000
 80028d4:	2000024c 	.word	0x2000024c
 80028d8:	000f4240 	.word	0x000f4240

080028dc <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80028dc:	4a02      	ldr	r2, [pc, #8]	; (80028e8 <HAL_PWREx_EnableVddUSB+0xc>)
 80028de:	6853      	ldr	r3, [r2, #4]
 80028e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e4:	6053      	str	r3, [r2, #4]
 80028e6:	4770      	bx	lr
 80028e8:	40007000 	.word	0x40007000

080028ec <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80028ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028f0:	9d06      	ldr	r5, [sp, #24]
 80028f2:	4604      	mov	r4, r0
 80028f4:	460f      	mov	r7, r1
 80028f6:	4616      	mov	r6, r2
 80028f8:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80028fa:	6821      	ldr	r1, [r4, #0]
 80028fc:	688a      	ldr	r2, [r1, #8]
 80028fe:	423a      	tst	r2, r7
 8002900:	bf14      	ite	ne
 8002902:	2201      	movne	r2, #1
 8002904:	2200      	moveq	r2, #0
 8002906:	42b2      	cmp	r2, r6
 8002908:	d102      	bne.n	8002910 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800290a:	2000      	movs	r0, #0
}
 800290c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002910:	1c6b      	adds	r3, r5, #1
 8002912:	d0f3      	beq.n	80028fc <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002914:	f7fe ff62 	bl	80017dc <HAL_GetTick>
 8002918:	eba0 0008 	sub.w	r0, r0, r8
 800291c:	4285      	cmp	r5, r0
 800291e:	d301      	bcc.n	8002924 <QSPI_WaitFlagStateUntilTimeout+0x38>
 8002920:	2d00      	cmp	r5, #0
 8002922:	d1ea      	bne.n	80028fa <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002924:	2304      	movs	r3, #4
 8002926:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800292a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002932:	2001      	movs	r0, #1
 8002934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002938 <HAL_QSPI_Init>:
{
 8002938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800293a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800293c:	f7fe ff4e 	bl	80017dc <HAL_GetTick>
 8002940:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8002942:	2c00      	cmp	r4, #0
 8002944:	d049      	beq.n	80029da <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8002946:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800294a:	2b01      	cmp	r3, #1
 800294c:	d047      	beq.n	80029de <HAL_QSPI_Init+0xa6>
 800294e:	2301      	movs	r3, #1
 8002950:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002954:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002958:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800295c:	b93a      	cbnz	r2, 800296e <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 800295e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8002962:	4620      	mov	r0, r4
 8002964:	f002 f8cc 	bl	8004b00 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8002968:	f241 3388 	movw	r3, #5000	; 0x1388
 800296c:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800296e:	6820      	ldr	r0, [r4, #0]
 8002970:	68a1      	ldr	r1, [r4, #8]
 8002972:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002974:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002976:	3901      	subs	r1, #1
 8002978:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800297c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002980:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002982:	2120      	movs	r1, #32
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2200      	movs	r2, #0
 8002988:	462b      	mov	r3, r5
 800298a:	4620      	mov	r0, r4
 800298c:	f7ff ffae 	bl	80028ec <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8002990:	b9f0      	cbnz	r0, 80029d0 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	6865      	ldr	r5, [r4, #4]
 8002996:	6811      	ldr	r1, [r2, #0]
 8002998:	68e3      	ldr	r3, [r4, #12]
 800299a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800299e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80029a2:	f021 0110 	bic.w	r1, r1, #16
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80029aa:	69a1      	ldr	r1, [r4, #24]
 80029ac:	6963      	ldr	r3, [r4, #20]
 80029ae:	6855      	ldr	r5, [r2, #4]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	6921      	ldr	r1, [r4, #16]
 80029b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80029b8:	490a      	ldr	r1, [pc, #40]	; (80029e4 <HAL_QSPI_Init+0xac>)
 80029ba:	4029      	ands	r1, r5
 80029bc:	430b      	orrs	r3, r1
 80029be:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80029c0:	6813      	ldr	r3, [r2, #0]
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80029c8:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80029ca:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 80029cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 80029d0:	2300      	movs	r3, #0
 80029d2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 80029d6:	b003      	add	sp, #12
 80029d8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80029da:	2001      	movs	r0, #1
 80029dc:	e7fb      	b.n	80029d6 <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 80029de:	2002      	movs	r0, #2
 80029e0:	e7f9      	b.n	80029d6 <HAL_QSPI_Init+0x9e>
 80029e2:	bf00      	nop
 80029e4:	ffe0f8fe 	.word	0xffe0f8fe

080029e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029ea:	4d1e      	ldr	r5, [pc, #120]	; (8002a64 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80029ec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80029ee:	00da      	lsls	r2, r3, #3
{
 80029f0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029f2:	d518      	bpl.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029f4:	f7ff ff34 	bl	8002860 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80029fc:	d123      	bne.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029fe:	2c80      	cmp	r4, #128	; 0x80
 8002a00:	d929      	bls.n	8002a56 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a02:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a04:	bf8c      	ite	hi
 8002a06:	2002      	movhi	r0, #2
 8002a08:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a0a:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002a0c:	6813      	ldr	r3, [r2, #0]
 8002a0e:	f023 0307 	bic.w	r3, r3, #7
 8002a12:	4303      	orrs	r3, r0
 8002a14:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a16:	6813      	ldr	r3, [r2, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002a1c:	1a18      	subs	r0, r3, r0
 8002a1e:	bf18      	it	ne
 8002a20:	2001      	movne	r0, #1
 8002a22:	b003      	add	sp, #12
 8002a24:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	65ab      	str	r3, [r5, #88]	; 0x58
 8002a2e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	9301      	str	r3, [sp, #4]
 8002a36:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002a38:	f7ff ff12 	bl	8002860 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a3c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a42:	65ab      	str	r3, [r5, #88]	; 0x58
 8002a44:	e7d8      	b.n	80029f8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002a46:	2c80      	cmp	r4, #128	; 0x80
 8002a48:	d807      	bhi.n	8002a5a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002a4a:	d008      	beq.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002a4c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002a50:	4258      	negs	r0, r3
 8002a52:	4158      	adcs	r0, r3
 8002a54:	e7d9      	b.n	8002a0a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a56:	2000      	movs	r0, #0
 8002a58:	e7d7      	b.n	8002a0a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a5a:	2003      	movs	r0, #3
 8002a5c:	e7d5      	b.n	8002a0a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a5e:	2002      	movs	r0, #2
 8002a60:	e7d3      	b.n	8002a0a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40022000 	.word	0x40022000

08002a6c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a6e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a70:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a72:	f012 020c 	ands.w	r2, r2, #12
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x18>
 8002a78:	2a0c      	cmp	r2, #12
 8002a7a:	d115      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a7c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a80:	2901      	cmp	r1, #1
 8002a82:	d118      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a84:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002a86:	4820      	ldr	r0, [pc, #128]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a88:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a8a:	bf55      	itete	pl
 8002a8c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a90:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a92:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a96:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002a9a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a9e:	b382      	cbz	r2, 8002b02 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002aa0:	2a0c      	cmp	r2, #12
 8002aa2:	d009      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x4c>
 8002aa4:	2000      	movs	r0, #0
  return sysclockfreq;
 8002aa6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aa8:	2a04      	cmp	r2, #4
 8002aaa:	d029      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x94>
 8002aac:	2a08      	cmp	r2, #8
 8002aae:	4817      	ldr	r0, [pc, #92]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ab0:	bf18      	it	ne
 8002ab2:	2000      	movne	r0, #0
 8002ab4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ab6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ab8:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aba:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002abc:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ac0:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8002ac4:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ac6:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x6c>
 8002acc:	2903      	cmp	r1, #3
 8002ace:	d012      	beq.n	8002af6 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ad0:	68d9      	ldr	r1, [r3, #12]
 8002ad2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8002ad6:	e003      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ad8:	68d9      	ldr	r1, [r3, #12]
 8002ada:	480d      	ldr	r0, [pc, #52]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002adc:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ae0:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ae2:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ae6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002aea:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aec:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002aee:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8002af0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002af4:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002af6:	68d9      	ldr	r1, [r3, #12]
 8002af8:	4804      	ldr	r0, [pc, #16]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002afa:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8002afe:	e7ef      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8002b00:	4803      	ldr	r0, [pc, #12]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8002b02:	4770      	bx	lr
 8002b04:	40021000 	.word	0x40021000
 8002b08:	0800a28c 	.word	0x0800a28c
 8002b0c:	007a1200 	.word	0x007a1200
 8002b10:	00f42400 	.word	0x00f42400

08002b14 <HAL_RCC_OscConfig>:
{
 8002b14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002b18:	4605      	mov	r5, r0
 8002b1a:	b918      	cbnz	r0, 8002b24 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002b1c:	2001      	movs	r0, #1
}
 8002b1e:	b003      	add	sp, #12
 8002b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b24:	4ca5      	ldr	r4, [pc, #660]	; (8002dbc <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b26:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b28:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b2a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b2c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b2e:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b32:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b36:	d53c      	bpl.n	8002bb2 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b38:	b11e      	cbz	r6, 8002b42 <HAL_RCC_OscConfig+0x2e>
 8002b3a:	2e0c      	cmp	r6, #12
 8002b3c:	d163      	bne.n	8002c06 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b3e:	2f01      	cmp	r7, #1
 8002b40:	d161      	bne.n	8002c06 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	0798      	lsls	r0, r3, #30
 8002b46:	d502      	bpl.n	8002b4e <HAL_RCC_OscConfig+0x3a>
 8002b48:	69ab      	ldr	r3, [r5, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0e6      	beq.n	8002b1c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	6a28      	ldr	r0, [r5, #32]
 8002b52:	0719      	lsls	r1, r3, #28
 8002b54:	bf56      	itet	pl
 8002b56:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002b5a:	6823      	ldrmi	r3, [r4, #0]
 8002b5c:	091b      	lsrpl	r3, r3, #4
 8002b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b62:	4283      	cmp	r3, r0
 8002b64:	d23a      	bcs.n	8002bdc <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b66:	f7ff ff3f 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d1d6      	bne.n	8002b1c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	f043 0308 	orr.w	r3, r3, #8
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	6a2a      	ldr	r2, [r5, #32]
 8002b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b82:	6863      	ldr	r3, [r4, #4]
 8002b84:	69ea      	ldr	r2, [r5, #28]
 8002b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b8e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b90:	f7ff ff6c 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002b94:	68a3      	ldr	r3, [r4, #8]
 8002b96:	4a8a      	ldr	r2, [pc, #552]	; (8002dc0 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	40d8      	lsrs	r0, r3
 8002ba4:	4b87      	ldr	r3, [pc, #540]	; (8002dc4 <HAL_RCC_OscConfig+0x2b0>)
 8002ba6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fe fde7 	bl	800177c <HAL_InitTick>
        if(status != HAL_OK)
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d1b5      	bne.n	8002b1e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	682b      	ldr	r3, [r5, #0]
 8002bb4:	07d8      	lsls	r0, r3, #31
 8002bb6:	d45d      	bmi.n	8002c74 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb8:	682b      	ldr	r3, [r5, #0]
 8002bba:	0799      	lsls	r1, r3, #30
 8002bbc:	f100 809c 	bmi.w	8002cf8 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	0718      	lsls	r0, r3, #28
 8002bc4:	f100 80d0 	bmi.w	8002d68 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	0759      	lsls	r1, r3, #29
 8002bcc:	f100 80fc 	bmi.w	8002dc8 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bd0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f040 8165 	bne.w	8002ea2 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8002bd8:	2000      	movs	r0, #0
 8002bda:	e7a0      	b.n	8002b1e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	f043 0308 	orr.w	r3, r3, #8
 8002be2:	6023      	str	r3, [r4, #0]
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bea:	4303      	orrs	r3, r0
 8002bec:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bee:	6863      	ldr	r3, [r4, #4]
 8002bf0:	69ea      	ldr	r2, [r5, #28]
 8002bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002bfa:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bfc:	f7ff fef4 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d0c5      	beq.n	8002b90 <HAL_RCC_OscConfig+0x7c>
 8002c04:	e78a      	b.n	8002b1c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c06:	69ab      	ldr	r3, [r5, #24]
 8002c08:	b31b      	cbz	r3, 8002c52 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c12:	f7fe fde3 	bl	80017dc <HAL_GetTick>
 8002c16:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	079a      	lsls	r2, r3, #30
 8002c1c:	d511      	bpl.n	8002c42 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	6023      	str	r3, [r4, #0]
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	6a2a      	ldr	r2, [r5, #32]
 8002c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c32:	6863      	ldr	r3, [r4, #4]
 8002c34:	69ea      	ldr	r2, [r5, #28]
 8002c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c3e:	6063      	str	r3, [r4, #4]
 8002c40:	e7b7      	b.n	8002bb2 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c42:	f7fe fdcb 	bl	80017dc <HAL_GetTick>
 8002c46:	eba0 0008 	sub.w	r0, r0, r8
 8002c4a:	2802      	cmp	r0, #2
 8002c4c:	d9e4      	bls.n	8002c18 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8002c4e:	2003      	movs	r0, #3
 8002c50:	e765      	b.n	8002b1e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fdbf 	bl	80017dc <HAL_GetTick>
 8002c5e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	079b      	lsls	r3, r3, #30
 8002c64:	d5a5      	bpl.n	8002bb2 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c66:	f7fe fdb9 	bl	80017dc <HAL_GetTick>
 8002c6a:	eba0 0008 	sub.w	r0, r0, r8
 8002c6e:	2802      	cmp	r0, #2
 8002c70:	d9f6      	bls.n	8002c60 <HAL_RCC_OscConfig+0x14c>
 8002c72:	e7ec      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c74:	2e08      	cmp	r6, #8
 8002c76:	d003      	beq.n	8002c80 <HAL_RCC_OscConfig+0x16c>
 8002c78:	2e0c      	cmp	r6, #12
 8002c7a:	d108      	bne.n	8002c8e <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8002c7c:	2f03      	cmp	r7, #3
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	039a      	lsls	r2, r3, #14
 8002c84:	d598      	bpl.n	8002bb8 <HAL_RCC_OscConfig+0xa4>
 8002c86:	686b      	ldr	r3, [r5, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d195      	bne.n	8002bb8 <HAL_RCC_OscConfig+0xa4>
 8002c8c:	e746      	b.n	8002b1c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8e:	686b      	ldr	r3, [r5, #4]
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d110      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1a4>
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002c9e:	f7fe fd9d 	bl	80017dc <HAL_GetTick>
 8002ca2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	039b      	lsls	r3, r3, #14
 8002ca8:	d486      	bmi.n	8002bb8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002caa:	f7fe fd97 	bl	80017dc <HAL_GetTick>
 8002cae:	eba0 0008 	sub.w	r0, r0, r8
 8002cb2:	2864      	cmp	r0, #100	; 0x64
 8002cb4:	d9f6      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x190>
 8002cb6:	e7ca      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cbc:	d104      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x1b4>
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6023      	str	r3, [r4, #0]
 8002cc6:	e7e6      	b.n	8002c96 <HAL_RCC_OscConfig+0x182>
 8002cc8:	6822      	ldr	r2, [r4, #0]
 8002cca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cce:	6022      	str	r2, [r4, #0]
 8002cd0:	6822      	ldr	r2, [r4, #0]
 8002cd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cd6:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fd7e 	bl	80017dc <HAL_GetTick>
 8002ce0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	0398      	lsls	r0, r3, #14
 8002ce6:	f57f af67 	bpl.w	8002bb8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cea:	f7fe fd77 	bl	80017dc <HAL_GetTick>
 8002cee:	eba0 0008 	sub.w	r0, r0, r8
 8002cf2:	2864      	cmp	r0, #100	; 0x64
 8002cf4:	d9f5      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x1ce>
 8002cf6:	e7aa      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cf8:	2e04      	cmp	r6, #4
 8002cfa:	d003      	beq.n	8002d04 <HAL_RCC_OscConfig+0x1f0>
 8002cfc:	2e0c      	cmp	r6, #12
 8002cfe:	d110      	bne.n	8002d22 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8002d00:	2f02      	cmp	r7, #2
 8002d02:	d10e      	bne.n	8002d22 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d04:	6823      	ldr	r3, [r4, #0]
 8002d06:	0559      	lsls	r1, r3, #21
 8002d08:	d503      	bpl.n	8002d12 <HAL_RCC_OscConfig+0x1fe>
 8002d0a:	68eb      	ldr	r3, [r5, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f43f af05 	beq.w	8002b1c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	6863      	ldr	r3, [r4, #4]
 8002d14:	692a      	ldr	r2, [r5, #16]
 8002d16:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002d1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d1e:	6063      	str	r3, [r4, #4]
 8002d20:	e74e      	b.n	8002bc0 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d22:	68eb      	ldr	r3, [r5, #12]
 8002d24:	b17b      	cbz	r3, 8002d46 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8002d26:	6823      	ldr	r3, [r4, #0]
 8002d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d2e:	f7fe fd55 	bl	80017dc <HAL_GetTick>
 8002d32:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	055a      	lsls	r2, r3, #21
 8002d38:	d4eb      	bmi.n	8002d12 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fd4f 	bl	80017dc <HAL_GetTick>
 8002d3e:	1bc0      	subs	r0, r0, r7
 8002d40:	2802      	cmp	r0, #2
 8002d42:	d9f7      	bls.n	8002d34 <HAL_RCC_OscConfig+0x220>
 8002d44:	e783      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d4c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fd45 	bl	80017dc <HAL_GetTick>
 8002d52:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	055b      	lsls	r3, r3, #21
 8002d58:	f57f af32 	bpl.w	8002bc0 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fd3e 	bl	80017dc <HAL_GetTick>
 8002d60:	1bc0      	subs	r0, r0, r7
 8002d62:	2802      	cmp	r0, #2
 8002d64:	d9f6      	bls.n	8002d54 <HAL_RCC_OscConfig+0x240>
 8002d66:	e772      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d68:	696b      	ldr	r3, [r5, #20]
 8002d6a:	b19b      	cbz	r3, 8002d94 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8002d6c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d78:	f7fe fd30 	bl	80017dc <HAL_GetTick>
 8002d7c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d7e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d82:	079a      	lsls	r2, r3, #30
 8002d84:	f53f af20 	bmi.w	8002bc8 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d88:	f7fe fd28 	bl	80017dc <HAL_GetTick>
 8002d8c:	1bc0      	subs	r0, r0, r7
 8002d8e:	2802      	cmp	r0, #2
 8002d90:	d9f5      	bls.n	8002d7e <HAL_RCC_OscConfig+0x26a>
 8002d92:	e75c      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8002d94:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002da0:	f7fe fd1c 	bl	80017dc <HAL_GetTick>
 8002da4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002da6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002daa:	079b      	lsls	r3, r3, #30
 8002dac:	f57f af0c 	bpl.w	8002bc8 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fe fd14 	bl	80017dc <HAL_GetTick>
 8002db4:	1bc0      	subs	r0, r0, r7
 8002db6:	2802      	cmp	r0, #2
 8002db8:	d9f5      	bls.n	8002da6 <HAL_RCC_OscConfig+0x292>
 8002dba:	e748      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	0800a273 	.word	0x0800a273
 8002dc4:	2000024c 	.word	0x2000024c
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dca:	00d8      	lsls	r0, r3, #3
 8002dcc:	d429      	bmi.n	8002e22 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	65a3      	str	r3, [r4, #88]	; 0x58
 8002dd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	9301      	str	r3, [sp, #4]
 8002dde:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002de0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002de4:	4f5d      	ldr	r7, [pc, #372]	; (8002f5c <HAL_RCC_OscConfig+0x448>)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	05d9      	lsls	r1, r3, #23
 8002dea:	d51d      	bpl.n	8002e28 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dec:	68ab      	ldr	r3, [r5, #8]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d12b      	bne.n	8002e4a <HAL_RCC_OscConfig+0x336>
 8002df2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fced 	bl	80017dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e06:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e08:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e0c:	079b      	lsls	r3, r3, #30
 8002e0e:	d542      	bpl.n	8002e96 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8002e10:	f1b8 0f00 	cmp.w	r8, #0
 8002e14:	f43f aedc 	beq.w	8002bd0 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e20:	e6d6      	b.n	8002bd0 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8002e22:	f04f 0800 	mov.w	r8, #0
 8002e26:	e7dd      	b.n	8002de4 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002e30:	f7fe fcd4 	bl	80017dc <HAL_GetTick>
 8002e34:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	05da      	lsls	r2, r3, #23
 8002e3a:	d4d7      	bmi.n	8002dec <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3c:	f7fe fcce 	bl	80017dc <HAL_GetTick>
 8002e40:	eba0 0009 	sub.w	r0, r0, r9
 8002e44:	2802      	cmp	r0, #2
 8002e46:	d9f6      	bls.n	8002e36 <HAL_RCC_OscConfig+0x322>
 8002e48:	e701      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d106      	bne.n	8002e5c <HAL_RCC_OscConfig+0x348>
 8002e4e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002e5a:	e7ca      	b.n	8002df2 <HAL_RCC_OscConfig+0x2de>
 8002e5c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002e68:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002e6c:	f022 0204 	bic.w	r2, r2, #4
 8002e70:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1c2      	bne.n	8002dfe <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8002e78:	f7fe fcb0 	bl	80017dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e80:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002e86:	0798      	lsls	r0, r3, #30
 8002e88:	d5c2      	bpl.n	8002e10 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe fca7 	bl	80017dc <HAL_GetTick>
 8002e8e:	1bc0      	subs	r0, r0, r7
 8002e90:	4548      	cmp	r0, r9
 8002e92:	d9f6      	bls.n	8002e82 <HAL_RCC_OscConfig+0x36e>
 8002e94:	e6db      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe fca1 	bl	80017dc <HAL_GetTick>
 8002e9a:	1bc0      	subs	r0, r0, r7
 8002e9c:	4548      	cmp	r0, r9
 8002e9e:	d9b3      	bls.n	8002e08 <HAL_RCC_OscConfig+0x2f4>
 8002ea0:	e6d5      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea2:	2e0c      	cmp	r6, #12
 8002ea4:	f43f ae3a 	beq.w	8002b1c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ea8:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eb2:	d137      	bne.n	8002f24 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fc92 	bl	80017dc <HAL_GetTick>
 8002eb8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	0199      	lsls	r1, r3, #6
 8002ebe:	d42b      	bmi.n	8002f18 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002ec2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ec4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ec8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002ed0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002ed2:	0912      	lsrs	r2, r2, #4
 8002ed4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002ed8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002eda:	0852      	lsrs	r2, r2, #1
 8002edc:	3a01      	subs	r2, #1
 8002ede:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002ee2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002ee4:	0852      	lsrs	r2, r2, #1
 8002ee6:	3a01      	subs	r2, #1
 8002ee8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002eec:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef6:	68e3      	ldr	r3, [r4, #12]
 8002ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002efc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002efe:	f7fe fc6d 	bl	80017dc <HAL_GetTick>
 8002f02:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	019a      	lsls	r2, r3, #6
 8002f08:	f53f ae66 	bmi.w	8002bd8 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe fc66 	bl	80017dc <HAL_GetTick>
 8002f10:	1b40      	subs	r0, r0, r5
 8002f12:	2802      	cmp	r0, #2
 8002f14:	d9f6      	bls.n	8002f04 <HAL_RCC_OscConfig+0x3f0>
 8002f16:	e69a      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe fc60 	bl	80017dc <HAL_GetTick>
 8002f1c:	1b80      	subs	r0, r0, r6
 8002f1e:	2802      	cmp	r0, #2
 8002f20:	d9cb      	bls.n	8002eba <HAL_RCC_OscConfig+0x3a6>
 8002f22:	e694      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f2a:	bf02      	ittt	eq
 8002f2c:	68e3      	ldreq	r3, [r4, #12]
 8002f2e:	f023 0303 	biceq.w	r3, r3, #3
 8002f32:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f34:	68e3      	ldr	r3, [r4, #12]
 8002f36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002f40:	f7fe fc4c 	bl	80017dc <HAL_GetTick>
 8002f44:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	f57f ae45 	bpl.w	8002bd8 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4e:	f7fe fc45 	bl	80017dc <HAL_GetTick>
 8002f52:	1b40      	subs	r0, r0, r5
 8002f54:	2802      	cmp	r0, #2
 8002f56:	d9f6      	bls.n	8002f46 <HAL_RCC_OscConfig+0x432>
 8002f58:	e679      	b.n	8002c4e <HAL_RCC_OscConfig+0x13a>
 8002f5a:	bf00      	nop
 8002f5c:	40007000 	.word	0x40007000

08002f60 <HAL_RCC_ClockConfig>:
{
 8002f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f64:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002f66:	4604      	mov	r4, r0
 8002f68:	b910      	cbnz	r0, 8002f70 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4a40      	ldr	r2, [pc, #256]	; (8003074 <HAL_RCC_ClockConfig+0x114>)
 8002f72:	6813      	ldr	r3, [r2, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	428b      	cmp	r3, r1
 8002f7a:	d329      	bcc.n	8002fd0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	07d9      	lsls	r1, r3, #31
 8002f80:	d431      	bmi.n	8002fe6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f82:	6821      	ldr	r1, [r4, #0]
 8002f84:	078a      	lsls	r2, r1, #30
 8002f86:	d45b      	bmi.n	8003040 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f88:	4a3a      	ldr	r2, [pc, #232]	; (8003074 <HAL_RCC_ClockConfig+0x114>)
 8002f8a:	6813      	ldr	r3, [r2, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	429e      	cmp	r6, r3
 8002f92:	d35d      	bcc.n	8003050 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	f011 0f04 	tst.w	r1, #4
 8002f98:	4d37      	ldr	r5, [pc, #220]	; (8003078 <HAL_RCC_ClockConfig+0x118>)
 8002f9a:	d164      	bne.n	8003066 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9c:	070b      	lsls	r3, r1, #28
 8002f9e:	d506      	bpl.n	8002fae <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa0:	68ab      	ldr	r3, [r5, #8]
 8002fa2:	6922      	ldr	r2, [r4, #16]
 8002fa4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002fa8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002fac:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fae:	f7ff fd5d 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002fb2:	68ab      	ldr	r3, [r5, #8]
 8002fb4:	4a31      	ldr	r2, [pc, #196]	; (800307c <HAL_RCC_ClockConfig+0x11c>)
 8002fb6:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	40d8      	lsrs	r0, r3
 8002fc6:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_RCC_ClockConfig+0x120>)
 8002fc8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f7fe bbd6 	b.w	800177c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd0:	6813      	ldr	r3, [r2, #0]
 8002fd2:	f023 0307 	bic.w	r3, r3, #7
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fda:	6813      	ldr	r3, [r2, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4299      	cmp	r1, r3
 8002fe2:	d1c2      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xa>
 8002fe4:	e7ca      	b.n	8002f7c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe6:	6862      	ldr	r2, [r4, #4]
 8002fe8:	4d23      	ldr	r5, [pc, #140]	; (8003078 <HAL_RCC_ClockConfig+0x118>)
 8002fea:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fec:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fee:	d11b      	bne.n	8003028 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff4:	d0b9      	beq.n	8002f6a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	68ab      	ldr	r3, [r5, #8]
 8002ff8:	f023 0303 	bic.w	r3, r3, #3
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8003000:	f7fe fbec 	bl	80017dc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003008:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	68ab      	ldr	r3, [r5, #8]
 800300c:	6862      	ldr	r2, [r4, #4]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003016:	d0b4      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003018:	f7fe fbe0 	bl	80017dc <HAL_GetTick>
 800301c:	1bc0      	subs	r0, r0, r7
 800301e:	4540      	cmp	r0, r8
 8003020:	d9f3      	bls.n	800300a <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8003022:	2003      	movs	r0, #3
}
 8003024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003028:	2a02      	cmp	r2, #2
 800302a:	d102      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800302c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003030:	e7e0      	b.n	8002ff4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003032:	b912      	cbnz	r2, 800303a <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003034:	f013 0f02 	tst.w	r3, #2
 8003038:	e7dc      	b.n	8002ff4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800303e:	e7d9      	b.n	8002ff4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <HAL_RCC_ClockConfig+0x118>)
 8003042:	68a0      	ldr	r0, [r4, #8]
 8003044:	6893      	ldr	r3, [r2, #8]
 8003046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800304a:	4303      	orrs	r3, r0
 800304c:	6093      	str	r3, [r2, #8]
 800304e:	e79b      	b.n	8002f88 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003050:	6813      	ldr	r3, [r2, #0]
 8003052:	f023 0307 	bic.w	r3, r3, #7
 8003056:	4333      	orrs	r3, r6
 8003058:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	6813      	ldr	r3, [r2, #0]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	429e      	cmp	r6, r3
 8003062:	d182      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xa>
 8003064:	e796      	b.n	8002f94 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003066:	68ab      	ldr	r3, [r5, #8]
 8003068:	68e2      	ldr	r2, [r4, #12]
 800306a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800306e:	4313      	orrs	r3, r2
 8003070:	60ab      	str	r3, [r5, #8]
 8003072:	e793      	b.n	8002f9c <HAL_RCC_ClockConfig+0x3c>
 8003074:	40022000 	.word	0x40022000
 8003078:	40021000 	.word	0x40021000
 800307c:	0800a273 	.word	0x0800a273
 8003080:	2000024c 	.word	0x2000024c

08003084 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003086:	4a06      	ldr	r2, [pc, #24]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800308e:	5cd3      	ldrb	r3, [r2, r3]
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003092:	6810      	ldr	r0, [r2, #0]
 8003094:	f003 031f 	and.w	r3, r3, #31
}
 8003098:	40d8      	lsrs	r0, r3
 800309a:	4770      	bx	lr
 800309c:	40021000 	.word	0x40021000
 80030a0:	0800a283 	.word	0x0800a283
 80030a4:	2000024c 	.word	0x2000024c

080030a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80030aa:	4a06      	ldr	r2, [pc, #24]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b6:	6810      	ldr	r0, [r2, #0]
 80030b8:	f003 031f 	and.w	r3, r3, #31
}
 80030bc:	40d8      	lsrs	r0, r3
 80030be:	4770      	bx	lr
 80030c0:	40021000 	.word	0x40021000
 80030c4:	0800a283 	.word	0x0800a283
 80030c8:	2000024c 	.word	0x2000024c

080030cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030ce:	4b45      	ldr	r3, [pc, #276]	; (80031e4 <RCCEx_PLLSAI1_Config+0x118>)
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	f012 0f03 	tst.w	r2, #3
{
 80030d6:	4605      	mov	r5, r0
 80030d8:	460e      	mov	r6, r1
 80030da:	461c      	mov	r4, r3
 80030dc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030de:	d02a      	beq.n	8003136 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	f002 0203 	and.w	r2, r2, #3
 80030e6:	4282      	cmp	r2, r0
 80030e8:	d13c      	bne.n	8003164 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80030ea:	2a00      	cmp	r2, #0
 80030ec:	d03a      	beq.n	8003164 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ee:	68db      	ldr	r3, [r3, #12]
       ||
 80030f0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80030f6:	3301      	adds	r3, #1
       ||
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d133      	bne.n	8003164 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003102:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003104:	f7fe fb6a 	bl	80017dc <HAL_GetTick>
 8003108:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	011a      	lsls	r2, r3, #4
 800310e:	d432      	bmi.n	8003176 <RCCEx_PLLSAI1_Config+0xaa>
 8003110:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003112:	2e00      	cmp	r6, #0
 8003114:	d036      	beq.n	8003184 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003116:	2e01      	cmp	r6, #1
 8003118:	d150      	bne.n	80031bc <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800311a:	6922      	ldr	r2, [r4, #16]
 800311c:	6928      	ldr	r0, [r5, #16]
 800311e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003122:	0840      	lsrs	r0, r0, #1
 8003124:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003128:	3801      	subs	r0, #1
 800312a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800312e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8003132:	6122      	str	r2, [r4, #16]
 8003134:	e032      	b.n	800319c <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8003136:	2802      	cmp	r0, #2
 8003138:	d010      	beq.n	800315c <RCCEx_PLLSAI1_Config+0x90>
 800313a:	2803      	cmp	r0, #3
 800313c:	d014      	beq.n	8003168 <RCCEx_PLLSAI1_Config+0x9c>
 800313e:	2801      	cmp	r0, #1
 8003140:	d110      	bne.n	8003164 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	079f      	lsls	r7, r3, #30
 8003146:	d538      	bpl.n	80031ba <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003148:	68e3      	ldr	r3, [r4, #12]
 800314a:	686a      	ldr	r2, [r5, #4]
 800314c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003150:	3a01      	subs	r2, #1
 8003152:	4318      	orrs	r0, r3
 8003154:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003158:	60e0      	str	r0, [r4, #12]
 800315a:	e7cf      	b.n	80030fc <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003162:	d1f1      	bne.n	8003148 <RCCEx_PLLSAI1_Config+0x7c>
 8003164:	2001      	movs	r0, #1
 8003166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	0391      	lsls	r1, r2, #14
 800316c:	d4ec      	bmi.n	8003148 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003174:	e7f5      	b.n	8003162 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003176:	f7fe fb31 	bl	80017dc <HAL_GetTick>
 800317a:	1bc0      	subs	r0, r0, r7
 800317c:	2802      	cmp	r0, #2
 800317e:	d9c4      	bls.n	800310a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8003180:	2003      	movs	r0, #3
 8003182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003184:	6921      	ldr	r1, [r4, #16]
 8003186:	68eb      	ldr	r3, [r5, #12]
 8003188:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800318c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003190:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800319a:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031a2:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe fb1a 	bl	80017dc <HAL_GetTick>
 80031a8:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	d513      	bpl.n	80031d8 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80031b0:	6923      	ldr	r3, [r4, #16]
 80031b2:	69aa      	ldr	r2, [r5, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	6123      	str	r3, [r4, #16]
 80031b8:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80031ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031bc:	6923      	ldr	r3, [r4, #16]
 80031be:	6968      	ldr	r0, [r5, #20]
 80031c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031c4:	0840      	lsrs	r0, r0, #1
 80031c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031ca:	3801      	subs	r0, #1
 80031cc:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80031d0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80031d4:	6123      	str	r3, [r4, #16]
 80031d6:	e7e1      	b.n	800319c <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d8:	f7fe fb00 	bl	80017dc <HAL_GetTick>
 80031dc:	1b80      	subs	r0, r0, r6
 80031de:	2802      	cmp	r0, #2
 80031e0:	d9e3      	bls.n	80031aa <RCCEx_PLLSAI1_Config+0xde>
 80031e2:	e7cd      	b.n	8003180 <RCCEx_PLLSAI1_Config+0xb4>
 80031e4:	40021000 	.word	0x40021000

080031e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ea:	4b3d      	ldr	r3, [pc, #244]	; (80032e0 <RCCEx_PLLSAI2_Config+0xf8>)
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	f012 0f03 	tst.w	r2, #3
{
 80031f2:	4605      	mov	r5, r0
 80031f4:	460e      	mov	r6, r1
 80031f6:	461c      	mov	r4, r3
 80031f8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031fa:	d028      	beq.n	800324e <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	f002 0203 	and.w	r2, r2, #3
 8003202:	4282      	cmp	r2, r0
 8003204:	d13a      	bne.n	800327c <RCCEx_PLLSAI2_Config+0x94>
       ||
 8003206:	2a00      	cmp	r2, #0
 8003208:	d038      	beq.n	800327c <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800320a:	68db      	ldr	r3, [r3, #12]
       ||
 800320c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800320e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003212:	3301      	adds	r3, #1
       ||
 8003214:	4293      	cmp	r3, r2
 8003216:	d131      	bne.n	800327c <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800321e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003220:	f7fe fadc 	bl	80017dc <HAL_GetTick>
 8003224:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	009a      	lsls	r2, r3, #2
 800322a:	d430      	bmi.n	800328e <RCCEx_PLLSAI2_Config+0xa6>
 800322c:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800322e:	2e00      	cmp	r6, #0
 8003230:	d034      	beq.n	800329c <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003232:	6963      	ldr	r3, [r4, #20]
 8003234:	6929      	ldr	r1, [r5, #16]
 8003236:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800323a:	0849      	lsrs	r1, r1, #1
 800323c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003240:	3901      	subs	r1, #1
 8003242:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003246:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800324a:	6163      	str	r3, [r4, #20]
 800324c:	e032      	b.n	80032b4 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800324e:	2802      	cmp	r0, #2
 8003250:	d010      	beq.n	8003274 <RCCEx_PLLSAI2_Config+0x8c>
 8003252:	2803      	cmp	r0, #3
 8003254:	d014      	beq.n	8003280 <RCCEx_PLLSAI2_Config+0x98>
 8003256:	2801      	cmp	r0, #1
 8003258:	d110      	bne.n	800327c <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	079f      	lsls	r7, r3, #30
 800325e:	d538      	bpl.n	80032d2 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003260:	68e3      	ldr	r3, [r4, #12]
 8003262:	686a      	ldr	r2, [r5, #4]
 8003264:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003268:	3a01      	subs	r2, #1
 800326a:	4318      	orrs	r0, r3
 800326c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003270:	60e0      	str	r0, [r4, #12]
 8003272:	e7d1      	b.n	8003218 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800327a:	d1f1      	bne.n	8003260 <RCCEx_PLLSAI2_Config+0x78>
 800327c:	2001      	movs	r0, #1
 800327e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	0391      	lsls	r1, r2, #14
 8003284:	d4ec      	bmi.n	8003260 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800328c:	e7f5      	b.n	800327a <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800328e:	f7fe faa5 	bl	80017dc <HAL_GetTick>
 8003292:	1bc0      	subs	r0, r0, r7
 8003294:	2802      	cmp	r0, #2
 8003296:	d9c6      	bls.n	8003226 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8003298:	2003      	movs	r0, #3
 800329a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800329c:	6962      	ldr	r2, [r4, #20]
 800329e:	68eb      	ldr	r3, [r5, #12]
 80032a0:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80032a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032a8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80032b2:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ba:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fe fa8e 	bl	80017dc <HAL_GetTick>
 80032c0:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	d505      	bpl.n	80032d4 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032c8:	6963      	ldr	r3, [r4, #20]
 80032ca:	696a      	ldr	r2, [r5, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	6163      	str	r3, [r4, #20]
 80032d0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80032d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032d4:	f7fe fa82 	bl	80017dc <HAL_GetTick>
 80032d8:	1b80      	subs	r0, r0, r6
 80032da:	2802      	cmp	r0, #2
 80032dc:	d9f1      	bls.n	80032c2 <RCCEx_PLLSAI2_Config+0xda>
 80032de:	e7db      	b.n	8003298 <RCCEx_PLLSAI2_Config+0xb0>
 80032e0:	40021000 	.word	0x40021000

080032e4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80032e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032e8:	6806      	ldr	r6, [r0, #0]
 80032ea:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80032ee:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032f0:	d024      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80032f2:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80032f4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80032f8:	d02c      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80032fa:	d802      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80032fc:	b1c1      	cbz	r1, 8003330 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80032fe:	2601      	movs	r6, #1
 8003300:	e01c      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003302:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003306:	d00d      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003308:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800330c:	d1f7      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800330e:	4a4d      	ldr	r2, [pc, #308]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003310:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003312:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003316:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800331a:	430b      	orrs	r3, r1
 800331c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003320:	2600      	movs	r6, #0
 8003322:	e00b      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003324:	4a47      	ldr	r2, [pc, #284]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	68d3      	ldr	r3, [r2, #12]
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	60d3      	str	r3, [r2, #12]
      break;
 800332e:	e7ee      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003330:	3004      	adds	r0, #4
 8003332:	f7ff fecb 	bl	80030cc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003336:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003338:	2800      	cmp	r0, #0
 800333a:	d0e8      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	04d8      	lsls	r0, r3, #19
 8003340:	d506      	bpl.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003342:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003344:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8003348:	d074      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800334a:	d808      	bhi.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800334c:	b1a9      	cbz	r1, 800337a <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800334e:	2601      	movs	r6, #1
 8003350:	4635      	mov	r5, r6
 8003352:	e021      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003354:	2100      	movs	r1, #0
 8003356:	3020      	adds	r0, #32
 8003358:	f7ff ff46 	bl	80031e8 <RCCEx_PLLSAI2_Config>
 800335c:	e7eb      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800335e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8003362:	d004      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003364:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003368:	d1f1      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800336a:	4635      	mov	r5, r6
 800336c:	e009      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800336e:	4a35      	ldr	r2, [pc, #212]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003370:	68d3      	ldr	r3, [r2, #12]
 8003372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003376:	60d3      	str	r3, [r2, #12]
 8003378:	e7f7      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800337a:	1d20      	adds	r0, r4, #4
 800337c:	f7ff fea6 	bl	80030cc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003380:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003382:	2d00      	cmp	r5, #0
 8003384:	d15c      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003386:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003388:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800338a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800338e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003392:	430b      	orrs	r3, r1
 8003394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	0399      	lsls	r1, r3, #14
 800339c:	f140 814f 	bpl.w	800363e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033a0:	4f28      	ldr	r7, [pc, #160]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a4:	00da      	lsls	r2, r3, #3
 80033a6:	f140 8176 	bpl.w	8003696 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ae:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8003448 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80033b2:	f8d9 3000 	ldr.w	r3, [r9]
 80033b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ba:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80033be:	f7fe fa0d 	bl	80017dc <HAL_GetTick>
 80033c2:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033c4:	f8d9 3000 	ldr.w	r3, [r9]
 80033c8:	05db      	lsls	r3, r3, #23
 80033ca:	d53f      	bpl.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	d144      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033d4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80033d8:	d015      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80033da:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80033de:	4293      	cmp	r3, r2
 80033e0:	d011      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80033e6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80033ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80033ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003406:	07d8      	lsls	r0, r3, #31
 8003408:	d509      	bpl.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 800340a:	f7fe f9e7 	bl	80017dc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003412:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003418:	0799      	lsls	r1, r3, #30
 800341a:	f140 8109 	bpl.w	8003630 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003422:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003430:	4635      	mov	r5, r6
 8003432:	e012      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003434:	2100      	movs	r1, #0
 8003436:	f104 0020 	add.w	r0, r4, #32
 800343a:	f7ff fed5 	bl	80031e8 <RCCEx_PLLSAI2_Config>
 800343e:	e79f      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003440:	462e      	mov	r6, r5
 8003442:	e7a9      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344c:	f7fe f9c6 	bl	80017dc <HAL_GetTick>
 8003450:	eba0 000a 	sub.w	r0, r0, sl
 8003454:	2802      	cmp	r0, #2
 8003456:	d9b5      	bls.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8003458:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800345a:	f1b8 0f00 	cmp.w	r8, #0
 800345e:	d003      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003466:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	07da      	lsls	r2, r3, #31
 800346c:	d508      	bpl.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800346e:	4990      	ldr	r1, [pc, #576]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003470:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003472:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003476:	f022 0203 	bic.w	r2, r2, #3
 800347a:	4302      	orrs	r2, r0
 800347c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003480:	079f      	lsls	r7, r3, #30
 8003482:	d508      	bpl.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003484:	498a      	ldr	r1, [pc, #552]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003486:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003488:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800348c:	f022 020c 	bic.w	r2, r2, #12
 8003490:	4302      	orrs	r2, r0
 8003492:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003496:	075e      	lsls	r6, r3, #29
 8003498:	d508      	bpl.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800349a:	4985      	ldr	r1, [pc, #532]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800349c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800349e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034a2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80034a6:	4302      	orrs	r2, r0
 80034a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034ac:	0718      	lsls	r0, r3, #28
 80034ae:	d508      	bpl.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034b0:	497f      	ldr	r1, [pc, #508]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80034b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80034b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80034bc:	4302      	orrs	r2, r0
 80034be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034c2:	06d9      	lsls	r1, r3, #27
 80034c4:	d508      	bpl.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034c6:	497a      	ldr	r1, [pc, #488]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80034c8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80034ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034d2:	4302      	orrs	r2, r0
 80034d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034d8:	069a      	lsls	r2, r3, #26
 80034da:	d508      	bpl.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034dc:	4974      	ldr	r1, [pc, #464]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80034de:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80034e0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034e8:	4302      	orrs	r2, r0
 80034ea:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ee:	059f      	lsls	r7, r3, #22
 80034f0:	d508      	bpl.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034f2:	496f      	ldr	r1, [pc, #444]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80034f4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80034f6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034fa:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80034fe:	4302      	orrs	r2, r0
 8003500:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003504:	055e      	lsls	r6, r3, #21
 8003506:	d508      	bpl.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003508:	4969      	ldr	r1, [pc, #420]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800350a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800350c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003510:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003514:	4302      	orrs	r2, r0
 8003516:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800351a:	0658      	lsls	r0, r3, #25
 800351c:	d508      	bpl.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800351e:	4964      	ldr	r1, [pc, #400]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003520:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003522:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003526:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800352a:	4302      	orrs	r2, r0
 800352c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003530:	0619      	lsls	r1, r3, #24
 8003532:	d508      	bpl.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003534:	495e      	ldr	r1, [pc, #376]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003536:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003538:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800353c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003540:	4302      	orrs	r2, r0
 8003542:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003546:	05da      	lsls	r2, r3, #23
 8003548:	d508      	bpl.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800354a:	4959      	ldr	r1, [pc, #356]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800354c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800354e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003552:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003556:	4302      	orrs	r2, r0
 8003558:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800355c:	049b      	lsls	r3, r3, #18
 800355e:	d50f      	bpl.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003560:	4a53      	ldr	r2, [pc, #332]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003562:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003564:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003568:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800356c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800356e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003572:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003576:	d164      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	68d3      	ldr	r3, [r2, #12]
 800357a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357e:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	031f      	lsls	r7, r3, #12
 8003584:	d50f      	bpl.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003586:	4a4a      	ldr	r2, [pc, #296]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003588:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800358a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800358e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003592:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003594:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800359c:	d15c      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359e:	68d3      	ldr	r3, [r2, #12]
 80035a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	035e      	lsls	r6, r3, #13
 80035aa:	d50f      	bpl.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035ac:	4a40      	ldr	r2, [pc, #256]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80035ae:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80035b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035b4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80035b8:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035ba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035c2:	d154      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035c4:	68d3      	ldr	r3, [r2, #12]
 80035c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ca:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	0458      	lsls	r0, r3, #17
 80035d0:	d512      	bpl.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035d2:	4937      	ldr	r1, [pc, #220]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80035d4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80035d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80035da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80035de:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035e0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035e8:	d14c      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035ea:	2102      	movs	r1, #2
 80035ec:	1d20      	adds	r0, r4, #4
 80035ee:	f7ff fd6d 	bl	80030cc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80035f2:	2800      	cmp	r0, #0
 80035f4:	bf18      	it	ne
 80035f6:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035f8:	6822      	ldr	r2, [r4, #0]
 80035fa:	0411      	lsls	r1, r2, #16
 80035fc:	d508      	bpl.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035fe:	492c      	ldr	r1, [pc, #176]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003600:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003602:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800360a:	4303      	orrs	r3, r0
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003610:	03d3      	lsls	r3, r2, #15
 8003612:	d509      	bpl.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003616:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800361a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800361e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003622:	430b      	orrs	r3, r1
 8003624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003628:	4628      	mov	r0, r5
 800362a:	b002      	add	sp, #8
 800362c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe f8d4 	bl	80017dc <HAL_GetTick>
 8003634:	1b40      	subs	r0, r0, r5
 8003636:	4548      	cmp	r0, r9
 8003638:	f67f aeec 	bls.w	8003414 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800363c:	e70c      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800363e:	4635      	mov	r5, r6
 8003640:	e712      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003642:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003646:	d19b      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003648:	2101      	movs	r1, #1
 800364a:	1d20      	adds	r0, r4, #4
 800364c:	f7ff fd3e 	bl	80030cc <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003650:	2800      	cmp	r0, #0
 8003652:	bf18      	it	ne
 8003654:	4605      	movne	r5, r0
 8003656:	e793      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003658:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800365c:	d1a3      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800365e:	2101      	movs	r1, #1
 8003660:	1d20      	adds	r0, r4, #4
 8003662:	f7ff fd33 	bl	80030cc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003666:	2800      	cmp	r0, #0
 8003668:	bf18      	it	ne
 800366a:	4605      	movne	r5, r0
 800366c:	e79b      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800366e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003672:	d1ab      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003674:	2101      	movs	r1, #1
 8003676:	1d20      	adds	r0, r4, #4
 8003678:	f7ff fd28 	bl	80030cc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800367c:	2800      	cmp	r0, #0
 800367e:	bf18      	it	ne
 8003680:	4605      	movne	r5, r0
 8003682:	e7a3      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003684:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003688:	d1b6      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800368a:	2102      	movs	r1, #2
 800368c:	f104 0020 	add.w	r0, r4, #32
 8003690:	f7ff fdaa 	bl	80031e8 <RCCEx_PLLSAI2_Config>
 8003694:	e7ad      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	65bb      	str	r3, [r7, #88]	; 0x58
 800369e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80036a8:	f04f 0801 	mov.w	r8, #1
 80036ac:	e67f      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xca>
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000

080036b4 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036b4:	4a02      	ldr	r2, [pc, #8]	; (80036c0 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80036b6:	6813      	ldr	r3, [r2, #0]
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4770      	bx	lr
 80036c0:	40021000 	.word	0x40021000

080036c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036c6:	4604      	mov	r4, r0
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d04a      	beq.n	8003762 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036d0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80036d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036d8:	b91b      	cbnz	r3, 80036e2 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036da:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036de:	f001 fa45 	bl	8004b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036e2:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036e4:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80036e6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80036ea:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036ec:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80036ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036f2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80036f6:	600b      	str	r3, [r1, #0]
 80036f8:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036fc:	d92e      	bls.n	800375c <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036fe:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003700:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003704:	bf18      	it	ne
 8003706:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003708:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800370a:	b92b      	cbnz	r3, 8003718 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800370c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003710:	bf8c      	ite	hi
 8003712:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003714:	2301      	movls	r3, #1
 8003716:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003718:	68a6      	ldr	r6, [r4, #8]
 800371a:	6863      	ldr	r3, [r4, #4]
 800371c:	69a5      	ldr	r5, [r4, #24]
 800371e:	4333      	orrs	r3, r6
 8003720:	6926      	ldr	r6, [r4, #16]
 8003722:	4333      	orrs	r3, r6
 8003724:	6966      	ldr	r6, [r4, #20]
 8003726:	4333      	orrs	r3, r6
 8003728:	69e6      	ldr	r6, [r4, #28]
 800372a:	4333      	orrs	r3, r6
 800372c:	6a26      	ldr	r6, [r4, #32]
 800372e:	4333      	orrs	r3, r6
 8003730:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003732:	4333      	orrs	r3, r6
 8003734:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8003738:	4333      	orrs	r3, r6
 800373a:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800373c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800373e:	431a      	orrs	r2, r3
 8003740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003742:	0c2d      	lsrs	r5, r5, #16
 8003744:	431a      	orrs	r2, r3
 8003746:	f005 0504 	and.w	r5, r5, #4
 800374a:	432a      	orrs	r2, r5
 800374c:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800374e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003750:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003752:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003754:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003756:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 800375a:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800375c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003760:	e7d0      	b.n	8003704 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8003762:	2001      	movs	r0, #1
}
 8003764:	bd70      	pop	{r4, r5, r6, pc}
	...

08003768 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003768:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 800376a:	480a      	ldr	r0, [pc, #40]	; (8003794 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8003774:	6899      	ldr	r1, [r3, #8]
 8003776:	4001      	ands	r1, r0
 8003778:	2906      	cmp	r1, #6
 800377a:	d008      	beq.n	800378e <HAL_TIM_Base_Start_IT+0x26>
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	4002      	ands	r2, r0
 8003780:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8003784:	bf1e      	ittt	ne
 8003786:	681a      	ldrne	r2, [r3, #0]
 8003788:	f042 0201 	orrne.w	r2, r2, #1
 800378c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800378e:	2000      	movs	r0, #0
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	00010007 	.word	0x00010007

08003798 <HAL_TIM_PeriodElapsedCallback>:
 8003798:	4770      	bx	lr

0800379a <HAL_TIM_OC_DelayElapsedCallback>:
 800379a:	4770      	bx	lr

0800379c <HAL_TIM_IC_CaptureCallback>:
 800379c:	4770      	bx	lr

0800379e <HAL_TIM_PWM_PulseFinishedCallback>:
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_TriggerCallback>:
 80037a0:	4770      	bx	lr

080037a2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037a2:	6803      	ldr	r3, [r0, #0]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	0791      	lsls	r1, r2, #30
{
 80037a8:	b510      	push	{r4, lr}
 80037aa:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037ac:	d50f      	bpl.n	80037ce <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	0792      	lsls	r2, r2, #30
 80037b2:	d50c      	bpl.n	80037ce <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037b4:	f06f 0202 	mvn.w	r2, #2
 80037b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ba:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037bc:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037be:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037c0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c2:	f000 8085 	beq.w	80038d0 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037c6:	f7ff ffe9 	bl	800379c <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	2300      	movs	r3, #0
 80037cc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	0752      	lsls	r2, r2, #29
 80037d4:	d510      	bpl.n	80037f8 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	0750      	lsls	r0, r2, #29
 80037da:	d50d      	bpl.n	80037f8 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037dc:	f06f 0204 	mvn.w	r2, #4
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037e4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ee:	d075      	beq.n	80038dc <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80037f0:	f7ff ffd4 	bl	800379c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f4:	2300      	movs	r3, #0
 80037f6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	0711      	lsls	r1, r2, #28
 80037fe:	d50f      	bpl.n	8003820 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	0712      	lsls	r2, r2, #28
 8003804:	d50c      	bpl.n	8003820 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003806:	f06f 0208 	mvn.w	r2, #8
 800380a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800380c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800380e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003810:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003812:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003814:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003816:	d067      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003818:	f7ff ffc0 	bl	800379c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381c:	2300      	movs	r3, #0
 800381e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	06d0      	lsls	r0, r2, #27
 8003826:	d510      	bpl.n	800384a <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	06d1      	lsls	r1, r2, #27
 800382c:	d50d      	bpl.n	800384a <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800382e:	f06f 0210 	mvn.w	r2, #16
 8003832:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003834:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003836:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003838:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003840:	d058      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	f7ff ffab 	bl	800379c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003846:	2300      	movs	r3, #0
 8003848:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	07d2      	lsls	r2, r2, #31
 8003850:	d508      	bpl.n	8003864 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	07d0      	lsls	r0, r2, #31
 8003856:	d505      	bpl.n	8003864 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003858:	f06f 0201 	mvn.w	r2, #1
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800385e:	4620      	mov	r0, r4
 8003860:	f7ff ff9a 	bl	8003798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	0611      	lsls	r1, r2, #24
 800386a:	d508      	bpl.n	800387e <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	0612      	lsls	r2, r2, #24
 8003870:	d505      	bpl.n	800387e <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003872:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003878:	4620      	mov	r0, r4
 800387a:	f000 f8f0 	bl	8003a5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	05d0      	lsls	r0, r2, #23
 8003884:	d508      	bpl.n	8003898 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	0611      	lsls	r1, r2, #24
 800388a:	d505      	bpl.n	8003898 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800388c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003892:	4620      	mov	r0, r4
 8003894:	f000 f8e4 	bl	8003a60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	0652      	lsls	r2, r2, #25
 800389e:	d508      	bpl.n	80038b2 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	0650      	lsls	r0, r2, #25
 80038a4:	d505      	bpl.n	80038b2 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ac:	4620      	mov	r0, r4
 80038ae:	f7ff ff77 	bl	80037a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	0691      	lsls	r1, r2, #26
 80038b8:	d522      	bpl.n	8003900 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	0692      	lsls	r2, r2, #26
 80038be:	d51f      	bpl.n	8003900 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038c0:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 80038c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038c6:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80038cc:	f000 b8c6 	b.w	8003a5c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d0:	f7ff ff63 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	4620      	mov	r0, r4
 80038d6:	f7ff ff62 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
 80038da:	e776      	b.n	80037ca <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038dc:	f7ff ff5d 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7ff ff5c 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
 80038e6:	e785      	b.n	80037f4 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e8:	f7ff ff57 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7ff ff56 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
 80038f2:	e793      	b.n	800381c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f4:	f7ff ff51 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	4620      	mov	r0, r4
 80038fa:	f7ff ff50 	bl	800379e <HAL_TIM_PWM_PulseFinishedCallback>
 80038fe:	e7a2      	b.n	8003846 <HAL_TIM_IRQHandler+0xa4>
 8003900:	bd10      	pop	{r4, pc}
	...

08003904 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003904:	4a30      	ldr	r2, [pc, #192]	; (80039c8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003906:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003908:	4290      	cmp	r0, r2
 800390a:	d012      	beq.n	8003932 <TIM_Base_SetConfig+0x2e>
 800390c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003910:	d00f      	beq.n	8003932 <TIM_Base_SetConfig+0x2e>
 8003912:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003916:	4290      	cmp	r0, r2
 8003918:	d00b      	beq.n	8003932 <TIM_Base_SetConfig+0x2e>
 800391a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800391e:	4290      	cmp	r0, r2
 8003920:	d007      	beq.n	8003932 <TIM_Base_SetConfig+0x2e>
 8003922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003926:	4290      	cmp	r0, r2
 8003928:	d003      	beq.n	8003932 <TIM_Base_SetConfig+0x2e>
 800392a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800392e:	4290      	cmp	r0, r2
 8003930:	d119      	bne.n	8003966 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003932:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003938:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393a:	4a23      	ldr	r2, [pc, #140]	; (80039c8 <TIM_Base_SetConfig+0xc4>)
 800393c:	4290      	cmp	r0, r2
 800393e:	d01d      	beq.n	800397c <TIM_Base_SetConfig+0x78>
 8003940:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003944:	d01a      	beq.n	800397c <TIM_Base_SetConfig+0x78>
 8003946:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800394a:	4290      	cmp	r0, r2
 800394c:	d016      	beq.n	800397c <TIM_Base_SetConfig+0x78>
 800394e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003952:	4290      	cmp	r0, r2
 8003954:	d012      	beq.n	800397c <TIM_Base_SetConfig+0x78>
 8003956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800395a:	4290      	cmp	r0, r2
 800395c:	d00e      	beq.n	800397c <TIM_Base_SetConfig+0x78>
 800395e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003962:	4290      	cmp	r0, r2
 8003964:	d00a      	beq.n	800397c <TIM_Base_SetConfig+0x78>
 8003966:	4a19      	ldr	r2, [pc, #100]	; (80039cc <TIM_Base_SetConfig+0xc8>)
 8003968:	4290      	cmp	r0, r2
 800396a:	d007      	beq.n	800397c <TIM_Base_SetConfig+0x78>
 800396c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003970:	4290      	cmp	r0, r2
 8003972:	d003      	beq.n	800397c <TIM_Base_SetConfig+0x78>
 8003974:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003978:	4290      	cmp	r0, r2
 800397a:	d103      	bne.n	8003984 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800397c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800397e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003982:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003984:	694a      	ldr	r2, [r1, #20]
 8003986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800398a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800398c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800398e:	688b      	ldr	r3, [r1, #8]
 8003990:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003992:	680b      	ldr	r3, [r1, #0]
 8003994:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003996:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <TIM_Base_SetConfig+0xc4>)
 8003998:	4298      	cmp	r0, r3
 800399a:	d00f      	beq.n	80039bc <TIM_Base_SetConfig+0xb8>
 800399c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a0:	4298      	cmp	r0, r3
 80039a2:	d00b      	beq.n	80039bc <TIM_Base_SetConfig+0xb8>
 80039a4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80039a8:	4298      	cmp	r0, r3
 80039aa:	d007      	beq.n	80039bc <TIM_Base_SetConfig+0xb8>
 80039ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039b0:	4298      	cmp	r0, r3
 80039b2:	d003      	beq.n	80039bc <TIM_Base_SetConfig+0xb8>
 80039b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039b8:	4298      	cmp	r0, r3
 80039ba:	d101      	bne.n	80039c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039bc:	690b      	ldr	r3, [r1, #16]
 80039be:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c0:	2301      	movs	r3, #1
 80039c2:	6143      	str	r3, [r0, #20]
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40014000 	.word	0x40014000

080039d0 <HAL_TIM_Base_Init>:
{
 80039d0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80039d2:	4604      	mov	r4, r0
 80039d4:	b1a0      	cbz	r0, 8003a00 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80039de:	b91b      	cbnz	r3, 80039e8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80039e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80039e4:	f001 f8f6 	bl	8004bd4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	2302      	movs	r3, #2
 80039ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ee:	6820      	ldr	r0, [r4, #0]
 80039f0:	1d21      	adds	r1, r4, #4
 80039f2:	f7ff ff87 	bl	8003904 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80039fc:	2000      	movs	r0, #0
 80039fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a00:	2001      	movs	r0, #1
}
 8003a02:	bd10      	pop	{r4, pc}

08003a04 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a08:	2b01      	cmp	r3, #1
{
 8003a0a:	b530      	push	{r4, r5, lr}
 8003a0c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003a10:	d01f      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a12:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a14:	4d10      	ldr	r5, [pc, #64]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003a16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a1a:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8003a1c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003a1e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a20:	d003      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8003a22:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003a26:	42aa      	cmp	r2, r5
 8003a28:	d103      	bne.n	8003a32 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a2a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a30:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a32:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a34:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a3a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a3c:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a40:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a42:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8003a46:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003a52:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003a54:	bd30      	pop	{r4, r5, pc}
 8003a56:	bf00      	nop
 8003a58:	40012c00 	.word	0x40012c00

08003a5c <HAL_TIMEx_CommutationCallback>:
 8003a5c:	4770      	bx	lr

08003a5e <HAL_TIMEx_BreakCallback>:
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a60:	4770      	bx	lr

08003a62 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a62:	6803      	ldr	r3, [r0, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a74:	2320      	movs	r3, #32
 8003a76:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	6603      	str	r3, [r0, #96]	; 0x60
 8003a7e:	4770      	bx	lr

08003a80 <HAL_UART_TxCpltCallback>:
 8003a80:	4770      	bx	lr

08003a82 <HAL_UART_ErrorCallback>:
 8003a82:	4770      	bx	lr

08003a84 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a84:	6803      	ldr	r3, [r0, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a88:	6819      	ldr	r1, [r3, #0]
{
 8003a8a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8003a8c:	0716      	lsls	r6, r2, #28
{
 8003a8e:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a90:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8003a92:	d10a      	bne.n	8003aaa <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8003a94:	0696      	lsls	r6, r2, #26
 8003a96:	d564      	bpl.n	8003b62 <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a98:	068e      	lsls	r6, r1, #26
 8003a9a:	d562      	bpl.n	8003b62 <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8003a9c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8083 	beq.w	8003baa <HAL_UART_IRQHandler+0x126>
}
 8003aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8003aa8:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 8003aaa:	f015 0001 	ands.w	r0, r5, #1
 8003aae:	d102      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ab0:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003ab4:	d055      	beq.n	8003b62 <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ab6:	07d5      	lsls	r5, r2, #31
 8003ab8:	d507      	bpl.n	8003aca <HAL_UART_IRQHandler+0x46>
 8003aba:	05ce      	lsls	r6, r1, #23
 8003abc:	d505      	bpl.n	8003aca <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003abe:	2501      	movs	r5, #1
 8003ac0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ac2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8003ac4:	f045 0501 	orr.w	r5, r5, #1
 8003ac8:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aca:	0795      	lsls	r5, r2, #30
 8003acc:	d506      	bpl.n	8003adc <HAL_UART_IRQHandler+0x58>
 8003ace:	b128      	cbz	r0, 8003adc <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ad0:	2502      	movs	r5, #2
 8003ad2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ad4:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8003ad6:	f045 0504 	orr.w	r5, r5, #4
 8003ada:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003adc:	0756      	lsls	r6, r2, #29
 8003ade:	d506      	bpl.n	8003aee <HAL_UART_IRQHandler+0x6a>
 8003ae0:	b128      	cbz	r0, 8003aee <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ae2:	2504      	movs	r5, #4
 8003ae4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae6:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8003ae8:	f045 0502 	orr.w	r5, r5, #2
 8003aec:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8003aee:	0715      	lsls	r5, r2, #28
 8003af0:	d507      	bpl.n	8003b02 <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8003af2:	068e      	lsls	r6, r1, #26
 8003af4:	d400      	bmi.n	8003af8 <HAL_UART_IRQHandler+0x74>
 8003af6:	b120      	cbz	r0, 8003b02 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003af8:	2008      	movs	r0, #8
 8003afa:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003afc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003afe:	4303      	orrs	r3, r0
 8003b00:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b02:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d050      	beq.n	8003baa <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8003b08:	0695      	lsls	r5, r2, #26
 8003b0a:	d505      	bpl.n	8003b18 <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b0c:	0688      	lsls	r0, r1, #26
 8003b0e:	d503      	bpl.n	8003b18 <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 8003b10:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003b12:	b10b      	cbz	r3, 8003b18 <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 8003b14:	4620      	mov	r0, r4
 8003b16:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003b18:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003b1a:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8003b1c:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003b1e:	d404      	bmi.n	8003b2a <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003b24:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003b28:	d017      	beq.n	8003b5a <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 8003b2a:	f7ff ff9a 	bl	8003a62 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	0652      	lsls	r2, r2, #25
 8003b34:	d50d      	bpl.n	8003b52 <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b36:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003b38:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003b40:	b138      	cbz	r0, 8003b52 <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b42:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <HAL_UART_IRQHandler+0x128>)
 8003b44:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b46:	f7fd ff65 	bl	8001a14 <HAL_DMA_Abort_IT>
 8003b4a:	b370      	cbz	r0, 8003baa <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b4c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003b4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b50:	e7a8      	b.n	8003aa4 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7ff ff95 	bl	8003a82 <HAL_UART_ErrorCallback>
 8003b58:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003b5a:	f7ff ff92 	bl	8003a82 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5e:	6765      	str	r5, [r4, #116]	; 0x74
 8003b60:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003b62:	02d6      	lsls	r6, r2, #11
 8003b64:	d509      	bpl.n	8003b7a <HAL_UART_IRQHandler+0xf6>
 8003b66:	0268      	lsls	r0, r5, #9
 8003b68:	d507      	bpl.n	8003b7a <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003b6e:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b70:	621a      	str	r2, [r3, #32]
}
 8003b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003b76:	f000 bafd 	b.w	8004174 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 8003b7a:	0616      	lsls	r6, r2, #24
 8003b7c:	d505      	bpl.n	8003b8a <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b7e:	060d      	lsls	r5, r1, #24
 8003b80:	d503      	bpl.n	8003b8a <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 8003b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b84:	b18b      	cbz	r3, 8003baa <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 8003b86:	4620      	mov	r0, r4
 8003b88:	e78c      	b.n	8003aa4 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b8a:	0650      	lsls	r0, r2, #25
 8003b8c:	d50d      	bpl.n	8003baa <HAL_UART_IRQHandler+0x126>
 8003b8e:	064a      	lsls	r2, r1, #25
 8003b90:	d50b      	bpl.n	8003baa <HAL_UART_IRQHandler+0x126>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b98:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f7ff ff6b 	bl	8003a80 <HAL_UART_TxCpltCallback>
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
 8003bac:	08003bb1 	.word	0x08003bb1

08003bb0 <UART_DMAAbortOnError>:
{
 8003bb0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003bb2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003bba:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003bbe:	f7ff ff60 	bl	8003a82 <HAL_UART_ErrorCallback>
 8003bc2:	bd08      	pop	{r3, pc}

08003bc4 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bc4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc6:	69c1      	ldr	r1, [r0, #28]
{
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bcc:	6883      	ldr	r3, [r0, #8]
 8003bce:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd0:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bd2:	4303      	orrs	r3, r0
 8003bd4:	6960      	ldr	r0, [r4, #20]
 8003bd6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd8:	48ba      	ldr	r0, [pc, #744]	; (8003ec4 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bda:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bdc:	4028      	ands	r0, r5
 8003bde:	4303      	orrs	r3, r0
 8003be0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be2:	6853      	ldr	r3, [r2, #4]
 8003be4:	68e0      	ldr	r0, [r4, #12]
 8003be6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bea:	4303      	orrs	r3, r0
 8003bec:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bee:	4bb6      	ldr	r3, [pc, #728]	; (8003ec8 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bf0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bf2:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8003bf4:	bf1c      	itt	ne
 8003bf6:	6a23      	ldrne	r3, [r4, #32]
 8003bf8:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bfa:	6893      	ldr	r3, [r2, #8]
 8003bfc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c00:	4303      	orrs	r3, r0
 8003c02:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c04:	4bb1      	ldr	r3, [pc, #708]	; (8003ecc <UART_SetConfig+0x308>)
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d119      	bne.n	8003c3e <UART_SetConfig+0x7a>
 8003c0a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003c0e:	4ab0      	ldr	r2, [pc, #704]	; (8003ed0 <UART_SetConfig+0x30c>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c18:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003c1c:	5cd3      	ldrb	r3, [r2, r3]
 8003c1e:	f040 8138 	bne.w	8003e92 <UART_SetConfig+0x2ce>
    switch (clocksource)
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	f200 808f 	bhi.w	8003d46 <UART_SetConfig+0x182>
 8003c28:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003c2c:	00ca011a 	.word	0x00ca011a
 8003c30:	008d00f9 	.word	0x008d00f9
 8003c34:	008d0114 	.word	0x008d0114
 8003c38:	008d008d 	.word	0x008d008d
 8003c3c:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c3e:	4ba5      	ldr	r3, [pc, #660]	; (8003ed4 <UART_SetConfig+0x310>)
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d107      	bne.n	8003c54 <UART_SetConfig+0x90>
 8003c44:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003c48:	4aa3      	ldr	r2, [pc, #652]	; (8003ed8 <UART_SetConfig+0x314>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	e7e1      	b.n	8003c18 <UART_SetConfig+0x54>
 8003c54:	4ba1      	ldr	r3, [pc, #644]	; (8003edc <UART_SetConfig+0x318>)
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d123      	bne.n	8003ca2 <UART_SetConfig+0xde>
 8003c5a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	f000 80f1 	beq.w	8003e4e <UART_SetConfig+0x28a>
 8003c6c:	d80b      	bhi.n	8003c86 <UART_SetConfig+0xc2>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80f3 	beq.w	8003e5a <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c74:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 8003c78:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003c7c:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c80:	f000 80f8 	beq.w	8003e74 <UART_SetConfig+0x2b0>
 8003c84:	e0a8      	b.n	8003dd8 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	f000 80c6 	beq.w	8003e18 <UART_SetConfig+0x254>
 8003c8c:	2b30      	cmp	r3, #48	; 0x30
 8003c8e:	d1f1      	bne.n	8003c74 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c90:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003c94:	f040 80b8 	bne.w	8003e08 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c98:	6860      	ldr	r0, [r4, #4]
 8003c9a:	0843      	lsrs	r3, r0, #1
 8003c9c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003ca0:	e0c3      	b.n	8003e2a <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca2:	4b8f      	ldr	r3, [pc, #572]	; (8003ee0 <UART_SetConfig+0x31c>)
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d11e      	bne.n	8003ce6 <UART_SetConfig+0x122>
 8003ca8:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	f000 80bb 	beq.w	8003e30 <UART_SetConfig+0x26c>
 8003cba:	d80a      	bhi.n	8003cd2 <UART_SetConfig+0x10e>
 8003cbc:	b97b      	cbnz	r3, 8003cde <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cbe:	4b82      	ldr	r3, [pc, #520]	; (8003ec8 <UART_SetConfig+0x304>)
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	f040 80ca 	bne.w	8003e5a <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003cc6:	f7ff f9dd 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
        break;
 8003cca:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003ccc:	bbb0      	cbnz	r0, 8003d3c <UART_SetConfig+0x178>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	e03a      	b.n	8003d48 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cd2:	2b80      	cmp	r3, #128	; 0x80
 8003cd4:	f000 809d 	beq.w	8003e12 <UART_SetConfig+0x24e>
 8003cd8:	2bc0      	cmp	r3, #192	; 0xc0
 8003cda:	f000 80b0 	beq.w	8003e3e <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cde:	4b7a      	ldr	r3, [pc, #488]	; (8003ec8 <UART_SetConfig+0x304>)
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d1c7      	bne.n	8003c74 <UART_SetConfig+0xb0>
 8003ce4:	e02f      	b.n	8003d46 <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ce6:	4b7f      	ldr	r3, [pc, #508]	; (8003ee4 <UART_SetConfig+0x320>)
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d111      	bne.n	8003d10 <UART_SetConfig+0x14c>
 8003cec:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfc:	f000 8098 	beq.w	8003e30 <UART_SetConfig+0x26c>
 8003d00:	d9dc      	bls.n	8003cbc <UART_SetConfig+0xf8>
 8003d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d06:	f000 8084 	beq.w	8003e12 <UART_SetConfig+0x24e>
 8003d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d0e:	e7e4      	b.n	8003cda <UART_SetConfig+0x116>
 8003d10:	4b6d      	ldr	r3, [pc, #436]	; (8003ec8 <UART_SetConfig+0x304>)
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d1ae      	bne.n	8003c74 <UART_SetConfig+0xb0>
 8003d16:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d26:	f000 8083 	beq.w	8003e30 <UART_SetConfig+0x26c>
 8003d2a:	d9c7      	bls.n	8003cbc <UART_SetConfig+0xf8>
 8003d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d30:	d06f      	beq.n	8003e12 <UART_SetConfig+0x24e>
 8003d32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d36:	e7d0      	b.n	8003cda <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003d38:	486b      	ldr	r0, [pc, #428]	; (8003ee8 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d3a:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003d3c:	6862      	ldr	r2, [r4, #4]
 8003d3e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003d42:	4281      	cmp	r1, r0
 8003d44:	d905      	bls.n	8003d52 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003d46:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003d4c:	6663      	str	r3, [r4, #100]	; 0x64
}
 8003d4e:	4610      	mov	r0, r2
 8003d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003d52:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003d56:	d8f6      	bhi.n	8003d46 <UART_SetConfig+0x182>
        switch (clocksource)
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d82e      	bhi.n	8003dba <UART_SetConfig+0x1f6>
 8003d5c:	e8df f003 	tbb	[pc, r3]
 8003d60:	2d1c2d05 	.word	0x2d1c2d05
 8003d64:	2d2d2d24 	.word	0x2d2d2d24
 8003d68:	27          	.byte	0x27
 8003d69:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d6a:	f7ff f98b 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d6e:	6862      	ldr	r2, [r4, #4]
 8003d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d74:	0856      	lsrs	r6, r2, #1
 8003d76:	2700      	movs	r7, #0
 8003d78:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	4630      	mov	r0, r6
 8003d80:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003d82:	f7fc ff0d 	bl	8000ba0 <__aeabi_uldivmod>
            break;
 8003d86:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d88:	4b58      	ldr	r3, [pc, #352]	; (8003eec <UART_SetConfig+0x328>)
 8003d8a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003d8e:	4299      	cmp	r1, r3
 8003d90:	d8d9      	bhi.n	8003d46 <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	60d8      	str	r0, [r3, #12]
 8003d96:	e7d7      	b.n	8003d48 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003d98:	4855      	ldr	r0, [pc, #340]	; (8003ef0 <UART_SetConfig+0x32c>)
 8003d9a:	0855      	lsrs	r5, r2, #1
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2100      	movs	r1, #0
 8003da0:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003da2:	f141 0100 	adc.w	r1, r1, #0
 8003da6:	e7ec      	b.n	8003d82 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003da8:	f7fe fe60 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8003dac:	e7df      	b.n	8003d6e <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003dae:	0850      	lsrs	r0, r2, #1
 8003db0:	2100      	movs	r1, #0
 8003db2:	2300      	movs	r3, #0
 8003db4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003db8:	e7f3      	b.n	8003da2 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8003dba:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	e7e3      	b.n	8003d88 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003dc0:	f7ff f972 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 8003dc4:	e04e      	b.n	8003e64 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003dc6:	f7ff f95d 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003dca:	6862      	ldr	r2, [r4, #4]
 8003dcc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dd4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd8:	f1a3 0010 	sub.w	r0, r3, #16
 8003ddc:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003de0:	4288      	cmp	r0, r1
 8003de2:	d8b0      	bhi.n	8003d46 <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8003de4:	6821      	ldr	r1, [r4, #0]
 8003de6:	60cb      	str	r3, [r1, #12]
 8003de8:	e7ae      	b.n	8003d48 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003dea:	f7ff f95d 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 8003dee:	e7ec      	b.n	8003dca <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003df0:	6860      	ldr	r0, [r4, #4]
 8003df2:	0843      	lsrs	r3, r0, #1
 8003df4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003df8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003dfc:	fbb3 f3f0 	udiv	r3, r3, r0
 8003e00:	e7e8      	b.n	8003dd4 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e02:	f7fe fe33 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8003e06:	e7e0      	b.n	8003dca <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e08:	6860      	ldr	r0, [r4, #4]
 8003e0a:	0843      	lsrs	r3, r0, #1
 8003e0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003e10:	e7f4      	b.n	8003dfc <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e12:	4b2d      	ldr	r3, [pc, #180]	; (8003ec8 <UART_SetConfig+0x304>)
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d08f      	beq.n	8003d38 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e18:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003e1c:	d1e8      	bne.n	8003df0 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e1e:	6860      	ldr	r0, [r4, #4]
 8003e20:	0843      	lsrs	r3, r0, #1
 8003e22:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003e26:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e2a:	fbb3 f3f0 	udiv	r3, r3, r0
 8003e2e:	e01f      	b.n	8003e70 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <UART_SetConfig+0x304>)
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d10b      	bne.n	8003e4e <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003e36:	f7fe fe19 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
        break;
 8003e3a:	2304      	movs	r3, #4
 8003e3c:	e746      	b.n	8003ccc <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e3e:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <UART_SetConfig+0x304>)
 8003e40:	429a      	cmp	r2, r3
 8003e42:	f47f af25 	bne.w	8003c90 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003e46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	e776      	b.n	8003d3c <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e4e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003e52:	d1d6      	bne.n	8003e02 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e54:	f7fe fe0a 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8003e58:	e004      	b.n	8003e64 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003e5e:	d1b2      	bne.n	8003dc6 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e60:	f7ff f910 	bl	8003084 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e64:	6861      	ldr	r1, [r4, #4]
 8003e66:	084a      	lsrs	r2, r1, #1
 8003e68:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003e6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e70:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e72:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e74:	f1a3 0010 	sub.w	r0, r3, #16
 8003e78:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003e7c:	4288      	cmp	r0, r1
 8003e7e:	f63f af62 	bhi.w	8003d46 <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8003e82:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003e86:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e88:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	60c3      	str	r3, [r0, #12]
 8003e90:	e75a      	b.n	8003d48 <UART_SetConfig+0x184>
    switch (clocksource)
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	f63f af57 	bhi.w	8003d46 <UART_SetConfig+0x182>
 8003e98:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <UART_SetConfig+0x2dc>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003dc7 	.word	0x08003dc7
 8003ea4:	08003deb 	.word	0x08003deb
 8003ea8:	08003df1 	.word	0x08003df1
 8003eac:	08003d47 	.word	0x08003d47
 8003eb0:	08003e03 	.word	0x08003e03
 8003eb4:	08003d47 	.word	0x08003d47
 8003eb8:	08003d47 	.word	0x08003d47
 8003ebc:	08003d47 	.word	0x08003d47
 8003ec0:	08003e09 	.word	0x08003e09
 8003ec4:	efff69f3 	.word	0xefff69f3
 8003ec8:	40008000 	.word	0x40008000
 8003ecc:	40013800 	.word	0x40013800
 8003ed0:	0800a1a0 	.word	0x0800a1a0
 8003ed4:	40004400 	.word	0x40004400
 8003ed8:	0800a1a4 	.word	0x0800a1a4
 8003edc:	40004800 	.word	0x40004800
 8003ee0:	40004c00 	.word	0x40004c00
 8003ee4:	40005000 	.word	0x40005000
 8003ee8:	00f42400 	.word	0x00f42400
 8003eec:	000ffcff 	.word	0x000ffcff
 8003ef0:	f4240000 	.word	0xf4240000

08003ef4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ef6:	07da      	lsls	r2, r3, #31
{
 8003ef8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003efa:	d506      	bpl.n	8003f0a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003efc:	6801      	ldr	r1, [r0, #0]
 8003efe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003f00:	684a      	ldr	r2, [r1, #4]
 8003f02:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003f06:	4322      	orrs	r2, r4
 8003f08:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f0a:	079c      	lsls	r4, r3, #30
 8003f0c:	d506      	bpl.n	8003f1c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f0e:	6801      	ldr	r1, [r0, #0]
 8003f10:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003f12:	684a      	ldr	r2, [r1, #4]
 8003f14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f18:	4322      	orrs	r2, r4
 8003f1a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f1c:	0759      	lsls	r1, r3, #29
 8003f1e:	d506      	bpl.n	8003f2e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f20:	6801      	ldr	r1, [r0, #0]
 8003f22:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003f24:	684a      	ldr	r2, [r1, #4]
 8003f26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f2a:	4322      	orrs	r2, r4
 8003f2c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f2e:	071a      	lsls	r2, r3, #28
 8003f30:	d506      	bpl.n	8003f40 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f32:	6801      	ldr	r1, [r0, #0]
 8003f34:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003f36:	684a      	ldr	r2, [r1, #4]
 8003f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f3c:	4322      	orrs	r2, r4
 8003f3e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f40:	06dc      	lsls	r4, r3, #27
 8003f42:	d506      	bpl.n	8003f52 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f44:	6801      	ldr	r1, [r0, #0]
 8003f46:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003f48:	688a      	ldr	r2, [r1, #8]
 8003f4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f4e:	4322      	orrs	r2, r4
 8003f50:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f52:	0699      	lsls	r1, r3, #26
 8003f54:	d506      	bpl.n	8003f64 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f56:	6801      	ldr	r1, [r0, #0]
 8003f58:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003f5a:	688a      	ldr	r2, [r1, #8]
 8003f5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f60:	4322      	orrs	r2, r4
 8003f62:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f64:	065a      	lsls	r2, r3, #25
 8003f66:	d50f      	bpl.n	8003f88 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f68:	6801      	ldr	r1, [r0, #0]
 8003f6a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003f6c:	684a      	ldr	r2, [r1, #4]
 8003f6e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003f72:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f74:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f78:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f7a:	d105      	bne.n	8003f88 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f7c:	684a      	ldr	r2, [r1, #4]
 8003f7e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003f80:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003f84:	4322      	orrs	r2, r4
 8003f86:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f88:	061b      	lsls	r3, r3, #24
 8003f8a:	d506      	bpl.n	8003f9a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f8c:	6802      	ldr	r2, [r0, #0]
 8003f8e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003f90:	6853      	ldr	r3, [r2, #4]
 8003f92:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6053      	str	r3, [r2, #4]
 8003f9a:	bd10      	pop	{r4, pc}

08003f9c <UART_WaitOnFlagUntilTimeout>:
{
 8003f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa0:	9d06      	ldr	r5, [sp, #24]
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	460f      	mov	r7, r1
 8003fa6:	4616      	mov	r6, r2
 8003fa8:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003faa:	6821      	ldr	r1, [r4, #0]
 8003fac:	69ca      	ldr	r2, [r1, #28]
 8003fae:	ea37 0302 	bics.w	r3, r7, r2
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2201      	moveq	r2, #1
 8003fb6:	2200      	movne	r2, #0
 8003fb8:	42b2      	cmp	r2, r6
 8003fba:	d002      	beq.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003fbc:	2000      	movs	r0, #0
}
 8003fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003fc2:	1c6b      	adds	r3, r5, #1
 8003fc4:	d0f2      	beq.n	8003fac <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fc6:	b99d      	cbnz	r5, 8003ff0 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fd0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003fda:	2320      	movs	r3, #32
 8003fdc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8003fea:	2003      	movs	r0, #3
 8003fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ff0:	f7fd fbf4 	bl	80017dc <HAL_GetTick>
 8003ff4:	eba0 0008 	sub.w	r0, r0, r8
 8003ff8:	4285      	cmp	r5, r0
 8003ffa:	d2d6      	bcs.n	8003faa <UART_WaitOnFlagUntilTimeout+0xe>
 8003ffc:	e7e4      	b.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x2c>

08003ffe <HAL_UART_Transmit>:
{
 8003ffe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004002:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004004:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8004008:	2b20      	cmp	r3, #32
{
 800400a:	4604      	mov	r4, r0
 800400c:	460d      	mov	r5, r1
 800400e:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004010:	d14a      	bne.n	80040a8 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8004012:	2900      	cmp	r1, #0
 8004014:	d046      	beq.n	80040a4 <HAL_UART_Transmit+0xa6>
 8004016:	2a00      	cmp	r2, #0
 8004018:	d044      	beq.n	80040a4 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800401a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800401e:	2b01      	cmp	r3, #1
 8004020:	d042      	beq.n	80040a8 <HAL_UART_Transmit+0xaa>
 8004022:	2301      	movs	r3, #1
 8004024:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	2300      	movs	r3, #0
 800402a:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800402c:	2321      	movs	r3, #33	; 0x21
 800402e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8004032:	f7fd fbd3 	bl	80017dc <HAL_GetTick>
    huart->TxXferSize  = Size;
 8004036:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800403a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800403c:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004040:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004044:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8004046:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004048:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 800404a:	b952      	cbnz	r2, 8004062 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800404c:	2140      	movs	r1, #64	; 0x40
 800404e:	4620      	mov	r0, r4
 8004050:	f7ff ffa4 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 8004054:	b958      	cbnz	r0, 800406e <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8004056:	2320      	movs	r3, #32
 8004058:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 800405c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8004060:	e006      	b.n	8004070 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004062:	2200      	movs	r2, #0
 8004064:	2180      	movs	r1, #128	; 0x80
 8004066:	4620      	mov	r0, r4
 8004068:	f7ff ff98 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 800406c:	b118      	cbz	r0, 8004076 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 800406e:	2003      	movs	r0, #3
}
 8004070:	b002      	add	sp, #8
 8004072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004076:	68a3      	ldr	r3, [r4, #8]
 8004078:	6822      	ldr	r2, [r4, #0]
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	d10d      	bne.n	800409c <HAL_UART_Transmit+0x9e>
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	b95b      	cbnz	r3, 800409c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004084:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800408e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004092:	3b01      	subs	r3, #1
 8004094:	b29b      	uxth	r3, r3
 8004096:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800409a:	e7d1      	b.n	8004040 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800409c:	782b      	ldrb	r3, [r5, #0]
 800409e:	8513      	strh	r3, [r2, #40]	; 0x28
 80040a0:	3501      	adds	r5, #1
 80040a2:	e7f4      	b.n	800408e <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80040a4:	2001      	movs	r0, #1
 80040a6:	e7e3      	b.n	8004070 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 80040a8:	2002      	movs	r0, #2
 80040aa:	e7e1      	b.n	8004070 <HAL_UART_Transmit+0x72>

080040ac <UART_CheckIdleState>:
{
 80040ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040ae:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	2600      	movs	r6, #0
 80040b2:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80040b4:	f7fd fb92 	bl	80017dc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80040be:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040c0:	d417      	bmi.n	80040f2 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	075b      	lsls	r3, r3, #29
 80040c8:	d50a      	bpl.n	80040e0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	2200      	movs	r2, #0
 80040d2:	462b      	mov	r3, r5
 80040d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff ff5f 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 80040de:	b9a0      	cbnz	r0, 800410a <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 80040e0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80040e2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80040e4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 80040e8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80040ec:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 80040f0:	e00c      	b.n	800410c <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	4632      	mov	r2, r6
 80040fa:	4603      	mov	r3, r0
 80040fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004100:	4620      	mov	r0, r4
 8004102:	f7ff ff4b 	bl	8003f9c <UART_WaitOnFlagUntilTimeout>
 8004106:	2800      	cmp	r0, #0
 8004108:	d0db      	beq.n	80040c2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800410a:	2003      	movs	r0, #3
}
 800410c:	b002      	add	sp, #8
 800410e:	bd70      	pop	{r4, r5, r6, pc}

08004110 <HAL_UART_Init>:
{
 8004110:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004112:	4604      	mov	r4, r0
 8004114:	b360      	cbz	r0, 8004170 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004116:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800411a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800411e:	b91b      	cbnz	r3, 8004128 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004120:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8004124:	f000 fd74 	bl	8004c10 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004128:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800412a:	2324      	movs	r3, #36	; 0x24
 800412c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8004130:	6813      	ldr	r3, [r2, #0]
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004138:	4620      	mov	r0, r4
 800413a:	f7ff fd43 	bl	8003bc4 <UART_SetConfig>
 800413e:	2801      	cmp	r0, #1
 8004140:	d016      	beq.n	8004170 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004144:	b113      	cbz	r3, 800414c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8004146:	4620      	mov	r0, r4
 8004148:	f7ff fed4 	bl	8003ef4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004154:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800415c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004164:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004166:	601a      	str	r2, [r3, #0]
}
 8004168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800416c:	f7ff bf9e 	b.w	80040ac <UART_CheckIdleState>
}
 8004170:	2001      	movs	r0, #1
 8004172:	bd10      	pop	{r4, pc}

08004174 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004174:	4770      	bx	lr
	...

08004178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004178:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800417a:	3b01      	subs	r3, #1
 800417c:	d101      	bne.n	8004182 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800417e:	2003      	movs	r0, #3
 8004180:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004182:	6902      	ldr	r2, [r0, #16]
 8004184:	2a00      	cmp	r2, #0
 8004186:	daf8      	bge.n	800417a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004188:	6903      	ldr	r3, [r0, #16]
 800418a:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <USB_CoreReset+0x2c>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004192:	3a01      	subs	r2, #1
 8004194:	d0f3      	beq.n	800417e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004196:	6903      	ldr	r3, [r0, #16]
 8004198:	f013 0301 	ands.w	r3, r3, #1
 800419c:	d1f9      	bne.n	8004192 <USB_CoreReset+0x1a>

  return HAL_OK;
 800419e:	4618      	mov	r0, r3
}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	00030d41 	.word	0x00030d41

080041a8 <USB_CoreInit>:
{
 80041a8:	b084      	sub	sp, #16
 80041aa:	b538      	push	{r3, r4, r5, lr}
 80041ac:	ad05      	add	r5, sp, #20
 80041ae:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041b4:	2b01      	cmp	r3, #1
{
 80041b6:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041b8:	d11b      	bne.n	80041f2 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80041bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041c2:	68c3      	ldr	r3, [r0, #12]
 80041c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80041c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041cc:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041ce:	68c3      	ldr	r3, [r0, #12]
 80041d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80041d4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80041d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80041d8:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041da:	bf02      	ittt	eq
 80041dc:	68c3      	ldreq	r3, [r0, #12]
 80041de:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80041e2:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80041e4:	f7ff ffc8 	bl	8004178 <USB_CoreReset>
}
 80041e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ec:	2000      	movs	r0, #0
 80041ee:	b004      	add	sp, #16
 80041f0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041f2:	68c3      	ldr	r3, [r0, #12]
 80041f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f8:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80041fa:	f7ff ffbd 	bl	8004178 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80041fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004202:	63a3      	str	r3, [r4, #56]	; 0x38
 8004204:	e7f0      	b.n	80041e8 <USB_CoreInit+0x40>

08004206 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004206:	6883      	ldr	r3, [r0, #8]
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	6083      	str	r3, [r0, #8]
}
 800420e:	2000      	movs	r0, #0
 8004210:	4770      	bx	lr

08004212 <USB_SetCurrentMode>:
{
 8004212:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004214:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004216:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004218:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800421c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800421e:	d108      	bne.n	8004232 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004220:	68c3      	ldr	r3, [r0, #12]
 8004222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004226:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004228:	2032      	movs	r0, #50	; 0x32
 800422a:	f7fd fadd 	bl	80017e8 <HAL_Delay>
  return HAL_OK;
 800422e:	2000      	movs	r0, #0
 8004230:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8004232:	b919      	cbnz	r1, 800423c <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004234:	68c3      	ldr	r3, [r0, #12]
 8004236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800423a:	e7f4      	b.n	8004226 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800423c:	2001      	movs	r0, #1
}
 800423e:	bd08      	pop	{r3, pc}

08004240 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004240:	0189      	lsls	r1, r1, #6
 8004242:	f041 0120 	orr.w	r1, r1, #32
 8004246:	4a06      	ldr	r2, [pc, #24]	; (8004260 <USB_FlushTxFifo+0x20>)
 8004248:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800424a:	3a01      	subs	r2, #1
 800424c:	d005      	beq.n	800425a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800424e:	6903      	ldr	r3, [r0, #16]
 8004250:	f013 0320 	ands.w	r3, r3, #32
 8004254:	d1f9      	bne.n	800424a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8004256:	4618      	mov	r0, r3
 8004258:	4770      	bx	lr
      return HAL_TIMEOUT;
 800425a:	2003      	movs	r0, #3
}
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	00030d41 	.word	0x00030d41

08004264 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004264:	2310      	movs	r3, #16
 8004266:	4a06      	ldr	r2, [pc, #24]	; (8004280 <USB_FlushRxFifo+0x1c>)
 8004268:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800426a:	3a01      	subs	r2, #1
 800426c:	d005      	beq.n	800427a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800426e:	6903      	ldr	r3, [r0, #16]
 8004270:	f013 0310 	ands.w	r3, r3, #16
 8004274:	d1f9      	bne.n	800426a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8004276:	4618      	mov	r0, r3
 8004278:	4770      	bx	lr
      return HAL_TIMEOUT;
 800427a:	2003      	movs	r0, #3
}
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	00030d41 	.word	0x00030d41

08004284 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004284:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004288:	4319      	orrs	r1, r3
 800428a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800428e:	2000      	movs	r0, #0
 8004290:	4770      	bx	lr
	...

08004294 <USB_DevInit>:
{
 8004294:	b084      	sub	sp, #16
 8004296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800429a:	4604      	mov	r4, r0
 800429c:	a807      	add	r0, sp, #28
 800429e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80042a6:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 80042a8:	4619      	mov	r1, r3
 80042aa:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80042ae:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80042b2:	3301      	adds	r3, #1
 80042b4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80042b6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80042b8:	d1f7      	bne.n	80042aa <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80042ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042c0:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 80042c2:	b95f      	cbnz	r7, 80042dc <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80042c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042ca:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d2:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042da:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80042dc:	2500      	movs	r5, #0
 80042de:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042e2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80042e6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042ea:	2103      	movs	r1, #3
 80042ec:	4620      	mov	r0, r4
 80042ee:	f7ff ffc9 	bl	8004284 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042f2:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80042f6:	2110      	movs	r1, #16
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7ff ffa1 	bl	8004240 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80042fe:	4620      	mov	r0, r4
 8004300:	f7ff ffb0 	bl	8004264 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8004304:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004306:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8004308:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 800430a:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 800430c:	61f5      	str	r5, [r6, #28]
 800430e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004316:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800431a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800431e:	4543      	cmp	r3, r8
 8004320:	d12f      	bne.n	8004382 <USB_DevInit+0xee>
 8004322:	2100      	movs	r1, #0
 8004324:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004328:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800432a:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800432e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004332:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004336:	428b      	cmp	r3, r1
 8004338:	d134      	bne.n	80043a4 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800433a:	6933      	ldr	r3, [r6, #16]
 800433c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004340:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004346:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800434a:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800434c:	69a3      	ldr	r3, [r4, #24]
 800434e:	f043 0310 	orr.w	r3, r3, #16
 8004352:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004354:	69a2      	ldr	r2, [r4, #24]
 8004356:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <USB_DevInit+0x134>)
 8004358:	4313      	orrs	r3, r2
 800435a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800435c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800435e:	b11b      	cbz	r3, 8004368 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004360:	69a3      	ldr	r3, [r4, #24]
 8004362:	f043 0308 	orr.w	r3, r3, #8
 8004366:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004368:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800436a:	bf01      	itttt	eq
 800436c:	69a3      	ldreq	r3, [r4, #24]
 800436e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8004372:	f043 0304 	orreq.w	r3, r3, #4
 8004376:	61a3      	streq	r3, [r4, #24]
}
 8004378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800437c:	2000      	movs	r0, #0
 800437e:	b004      	add	sp, #16
 8004380:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004382:	f8d2 c000 	ldr.w	ip, [r2]
 8004386:	f1bc 0f00 	cmp.w	ip, #0
 800438a:	da09      	bge.n	80043a0 <USB_DevInit+0x10c>
      if (i == 0U)
 800438c:	b933      	cbnz	r3, 800439c <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800438e:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004390:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004392:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004394:	f8c2 e008 	str.w	lr, [r2, #8]
 8004398:	3220      	adds	r2, #32
 800439a:	e7c0      	b.n	800431e <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800439c:	6010      	str	r0, [r2, #0]
 800439e:	e7f7      	b.n	8004390 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 80043a0:	6011      	str	r1, [r2, #0]
 80043a2:	e7f5      	b.n	8004390 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043a4:	f8d2 8000 	ldr.w	r8, [r2]
 80043a8:	f1b8 0f00 	cmp.w	r8, #0
 80043ac:	da0a      	bge.n	80043c4 <USB_DevInit+0x130>
      if (i == 0U)
 80043ae:	b939      	cbnz	r1, 80043c0 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043b0:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043b4:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043b6:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043b8:	f8c2 c008 	str.w	ip, [r2, #8]
 80043bc:	3220      	adds	r2, #32
 80043be:	e7ba      	b.n	8004336 <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043c0:	6015      	str	r5, [r2, #0]
 80043c2:	e7f7      	b.n	80043b4 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043c4:	6010      	str	r0, [r2, #0]
 80043c6:	e7f5      	b.n	80043b4 <USB_DevInit+0x120>
 80043c8:	803c3800 	.word	0x803c3800

080043cc <USB_DevDisconnect>:
{
 80043cc:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043ce:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80043d2:	f043 0302 	orr.w	r3, r3, #2
 80043d6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80043da:	2003      	movs	r0, #3
 80043dc:	f7fd fa04 	bl	80017e8 <HAL_Delay>
}
 80043e0:	2000      	movs	r0, #0
 80043e2:	bd08      	pop	{r3, pc}

080043e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e6:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043e8:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043ea:	2244      	movs	r2, #68	; 0x44
 80043ec:	2100      	movs	r1, #0
 80043ee:	a805      	add	r0, sp, #20
 80043f0:	f003 fa3f 	bl	8007872 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043f4:	4622      	mov	r2, r4
 80043f6:	2100      	movs	r1, #0
 80043f8:	4668      	mov	r0, sp
 80043fa:	f003 fa3a 	bl	8007872 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043fe:	2100      	movs	r1, #0
 8004400:	2288      	movs	r2, #136	; 0x88
 8004402:	a816      	add	r0, sp, #88	; 0x58
 8004404:	f003 fa35 	bl	8007872 <memset>

  /**Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8004408:	f7fe fa22 	bl	8002850 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800440c:	4a22      	ldr	r2, [pc, #136]	; (8004498 <SystemClock_Config+0xb4>)
 800440e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004412:	f023 0318 	bic.w	r3, r3, #24
 8004416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800441a:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800441c:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800441e:	2602      	movs	r6, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004420:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004422:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004424:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004426:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004428:	2707      	movs	r7, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800442a:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 800442c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800442e:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004430:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004432:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004434:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004436:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004438:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800443a:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800443c:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800443e:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004440:	f7fe fb68 	bl	8002b14 <HAL_RCC_OscConfig>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004444:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004446:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004448:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800444a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800444c:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004450:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004452:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004454:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004456:	f7fe fd83 	bl	8002f60 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <SystemClock_Config+0xb8>)
 800445c:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800445e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004462:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8004464:	2318      	movs	r3, #24
 8004466:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004468:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800446a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800446e:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004470:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004472:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004474:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004476:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8004478:	9436      	str	r4, [sp, #216]	; 0xd8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800447a:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800447c:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800447e:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004480:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004482:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004484:	f7fe ff2e 	bl	80032e4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /**Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004488:	f44f 7000 	mov.w	r0, #512	; 0x200
 800448c:	f7fe f9f0 	bl	8002870 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /**Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004490:	f7ff f910 	bl	80036b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004494:	b039      	add	sp, #228	; 0xe4
 8004496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	0001208d 	.word	0x0001208d

080044a0 <main>:
{
 80044a0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80044a4:	b0ff      	sub	sp, #508	; 0x1fc
  HAL_Init();
 80044a6:	f7fd f981 	bl	80017ac <HAL_Init>
  SystemClock_Config();
 80044aa:	f7ff ff9b 	bl	80043e4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ae:	2214      	movs	r2, #20
 80044b0:	2100      	movs	r1, #0
 80044b2:	a865      	add	r0, sp, #404	; 0x194
 80044b4:	f003 f9dd 	bl	8007872 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044b8:	4baf      	ldr	r3, [pc, #700]	; (8004778 <main+0x2d8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80044ba:	48b0      	ldr	r0, [pc, #704]	; (800477c <main+0x2dc>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044be:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 80047b4 <main+0x314>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044c2:	f042 0210 	orr.w	r2, r2, #16
 80044c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80044c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ca:	f002 0210 	and.w	r2, r2, #16
 80044ce:	9260      	str	r2, [sp, #384]	; 0x180
 80044d0:	9a60      	ldr	r2, [sp, #384]	; 0x180
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044d4:	f042 0204 	orr.w	r2, r2, #4
 80044d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80044da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044dc:	f002 0204 	and.w	r2, r2, #4
 80044e0:	9261      	str	r2, [sp, #388]	; 0x184
 80044e2:	9a61      	ldr	r2, [sp, #388]	; 0x184
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80044ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ee:	f002 0201 	and.w	r2, r2, #1
 80044f2:	9262      	str	r2, [sp, #392]	; 0x188
 80044f4:	9a62      	ldr	r2, [sp, #392]	; 0x188
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044f8:	f042 0202 	orr.w	r2, r2, #2
 80044fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80044fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004500:	f002 0202 	and.w	r2, r2, #2
 8004504:	9263      	str	r2, [sp, #396]	; 0x18c
 8004506:	9a63      	ldr	r2, [sp, #396]	; 0x18c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800450a:	f042 0208 	orr.w	r2, r2, #8
 800450e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	9364      	str	r3, [sp, #400]	; 0x190
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8004518:	2200      	movs	r2, #0
 800451a:	f240 1115 	movw	r1, #277	; 0x115
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800451e:	9b64      	ldr	r3, [sp, #400]	; 0x190
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8004520:	f7fd fc14 	bl	8001d4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8004524:	2200      	movs	r2, #0
 8004526:	f248 1104 	movw	r1, #33028	; 0x8104
 800452a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800452e:	f7fd fc0d 	bl	8001d4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8004532:	2200      	movs	r2, #0
 8004534:	f24f 0134 	movw	r1, #61492	; 0xf034
 8004538:	4891      	ldr	r0, [pc, #580]	; (8004780 <main+0x2e0>)
 800453a:	f7fd fc07 	bl	8001d4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800453e:	2200      	movs	r2, #0
 8004540:	f243 0181 	movw	r1, #12417	; 0x3081
 8004544:	488f      	ldr	r0, [pc, #572]	; (8004784 <main+0x2e4>)
 8004546:	f7fd fc01 	bl	8001d4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800454a:	2200      	movs	r2, #0
 800454c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004550:	488d      	ldr	r0, [pc, #564]	; (8004788 <main+0x2e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004554:	f7fd fbfa 	bl	8001d4c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004558:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800455a:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800455e:	a965      	add	r1, sp, #404	; 0x194
 8004560:	4886      	ldr	r0, [pc, #536]	; (800477c <main+0x2dc>)
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004562:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	9467      	str	r4, [sp, #412]	; 0x19c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004566:	9468      	str	r4, [sp, #416]	; 0x1a0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004568:	9566      	str	r5, [sp, #408]	; 0x198
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800456a:	f7fd fa79 	bl	8001a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800456e:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004570:	a965      	add	r1, sp, #404	; 0x194
 8004572:	4882      	ldr	r0, [pc, #520]	; (800477c <main+0x2dc>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8004574:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004576:	f8cd 9198 	str.w	r9, [sp, #408]	; 0x198
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457a:	9467      	str	r4, [sp, #412]	; 0x19c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800457c:	f7fd fa70 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8004580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004584:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8004586:	a965      	add	r1, sp, #404	; 0x194
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004588:	4b80      	ldr	r3, [pc, #512]	; (800478c <main+0x2ec>)
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800458a:	487f      	ldr	r0, [pc, #508]	; (8004788 <main+0x2e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800458c:	9366      	str	r3, [sp, #408]	; 0x198

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800458e:	f04f 0a0b 	mov.w	sl, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	9467      	str	r4, [sp, #412]	; 0x19c
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8004594:	f7fd fa64 	bl	8001a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8004598:	233f      	movs	r3, #63	; 0x3f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800459a:	a965      	add	r1, sp, #404	; 0x194
 800459c:	487a      	ldr	r0, [pc, #488]	; (8004788 <main+0x2e8>)
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 800459e:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80045a0:	f8cd a198 	str.w	sl, [sp, #408]	; 0x198
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	9467      	str	r4, [sp, #412]	; 0x19c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045a6:	f7fd fa5b 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80045aa:	f248 1304 	movw	r3, #33028	; 0x8104
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ae:	a965      	add	r1, sp, #404	; 0x194
 80045b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b4:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80045b6:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80045b8:	f04f 0808 	mov.w	r8, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	9467      	str	r4, [sp, #412]	; 0x19c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045be:	9468      	str	r4, [sp, #416]	; 0x1a0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045c0:	9566      	str	r5, [sp, #408]	; 0x198
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c2:	f7fd fa4d 	bl	8001a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80045c6:	a965      	add	r1, sp, #404	; 0x194
 80045c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80045cc:	f8cd 8194 	str.w	r8, [sp, #404]	; 0x194
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d0:	9467      	str	r4, [sp, #412]	; 0x19c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d2:	9468      	str	r4, [sp, #416]	; 0x1a0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d4:	9766      	str	r7, [sp, #408]	; 0x198
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80045d6:	9569      	str	r5, [sp, #420]	; 0x1a4
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80045d8:	f7fd fa42 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80045dc:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80045de:	a965      	add	r1, sp, #404	; 0x194
 80045e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e4:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045e6:	f04f 0b05 	mov.w	fp, #5
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80045ea:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80045ec:	f8cd a198 	str.w	sl, [sp, #408]	; 0x198
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f0:	9467      	str	r4, [sp, #412]	; 0x19c
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80045f2:	f7fd fa35 	bl	8001a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80045f6:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f8:	a965      	add	r1, sp, #404	; 0x194
 80045fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80045fe:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	9467      	str	r4, [sp, #412]	; 0x19c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004602:	9668      	str	r6, [sp, #416]	; 0x1a0
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004604:	f8cd b1a4 	str.w	fp, [sp, #420]	; 0x1a4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004608:	9766      	str	r7, [sp, #408]	; 0x198
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460a:	f7fd fa29 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800460e:	a965      	add	r1, sp, #404	; 0x194
 8004610:	485b      	ldr	r0, [pc, #364]	; (8004780 <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004612:	f8cd 9198 	str.w	r9, [sp, #408]	; 0x198
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004616:	9467      	str	r4, [sp, #412]	; 0x19c
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8004618:	9565      	str	r5, [sp, #404]	; 0x194
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800461a:	f7fd fa21 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800461e:	a965      	add	r1, sp, #404	; 0x194
 8004620:	4857      	ldr	r0, [pc, #348]	; (8004780 <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004622:	f8cd a198 	str.w	sl, [sp, #408]	; 0x198
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004626:	9467      	str	r4, [sp, #412]	; 0x19c
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8004628:	9765      	str	r7, [sp, #404]	; 0x194
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800462a:	f7fd fa19 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 800462e:	f24f 0334 	movw	r3, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004632:	a965      	add	r1, sp, #404	; 0x194
 8004634:	4852      	ldr	r0, [pc, #328]	; (8004780 <main+0x2e0>)
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8004636:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004638:	9467      	str	r4, [sp, #412]	; 0x19c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463a:	9468      	str	r4, [sp, #416]	; 0x1a0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800463c:	9566      	str	r5, [sp, #408]	; 0x198
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463e:	f7fd fa0f 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8004642:	f64c 4304 	movw	r3, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004646:	a965      	add	r1, sp, #404	; 0x194
 8004648:	484e      	ldr	r0, [pc, #312]	; (8004784 <main+0x2e4>)
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 800464a:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800464c:	f8cd 9198 	str.w	r9, [sp, #408]	; 0x198
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004650:	9467      	str	r4, [sp, #412]	; 0x19c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004652:	f7fd fa05 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8004656:	f243 0381 	movw	r3, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800465a:	a965      	add	r1, sp, #404	; 0x194
 800465c:	4849      	ldr	r0, [pc, #292]	; (8004784 <main+0x2e4>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800465e:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	9467      	str	r4, [sp, #412]	; 0x19c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004662:	9468      	str	r4, [sp, #416]	; 0x1a0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004664:	9566      	str	r5, [sp, #408]	; 0x198
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004666:	f7fd f9fb 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800466a:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800466e:	a965      	add	r1, sp, #404	; 0x194
 8004670:	4845      	ldr	r0, [pc, #276]	; (8004788 <main+0x2e8>)
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004672:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	9467      	str	r4, [sp, #412]	; 0x19c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004676:	9468      	str	r4, [sp, #416]	; 0x1a0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004678:	9566      	str	r5, [sp, #408]	; 0x198
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800467a:	f7fd f9f1 	bl	8001a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800467e:	f44f 73c0 	mov.w	r3, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004682:	a965      	add	r1, sp, #404	; 0x194
 8004684:	4840      	ldr	r0, [pc, #256]	; (8004788 <main+0x2e8>)
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004686:	9365      	str	r3, [sp, #404]	; 0x194
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004688:	f8cd 9198 	str.w	r9, [sp, #408]	; 0x198
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468c:	9467      	str	r4, [sp, #412]	; 0x19c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468e:	f7fd f9e7 	bl	8001a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8004692:	a965      	add	r1, sp, #404	; 0x194
 8004694:	483b      	ldr	r0, [pc, #236]	; (8004784 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004696:	9467      	str	r4, [sp, #412]	; 0x19c
  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004698:	f04f 0907 	mov.w	r9, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469c:	9668      	str	r6, [sp, #416]	; 0x1a0
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800469e:	f8cd b1a4 	str.w	fp, [sp, #420]	; 0x1a4
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80046a2:	9765      	str	r7, [sp, #404]	; 0x194
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a4:	9766      	str	r7, [sp, #408]	; 0x198
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80046a6:	f7fd f9db 	bl	8001a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80046aa:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046ac:	a965      	add	r1, sp, #404	; 0x194
 80046ae:	4835      	ldr	r0, [pc, #212]	; (8004784 <main+0x2e4>)
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80046b0:	9365      	str	r3, [sp, #404]	; 0x194

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80046b2:	f44f 7a40 	mov.w	sl, #768	; 0x300
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b6:	9467      	str	r4, [sp, #412]	; 0x19c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b8:	9668      	str	r6, [sp, #416]	; 0x1a0
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80046ba:	f8cd 91a4 	str.w	r9, [sp, #420]	; 0x1a4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046be:	9766      	str	r7, [sp, #408]	; 0x198
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046c0:	f7fd f9ce 	bl	8001a60 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046c4:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c6:	9668      	str	r6, [sp, #416]	; 0x1a0
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c8:	a965      	add	r1, sp, #404	; 0x194
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046ca:	2604      	movs	r6, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046cc:	482c      	ldr	r0, [pc, #176]	; (8004780 <main+0x2e0>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046ce:	9366      	str	r3, [sp, #408]	; 0x198
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80046d0:	f8cd a194 	str.w	sl, [sp, #404]	; 0x194
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046d4:	9669      	str	r6, [sp, #420]	; 0x1a4
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046d6:	9567      	str	r5, [sp, #412]	; 0x19c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d8:	f7fd f9c2 	bl	8001a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80046dc:	4622      	mov	r2, r4
 80046de:	4621      	mov	r1, r4
 80046e0:	2017      	movs	r0, #23
 80046e2:	f7fd f8a1 	bl	8001828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80046e6:	2017      	movs	r0, #23
 80046e8:	f7fd f8d2 	bl	8001890 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80046ec:	4621      	mov	r1, r4
 80046ee:	4622      	mov	r2, r4
 80046f0:	2028      	movs	r0, #40	; 0x28
 80046f2:	f7fd f899 	bl	8001828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046f6:	2028      	movs	r0, #40	; 0x28
 80046f8:	f7fd f8ca 	bl	8001890 <HAL_NVIC_EnableIRQ>
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80046fc:	4824      	ldr	r0, [pc, #144]	; (8004790 <main+0x2f0>)
 80046fe:	4b25      	ldr	r3, [pc, #148]	; (8004794 <main+0x2f4>)
 8004700:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8004702:	6206      	str	r6, [r0, #32]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8004704:	f44f 7380 	mov.w	r3, #256	; 0x100
  hi2c2.Instance = I2C2;
 8004708:	4e23      	ldr	r6, [pc, #140]	; (8004798 <main+0x2f8>)
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800470a:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800470c:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800470e:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8004710:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8004712:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8004714:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Offset = 0;
 8004716:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8004718:	6304      	str	r4, [r0, #48]	; 0x30
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800471a:	7105      	strb	r5, [r0, #4]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800471c:	60c7      	str	r7, [r0, #12]
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800471e:	6285      	str	r5, [r0, #40]	; 0x28
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8004720:	f7fd f904 	bl	800192c <HAL_DFSDM_ChannelInit>
  hi2c2.Init.Timing = 0x10909CEC;
 8004724:	4a1d      	ldr	r2, [pc, #116]	; (800479c <main+0x2fc>)
 8004726:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <main+0x300>)
  hi2c2.Init.OwnAddress1 = 0;
 8004728:	60b4      	str	r4, [r6, #8]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800472a:	4630      	mov	r0, r6
  hi2c2.Init.Timing = 0x10909CEC;
 800472c:	e886 000c 	stmia.w	r6, {r2, r3}
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004730:	6134      	str	r4, [r6, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004732:	6174      	str	r4, [r6, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004734:	61b4      	str	r4, [r6, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004736:	61f4      	str	r4, [r6, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004738:	6234      	str	r4, [r6, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800473a:	60f5      	str	r5, [r6, #12]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800473c:	f7fd fc98 	bl	8002070 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004740:	4621      	mov	r1, r4
 8004742:	4630      	mov	r0, r6
 8004744:	f7fd ff9e 	bl	8002684 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004748:	4621      	mov	r1, r4
 800474a:	4630      	mov	r0, r6
 800474c:	f7fd ffc0 	bl	80026d0 <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Init.ClockPrescaler = 255;
 8004750:	4914      	ldr	r1, [pc, #80]	; (80047a4 <main+0x304>)
  hqspi.Instance = QUADSPI;
 8004752:	4815      	ldr	r0, [pc, #84]	; (80047a8 <main+0x308>)
  hqspi.Init.ClockPrescaler = 255;
 8004754:	23ff      	movs	r3, #255	; 0xff
 8004756:	e880 000a 	stmia.w	r0, {r1, r3}
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800475a:	60c4      	str	r4, [r0, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800475c:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800475e:	6184      	str	r4, [r0, #24]
  hqspi.Init.FifoThreshold = 1;
 8004760:	6085      	str	r5, [r0, #8]
  hqspi.Init.FlashSize = 1;
 8004762:	6105      	str	r5, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004764:	f7fe f8e8 	bl	8002938 <HAL_QSPI_Init>
  hspi3.Instance = SPI3;
 8004768:	4810      	ldr	r0, [pc, #64]	; (80047ac <main+0x30c>)
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <main+0x310>)
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800476c:	6084      	str	r4, [r0, #8]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800476e:	f44f 7682 	mov.w	r6, #260	; 0x104
 8004772:	e880 0048 	stmia.w	r0, {r3, r6}
 8004776:	e01f      	b.n	80047b8 <main+0x318>
 8004778:	40021000 	.word	0x40021000
 800477c:	48001000 	.word	0x48001000
 8004780:	48000400 	.word	0x48000400
 8004784:	48000c00 	.word	0x48000c00
 8004788:	48000800 	.word	0x48000800
 800478c:	10210000 	.word	0x10210000
 8004790:	2000080c 	.word	0x2000080c
 8004794:	40016020 	.word	0x40016020
 8004798:	20000cc4 	.word	0x20000cc4
 800479c:	40005800 	.word	0x40005800
 80047a0:	10909cec 	.word	0x10909cec
 80047a4:	a0001000 	.word	0xa0001000
 80047a8:	20000ea4 	.word	0x20000ea4
 80047ac:	20000d10 	.word	0x20000d10
 80047b0:	40003c00 	.word	0x40003c00
 80047b4:	10110000 	.word	0x10110000
  huart1.Instance = USART1;
 80047b8:	4e74      	ldr	r6, [pc, #464]	; (800498c <main+0x4ec>)
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80047ba:	f8c0 a00c 	str.w	sl, [r0, #12]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80047be:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047c2:	6104      	str	r4, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047c4:	6144      	str	r4, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80047c6:	6183      	str	r3, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c8:	61c4      	str	r4, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047ca:	6204      	str	r4, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80047cc:	6244      	str	r4, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047ce:	6284      	str	r4, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80047d0:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80047d4:	6304      	str	r4, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80047d6:	f8c0 8034 	str.w	r8, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80047da:	f7fe ff73 	bl	80036c4 <HAL_SPI_Init>
  huart1.Init.BaudRate = 9600;
 80047de:	4b6c      	ldr	r3, [pc, #432]	; (8004990 <main+0x4f0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047e0:	60b4      	str	r4, [r6, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047e2:	f04f 090c 	mov.w	r9, #12
  huart1.Init.BaudRate = 9600;
 80047e6:	f44f 5a16 	mov.w	sl, #9600	; 0x2580
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047ea:	4630      	mov	r0, r6
  huart1.Init.BaudRate = 9600;
 80047ec:	e886 0408 	stmia.w	r6, {r3, sl}
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047f0:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047f2:	6134      	str	r4, [r6, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047f4:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047f6:	61f4      	str	r4, [r6, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047f8:	6234      	str	r4, [r6, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047fa:	6274      	str	r4, [r6, #36]	; 0x24
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047fc:	f8c6 9014 	str.w	r9, [r6, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004800:	f7ff fc86 	bl	8004110 <HAL_UART_Init>
  huart3.Instance = USART3;
 8004804:	4863      	ldr	r0, [pc, #396]	; (8004994 <main+0x4f4>)
  huart3.Init.BaudRate = 115200;
 8004806:	4b64      	ldr	r3, [pc, #400]	; (8004998 <main+0x4f8>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004808:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 800480a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800480e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004812:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004814:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004816:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004818:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800481a:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800481c:	6244      	str	r4, [r0, #36]	; 0x24
  huart3.Init.Mode = UART_MODE_TX_RX;
 800481e:	f8c0 9014 	str.w	r9, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004822:	f7ff fc75 	bl	8004110 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004826:	485d      	ldr	r0, [pc, #372]	; (800499c <main+0x4fc>)
  htim6.Instance = TIM6;
 8004828:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80049b4 <main+0x514>
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800482c:	6144      	str	r4, [r0, #20]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800482e:	f04f 0c06 	mov.w	ip, #6
 8004832:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004836:	e880 1008 	stmia.w	r0, {r3, ip}
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800483a:	61c4      	str	r4, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800483c:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800483e:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8004840:	6284      	str	r4, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004842:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004844:	62c4      	str	r4, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004846:	60c7      	str	r7, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004848:	6187      	str	r7, [r0, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800484a:	f7fd ff66 	bl	800271a <HAL_PCD_Init>
  htim6.Init.Prescaler = 999;
 800484e:	4b54      	ldr	r3, [pc, #336]	; (80049a0 <main+0x500>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004850:	f8c8 4008 	str.w	r4, [r8, #8]
  htim6.Init.Prescaler = 999;
 8004854:	f240 3be7 	movw	fp, #999	; 0x3e7
 8004858:	e888 0808 	stmia.w	r8, {r3, fp}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800485c:	4640      	mov	r0, r8
  htim6.Init.Period = 40000;
 800485e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004862:	f8c8 300c 	str.w	r3, [r8, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004866:	f8c8 4018 	str.w	r4, [r8, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800486a:	9465      	str	r4, [sp, #404]	; 0x194
 800486c:	9466      	str	r4, [sp, #408]	; 0x198
 800486e:	9467      	str	r4, [sp, #412]	; 0x19c
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004870:	f7ff f8ae 	bl	80039d0 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004874:	a965      	add	r1, sp, #404	; 0x194
 8004876:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004878:	9465      	str	r4, [sp, #404]	; 0x194
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800487a:	9467      	str	r4, [sp, #412]	; 0x19c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800487c:	f7ff f8c2 	bl	8003a04 <HAL_TIMEx_MasterConfigSynchronization>
  huart4.Instance = UART4;
 8004880:	4b48      	ldr	r3, [pc, #288]	; (80049a4 <main+0x504>)
 8004882:	4849      	ldr	r0, [pc, #292]	; (80049a8 <main+0x508>)
static void VL53L0X_PROXIMITY_MspInit(void)
{
  GPIO_InitTypeDef GPIO_InitStruct;

  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8004884:	f04f 0840 	mov.w	r8, #64	; 0x40
  huart4.Init.BaudRate = 9600;
 8004888:	e880 0408 	stmia.w	r0, {r3, sl}
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800488c:	6084      	str	r4, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800488e:	60c4      	str	r4, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004890:	6104      	str	r4, [r0, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004892:	6184      	str	r4, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004894:	61c4      	str	r4, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004896:	6204      	str	r4, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004898:	6244      	str	r4, [r0, #36]	; 0x24
  huart4.Init.Mode = UART_MODE_TX_RX;
 800489a:	f8c0 9014 	str.w	r9, [r0, #20]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800489e:	f7ff fc37 	bl	8004110 <HAL_UART_Init>
  BSP_PSENSOR_Init();
 80048a2:	f7fc fc3d 	bl	8001120 <BSP_PSENSOR_Init>
  BSP_ACCELERO_Init();
 80048a6:	f7fc fbb5 	bl	8001014 <BSP_ACCELERO_Init>
  BSP_TSENSOR_Init();
 80048aa:	f7fc fc55 	bl	8001158 <BSP_TSENSOR_Init>
  BSP_GYRO_Init();
 80048ae:	f7fc fbcf 	bl	8001050 <BSP_GYRO_Init>
  BSP_MAGNETO_Init();
 80048b2:	f7fc fc07 	bl	80010c4 <BSP_MAGNETO_Init>
  BSP_HSENSOR_Init();
 80048b6:	f7fc fbe9 	bl	800108c <BSP_HSENSOR_Init>
  uint16_t vl53l0x_id = 0;
 80048ba:	f8ad 417e 	strh.w	r4, [sp, #382]	; 0x17e
  SENSOR_IO_Init();
 80048be:	f7fc fb57 	bl	8000f70 <SENSOR_IO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 80048c2:	a965      	add	r1, sp, #404	; 0x194
 80048c4:	4839      	ldr	r0, [pc, #228]	; (80049ac <main+0x50c>)
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 80048c6:	f8cd 8194 	str.w	r8, [sp, #404]	; 0x194
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ca:	9566      	str	r5, [sp, #408]	; 0x198
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048cc:	9567      	str	r5, [sp, #412]	; 0x19c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048ce:	9768      	str	r7, [sp, #416]	; 0x1a0
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 80048d0:	f7fd f8c6 	bl	8001a60 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 80048d4:	462a      	mov	r2, r5
 80048d6:	4641      	mov	r1, r8
 80048d8:	4834      	ldr	r0, [pc, #208]	; (80049ac <main+0x50c>)
 80048da:	f7fd fa37 	bl	8001d4c <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 80048de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048e2:	f7fc ff81 	bl	80017e8 <HAL_Delay>
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 80048e6:	4621      	mov	r1, r4
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 80048e8:	4c31      	ldr	r4, [pc, #196]	; (80049b0 <main+0x510>)
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 80048ea:	2263      	movs	r2, #99	; 0x63
 80048ec:	a865      	add	r0, sp, #404	; 0x194
 80048ee:	f002 ffc0 	bl	8007872 <memset>
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 80048f2:	a965      	add	r1, sp, #404	; 0x194
 80048f4:	4620      	mov	r0, r4
 80048f6:	f000 fb69 	bl	8004fcc <VL53L0X_GetDeviceInfo>
 80048fa:	b9e8      	cbnz	r0, 8004938 <main+0x498>
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 80048fc:	f50d 72bf 	add.w	r2, sp, #382	; 0x17e
 8004900:	21c0      	movs	r1, #192	; 0xc0
 8004902:	4620      	mov	r0, r4
 8004904:	f002 fe54 	bl	80075b0 <VL53L0X_RdWord>
 8004908:	b9b0      	cbnz	r0, 8004938 <main+0x498>
      if (vl53l0x_id == VL53L0X_ID)
 800490a:	f8bd 217e 	ldrh.w	r2, [sp, #382]	; 0x17e
 800490e:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 8004912:	429a      	cmp	r2, r3
 8004914:	d110      	bne.n	8004938 <main+0x498>
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 8004916:	4620      	mov	r0, r4
 8004918:	f000 fd38 	bl	800538c <VL53L0X_DataInit>
 800491c:	b960      	cbnz	r0, 8004938 <main+0x498>
          SetupSingleShot(Dev);
 800491e:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8004922:	f104 0110 	add.w	r1, r4, #16
 8004926:	4668      	mov	r0, sp
          Dev.Present = 1;
 8004928:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
          SetupSingleShot(Dev);
 800492c:	f002 ff96 	bl	800785c <memcpy>
 8004930:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004934:	f002 fec0 	bl	80076b8 <SetupSingleShot>
  HAL_TIM_Base_Start_IT(&htim6);
 8004938:	481e      	ldr	r0, [pc, #120]	; (80049b4 <main+0x514>)
	  HUMIDITY = BSP_HSENSOR_ReadHumidity();
 800493a:	4d1f      	ldr	r5, [pc, #124]	; (80049b8 <main+0x518>)
	  TEMPERATURE = BSP_TSENSOR_ReadTemp();
 800493c:	4c1f      	ldr	r4, [pc, #124]	; (80049bc <main+0x51c>)
  HAL_TIM_Base_Start_IT(&htim6);
 800493e:	f7fe ff13 	bl	8003768 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8004942:	6832      	ldr	r2, [r6, #0]
	  PRESSURE = BSP_PSENSOR_ReadPressure();
 8004944:	4e1e      	ldr	r6, [pc, #120]	; (80049c0 <main+0x520>)
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 8004946:	6813      	ldr	r3, [r2, #0]
 8004948:	f043 0320 	orr.w	r3, r3, #32
 800494c:	6013      	str	r3, [r2, #0]
	  PRESSURE = BSP_PSENSOR_ReadPressure();
 800494e:	f7fc fbfb 	bl	8001148 <BSP_PSENSOR_ReadPressure>
 8004952:	ed86 0a00 	vstr	s0, [r6]
	  HUMIDITY = BSP_HSENSOR_ReadHumidity();
 8004956:	f7fc fbad 	bl	80010b4 <BSP_HSENSOR_ReadHumidity>
 800495a:	ed85 0a00 	vstr	s0, [r5]
	  TEMPERATURE = BSP_TSENSOR_ReadTemp();
 800495e:	f7fc fc0d 	bl	800117c <BSP_TSENSOR_ReadTemp>
	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8004962:	4818      	ldr	r0, [pc, #96]	; (80049c4 <main+0x524>)
	  TEMPERATURE = BSP_TSENSOR_ReadTemp();
 8004964:	ed84 0a00 	vstr	s0, [r4]
	  BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8004968:	f7fc fb68 	bl	800103c <BSP_ACCELERO_AccGetXYZ>
	  BSP_GYRO_GetXYZ(pfDataXYZ);
 800496c:	4816      	ldr	r0, [pc, #88]	; (80049c8 <main+0x528>)
 800496e:	f7fc fb83 	bl	8001078 <BSP_GYRO_GetXYZ>
	  BSP_MAGNETO_GetXYZ(pDataXYZ1);
 8004972:	4816      	ldr	r0, [pc, #88]	; (80049cc <main+0x52c>)
 8004974:	f7fc fbca 	bl	800110c <BSP_MAGNETO_GetXYZ>
  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 8004978:	a965      	add	r1, sp, #404	; 0x194
 800497a:	480d      	ldr	r0, [pc, #52]	; (80049b0 <main+0x510>)
 800497c:	f000 ff1b 	bl	80057b6 <VL53L0X_PerformSingleRangingMeasurement>
      prox_value = VL53L0X_PROXIMITY_GetDistance();
 8004980:	4b13      	ldr	r3, [pc, #76]	; (80049d0 <main+0x530>)
  return RangingMeasurementData.RangeMilliMeter;
 8004982:	f8bd 219c 	ldrh.w	r2, [sp, #412]	; 0x19c
      prox_value = VL53L0X_PROXIMITY_GetDistance();
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	e7e1      	b.n	800494e <main+0x4ae>
 800498a:	bf00      	nop
 800498c:	20000d74 	.word	0x20000d74
 8004990:	40013800 	.word	0x40013800
 8004994:	20000844 	.word	0x20000844
 8004998:	40004800 	.word	0x40004800
 800499c:	200008bc 	.word	0x200008bc
 80049a0:	40001000 	.word	0x40001000
 80049a4:	40004c00 	.word	0x40004c00
 80049a8:	20000e2c 	.word	0x20000e2c
 80049ac:	48000800 	.word	0x48000800
 80049b0:	200000c4 	.word	0x200000c4
 80049b4:	20000dec 	.word	0x20000dec
 80049b8:	20000f0c 	.word	0x20000f0c
 80049bc:	20000efc 	.word	0x20000efc
 80049c0:	20000ef0 	.word	0x20000ef0
 80049c4:	20000eea 	.word	0x20000eea
 80049c8:	20000f00 	.word	0x20000f00
 80049cc:	20000ef6 	.word	0x20000ef6
 80049d0:	20000ef4 	.word	0x20000ef4

080049d4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <HAL_MspInit+0x2c>)
 80049d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	661a      	str	r2, [r3, #96]	; 0x60
 80049de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80049e0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e2:	f002 0201 	and.w	r2, r2, #1
 80049e6:	9200      	str	r2, [sp, #0]
 80049e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80049ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049f0:	659a      	str	r2, [r3, #88]	; 0x58
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049fc:	b002      	add	sp, #8
 80049fe:	4770      	bx	lr
 8004a00:	40021000 	.word	0x40021000

08004a04 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8004a04:	b500      	push	{lr}
 8004a06:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a08:	2214      	movs	r2, #20
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	a803      	add	r0, sp, #12
 8004a0e:	f002 ff30 	bl	8007872 <memset>
  if(DFSDM1_Init == 0)
 8004a12:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <HAL_DFSDM_ChannelMspInit+0x5c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	bb03      	cbnz	r3, 8004a5a <HAL_DFSDM_ChannelMspInit+0x56>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004a18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a1c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a20:	a903      	add	r1, sp, #12
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004a22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a24:	480f      	ldr	r0, [pc, #60]	; (8004a64 <HAL_DFSDM_ChannelMspInit+0x60>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004a26:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004a2a:	661a      	str	r2, [r3, #96]	; 0x60
 8004a2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a2e:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8004a32:	9201      	str	r2, [sp, #4]
 8004a34:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a38:	f042 0210 	orr.w	r2, r2, #16
 8004a3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	9302      	str	r3, [sp, #8]
 8004a46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8004a48:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004a4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8004a52:	2306      	movs	r3, #6
 8004a54:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a56:	f7fd f803 	bl	8001a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8004a5a:	b009      	add	sp, #36	; 0x24
 8004a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a60:	20000734 	.word	0x20000734
 8004a64:	48001000 	.word	0x48001000

08004a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a6e:	2214      	movs	r2, #20
 8004a70:	2100      	movs	r1, #0
 8004a72:	a803      	add	r0, sp, #12
 8004a74:	f002 fefd 	bl	8007872 <memset>
  if(hi2c->Instance==I2C2)
 8004a78:	6822      	ldr	r2, [r4, #0]
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <HAL_I2C_MspInit+0x60>)
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d121      	bne.n	8004ac4 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a80:	4c12      	ldr	r4, [pc, #72]	; (8004acc <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a82:	4813      	ldr	r0, [pc, #76]	; (8004ad0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004a86:	f043 0302 	orr.w	r3, r3, #2
 8004a8a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004a8c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8004a96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a9a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a9c:	2312      	movs	r3, #18
 8004a9e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004aaa:	2304      	movs	r3, #4
 8004aac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aae:	f7fc ffd7 	bl	8001a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ab2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ab4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ab8:	65a3      	str	r3, [r4, #88]	; 0x58
 8004aba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac0:	9302      	str	r3, [sp, #8]
 8004ac2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004ac4:	b008      	add	sp, #32
 8004ac6:	bd10      	pop	{r4, pc}
 8004ac8:	40005800 	.word	0x40005800
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	48000400 	.word	0x48000400

08004ad4 <HAL_I2C_MspDeInit>:
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C2)
 8004ad4:	6802      	ldr	r2, [r0, #0]
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <HAL_I2C_MspDeInit+0x20>)
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d109      	bne.n	8004af0 <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004adc:	4a06      	ldr	r2, [pc, #24]	; (8004af8 <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8004ade:	4807      	ldr	r0, [pc, #28]	; (8004afc <HAL_I2C_MspDeInit+0x28>)
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004ae0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004ae2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004ae6:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8004ae8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004aec:	f7fd b894 	b.w	8001c18 <HAL_GPIO_DeInit>
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40005800 	.word	0x40005800
 8004af8:	40021000 	.word	0x40021000
 8004afc:	48000400 	.word	0x48000400

08004b00 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004b00:	b510      	push	{r4, lr}
 8004b02:	4604      	mov	r4, r0
 8004b04:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b06:	2214      	movs	r2, #20
 8004b08:	2100      	movs	r1, #0
 8004b0a:	a803      	add	r0, sp, #12
 8004b0c:	f002 feb1 	bl	8007872 <memset>
  if(hqspi->Instance==QUADSPI)
 8004b10:	6822      	ldr	r2, [r4, #0]
 8004b12:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <HAL_QSPI_MspInit+0x64>)
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d122      	bne.n	8004b5e <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004b18:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8004b1c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b20:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b24:	4810      	ldr	r0, [pc, #64]	; (8004b68 <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b2a:	651a      	str	r2, [r3, #80]	; 0x50
 8004b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b2e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004b32:	9201      	str	r2, [sp, #4]
 8004b34:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b38:	f042 0210 	orr.w	r2, r2, #16
 8004b3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	9302      	str	r3, [sp, #8]
 8004b46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8004b48:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004b4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b52:	2303      	movs	r3, #3
 8004b54:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004b56:	230a      	movs	r3, #10
 8004b58:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b5a:	f7fc ff81 	bl	8001a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004b5e:	b008      	add	sp, #32
 8004b60:	bd10      	pop	{r4, pc}
 8004b62:	bf00      	nop
 8004b64:	a0001000 	.word	0xa0001000
 8004b68:	48001000 	.word	0x48001000

08004b6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b6c:	b510      	push	{r4, lr}
 8004b6e:	4604      	mov	r4, r0
 8004b70:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b72:	2214      	movs	r2, #20
 8004b74:	2100      	movs	r1, #0
 8004b76:	a803      	add	r0, sp, #12
 8004b78:	f002 fe7b 	bl	8007872 <memset>
  if(hspi->Instance==SPI3)
 8004b7c:	6822      	ldr	r2, [r4, #0]
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <HAL_SPI_MspInit+0x60>)
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d120      	bne.n	8004bc6 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004b84:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b88:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004b8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b8c:	4810      	ldr	r0, [pc, #64]	; (8004bd0 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b92:	659a      	str	r2, [r3, #88]	; 0x58
 8004b94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b96:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004b9a:	9201      	str	r2, [sp, #4]
 8004b9c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ba0:	f042 0204 	orr.w	r2, r2, #4
 8004ba4:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	9302      	str	r3, [sp, #8]
 8004bae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8004bb0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004bb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004bbe:	2306      	movs	r3, #6
 8004bc0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bc2:	f7fc ff4d 	bl	8001a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004bc6:	b008      	add	sp, #32
 8004bc8:	bd10      	pop	{r4, pc}
 8004bca:	bf00      	nop
 8004bcc:	40003c00 	.word	0x40003c00
 8004bd0:	48000800 	.word	0x48000800

08004bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004bd4:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <HAL_TIM_Base_MspInit+0x38>)
 8004bd8:	6802      	ldr	r2, [r0, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d112      	bne.n	8004c04 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004bde:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004be2:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004be4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004be6:	f042 0210 	orr.w	r2, r2, #16
 8004bea:	659a      	str	r2, [r3, #88]	; 0x58
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	f003 0310 	and.w	r3, r3, #16
 8004bf2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004bf8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004bfa:	f7fc fe15 	bl	8001828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004bfe:	2036      	movs	r0, #54	; 0x36
 8004c00:	f7fc fe46 	bl	8001890 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004c04:	b003      	add	sp, #12
 8004c06:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c0a:	bf00      	nop
 8004c0c:	40001000 	.word	0x40001000

08004c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c10:	b510      	push	{r4, lr}
 8004c12:	4604      	mov	r4, r0
 8004c14:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c16:	2214      	movs	r2, #20
 8004c18:	2100      	movs	r1, #0
 8004c1a:	a807      	add	r0, sp, #28
 8004c1c:	f002 fe29 	bl	8007872 <memset>
  if(huart->Instance==UART4)
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	4a3c      	ldr	r2, [pc, #240]	; (8004d14 <HAL_UART_MspInit+0x104>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d128      	bne.n	8004c7a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004c28:	4b3b      	ldr	r3, [pc, #236]	; (8004d18 <HAL_UART_MspInit+0x108>)
 8004c2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c2c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004c30:	659a      	str	r2, [r3, #88]	; 0x58
 8004c32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c34:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8004c38:	9201      	str	r2, [sp, #4]
 8004c3a:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c3e:	f042 0201 	orr.w	r2, r2, #1
 8004c42:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	9302      	str	r3, [sp, #8]
 8004c4c:	9b02      	ldr	r3, [sp, #8]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c52:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c54:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c56:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004c58:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004c5e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c60:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c62:	f7fc fefd 	bl	8001a60 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 2, 0);
 8004c66:	2034      	movs	r0, #52	; 0x34
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	f7fc fddc 	bl	8001828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004c70:	2034      	movs	r0, #52	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c72:	f7fc fe0d 	bl	8001890 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004c76:	b00c      	add	sp, #48	; 0x30
 8004c78:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 8004c7a:	4a28      	ldr	r2, [pc, #160]	; (8004d1c <HAL_UART_MspInit+0x10c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d125      	bne.n	8004ccc <HAL_UART_MspInit+0xbc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c80:	4b25      	ldr	r3, [pc, #148]	; (8004d18 <HAL_UART_MspInit+0x108>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c82:	4827      	ldr	r0, [pc, #156]	; (8004d20 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c8a:	661a      	str	r2, [r3, #96]	; 0x60
 8004c8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c8e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004c92:	9203      	str	r2, [sp, #12]
 8004c94:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c98:	f042 0202 	orr.w	r2, r2, #2
 8004c9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	9304      	str	r3, [sp, #16]
 8004ca6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8004ca8:	23c0      	movs	r3, #192	; 0xc0
 8004caa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cac:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cae:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb0:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004cb4:	2307      	movs	r3, #7
 8004cb6:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cba:	f7fc fed1 	bl	8001a60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8004cbe:	2025      	movs	r0, #37	; 0x25
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	f7fc fdb0 	bl	8001828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004cc8:	2025      	movs	r0, #37	; 0x25
 8004cca:	e7d2      	b.n	8004c72 <HAL_UART_MspInit+0x62>
  else if(huart->Instance==USART3)
 8004ccc:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <HAL_UART_MspInit+0x114>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d1d1      	bne.n	8004c76 <HAL_UART_MspInit+0x66>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <HAL_UART_MspInit+0x108>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cd4:	4814      	ldr	r0, [pc, #80]	; (8004d28 <HAL_UART_MspInit+0x118>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cd8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004cdc:	659a      	str	r2, [r3, #88]	; 0x58
 8004cde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ce0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004ce4:	9205      	str	r2, [sp, #20]
 8004ce6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ce8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cea:	f042 0208 	orr.w	r2, r2, #8
 8004cee:	64da      	str	r2, [r3, #76]	; 0x4c
 8004cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	9306      	str	r3, [sp, #24]
 8004cf8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8004cfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004cfe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d00:	2302      	movs	r3, #2
 8004d02:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d04:	2303      	movs	r3, #3
 8004d06:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d08:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d0a:	2307      	movs	r3, #7
 8004d0c:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d0e:	f7fc fea7 	bl	8001a60 <HAL_GPIO_Init>
}
 8004d12:	e7b0      	b.n	8004c76 <HAL_UART_MspInit+0x66>
 8004d14:	40004c00 	.word	0x40004c00
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40013800 	.word	0x40013800
 8004d20:	48000400 	.word	0x48000400
 8004d24:	40004800 	.word	0x40004800
 8004d28:	48000c00 	.word	0x48000c00

08004d2c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d32:	2214      	movs	r2, #20
 8004d34:	2100      	movs	r1, #0
 8004d36:	a803      	add	r0, sp, #12
 8004d38:	f002 fd9b 	bl	8007872 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d42:	d13c      	bne.n	8004dbe <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d44:	4c20      	ldr	r4, [pc, #128]	; (8004dc8 <HAL_PCD_MspInit+0x9c>)
 8004d46:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004d4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004d58:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004d62:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004d64:	f7fc fe7c 	bl	8001a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8004d68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004d6c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d76:	2303      	movs	r3, #3
 8004d78:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004d7c:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004d82:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d84:	f7fc fe6c 	bl	8001a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004d88:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004d8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d8e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004d90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	d410      	bmi.n	8004dc2 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da6:	65a3      	str	r3, [r4, #88]	; 0x58
 8004da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	9302      	str	r3, [sp, #8]
 8004db0:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8004db2:	f7fd fd93 	bl	80028dc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004dbe:	b008      	add	sp, #32
 8004dc0:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8004dc2:	f7fd fd8b 	bl	80028dc <HAL_PWREx_EnableVddUSB>
}
 8004dc6:	e7fa      	b.n	8004dbe <HAL_PCD_MspInit+0x92>
 8004dc8:	40021000 	.word	0x40021000

08004dcc <NMI_Handler>:
 8004dcc:	4770      	bx	lr

08004dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dce:	e7fe      	b.n	8004dce <HardFault_Handler>

08004dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dd0:	e7fe      	b.n	8004dd0 <MemManage_Handler>

08004dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dd2:	e7fe      	b.n	8004dd2 <BusFault_Handler>

08004dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dd4:	e7fe      	b.n	8004dd4 <UsageFault_Handler>

08004dd6 <SVC_Handler>:
 8004dd6:	4770      	bx	lr

08004dd8 <DebugMon_Handler>:
 8004dd8:	4770      	bx	lr

08004dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dda:	4770      	bx	lr

08004ddc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ddc:	f7fc bcf6 	b.w	80017cc <HAL_IncTick>

08004de0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004de0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004de2:	2020      	movs	r0, #32
 8004de4:	f7fc ffb8 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004de8:	2040      	movs	r0, #64	; 0x40
 8004dea:	f7fc ffb5 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004dee:	2080      	movs	r0, #128	; 0x80
 8004df0:	f7fc ffb2 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004df4:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004df8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004dfc:	f7fc bfac 	b.w	8001d58 <HAL_GPIO_EXTI_IRQHandler>

08004e00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e00:	b5d0      	push	{r4, r6, r7, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e02:	483c      	ldr	r0, [pc, #240]	; (8004ef4 <USART1_IRQHandler+0xf4>)
{
 8004e04:	b092      	sub	sp, #72	; 0x48
  HAL_UART_IRQHandler(&huart1);
 8004e06:	f7fe fe3d 	bl	8003a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  RX_BUFF[0] = USART1->RDR;
 8004e0a:	4b3b      	ldr	r3, [pc, #236]	; (8004ef8 <USART1_IRQHandler+0xf8>)
 8004e0c:	4a3b      	ldr	r2, [pc, #236]	; (8004efc <USART1_IRQHandler+0xfc>)
 8004e0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e10:	b2db      	uxtb	r3, r3
  char str[50];

  int16_t DISTANCE = prox_value;

  if(RX_BUFF[0] == 49){/// '1'
 8004e12:	2b31      	cmp	r3, #49	; 0x31
  RX_BUFF[0] = USART1->RDR;
 8004e14:	7013      	strb	r3, [r2, #0]
  if(RX_BUFF[0] == 49){/// '1'
 8004e16:	d115      	bne.n	8004e44 <USART1_IRQHandler+0x44>
	  sprintf(str,"PRESSURE is = %.2f mBar\n\r",PRESSURE);
 8004e18:	4b39      	ldr	r3, [pc, #228]	; (8004f00 <USART1_IRQHandler+0x100>)
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	f7fb fb94 	bl	8000548 <__aeabi_f2d>
 8004e20:	460b      	mov	r3, r1
 8004e22:	4938      	ldr	r1, [pc, #224]	; (8004f04 <USART1_IRQHandler+0x104>)
 8004e24:	4602      	mov	r2, r0
	  HAL_UART_Transmit(&huart1,str, strlen(str),1000);

  }else if(RX_BUFF[0] == 50){/// '2'
	  sprintf(str,"HUMIDITY is = %.2f %%\n\r",HUMIDITY);
 8004e26:	a805      	add	r0, sp, #20
 8004e28:	f003 f9fc 	bl	8008224 <siprintf>


  }
  else if(RX_BUFF[0] == 55){/// '7'
	  sprintf(str,"DISTANCE is %d mm\n\r",DISTANCE);
	  HAL_UART_Transmit(&huart1,str, strlen(str),1000);
 8004e2c:	a805      	add	r0, sp, #20
 8004e2e:	f7fb f9cf 	bl	80001d0 <strlen>
 8004e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e36:	b282      	uxth	r2, r0
 8004e38:	a905      	add	r1, sp, #20


  }

  else{
	  HAL_UART_Transmit(&huart1, "no sensor\n\r", 13,1000);
 8004e3a:	482e      	ldr	r0, [pc, #184]	; (8004ef4 <USART1_IRQHandler+0xf4>)
 8004e3c:	f7ff f8df 	bl	8003ffe <HAL_UART_Transmit>

  }
  /* USER CODE END USART1_IRQn 1 */
}
 8004e40:	b012      	add	sp, #72	; 0x48
 8004e42:	bdd0      	pop	{r4, r6, r7, pc}
  }else if(RX_BUFF[0] == 50){/// '2'
 8004e44:	2b32      	cmp	r3, #50	; 0x32
 8004e46:	d107      	bne.n	8004e58 <USART1_IRQHandler+0x58>
	  sprintf(str,"HUMIDITY is = %.2f %%\n\r",HUMIDITY);
 8004e48:	4b2f      	ldr	r3, [pc, #188]	; (8004f08 <USART1_IRQHandler+0x108>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	f7fb fb7c 	bl	8000548 <__aeabi_f2d>
 8004e50:	460b      	mov	r3, r1
 8004e52:	4602      	mov	r2, r0
 8004e54:	492d      	ldr	r1, [pc, #180]	; (8004f0c <USART1_IRQHandler+0x10c>)
 8004e56:	e7e6      	b.n	8004e26 <USART1_IRQHandler+0x26>
  }else if(RX_BUFF[0] == 51){/// '3'
 8004e58:	2b33      	cmp	r3, #51	; 0x33
 8004e5a:	d107      	bne.n	8004e6c <USART1_IRQHandler+0x6c>
	  sprintf(str,"TEMPERATURE is = %.2f *C\n\r",TEMPERATURE);
 8004e5c:	4b2c      	ldr	r3, [pc, #176]	; (8004f10 <USART1_IRQHandler+0x110>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	f7fb fb72 	bl	8000548 <__aeabi_f2d>
 8004e64:	460b      	mov	r3, r1
 8004e66:	4602      	mov	r2, r0
 8004e68:	492a      	ldr	r1, [pc, #168]	; (8004f14 <USART1_IRQHandler+0x114>)
 8004e6a:	e7dc      	b.n	8004e26 <USART1_IRQHandler+0x26>
  else if(RX_BUFF[0] == 52){/// '4'
 8004e6c:	2b34      	cmp	r3, #52	; 0x34
 8004e6e:	d10c      	bne.n	8004e8a <USART1_IRQHandler+0x8a>
	  int accY = pDataXYZ[1];
 8004e70:	4929      	ldr	r1, [pc, #164]	; (8004f18 <USART1_IRQHandler+0x118>)
 8004e72:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
	  int accX = pDataXYZ[0];
 8004e76:	f9b1 2000 	ldrsh.w	r2, [r1]
	  int accZ = pDataXYZ[2];
 8004e7a:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8004e7e:	9100      	str	r1, [sp, #0]
	  sprintf(str,"ACCELERO xyz = %d, %d, %d\n\r",accX,accY,accZ);
 8004e80:	4926      	ldr	r1, [pc, #152]	; (8004f1c <USART1_IRQHandler+0x11c>)
	  sprintf(str,"MAGNETO xyz = %d, %d, %d\n\r",magX,magY,magZ);
 8004e82:	a805      	add	r0, sp, #20
 8004e84:	f003 f9ce 	bl	8008224 <siprintf>
 8004e88:	e7d0      	b.n	8004e2c <USART1_IRQHandler+0x2c>
  else if(RX_BUFF[0] == 53){/// '5'
 8004e8a:	2b35      	cmp	r3, #53	; 0x35
 8004e8c:	d116      	bne.n	8004ebc <USART1_IRQHandler+0xbc>
	  float gyrX = pfDataXYZ[0];
 8004e8e:	4c24      	ldr	r4, [pc, #144]	; (8004f20 <USART1_IRQHandler+0x120>)
	  sprintf(str,"GYRO xyz = %.2f, %.2f, %.2f\n\r",gyrX,gyrY,gyrZ);
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	f7fb fb59 	bl	8000548 <__aeabi_f2d>
 8004e96:	4606      	mov	r6, r0
 8004e98:	68a0      	ldr	r0, [r4, #8]
 8004e9a:	460f      	mov	r7, r1
 8004e9c:	f7fb fb54 	bl	8000548 <__aeabi_f2d>
 8004ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ea4:	6860      	ldr	r0, [r4, #4]
 8004ea6:	f7fb fb4f 	bl	8000548 <__aeabi_f2d>
 8004eaa:	4632      	mov	r2, r6
 8004eac:	e9cd 0100 	strd	r0, r1, [sp]
 8004eb0:	463b      	mov	r3, r7
 8004eb2:	491c      	ldr	r1, [pc, #112]	; (8004f24 <USART1_IRQHandler+0x124>)
 8004eb4:	a805      	add	r0, sp, #20
 8004eb6:	f003 f9b5 	bl	8008224 <siprintf>
 8004eba:	e7b7      	b.n	8004e2c <USART1_IRQHandler+0x2c>
  else if(RX_BUFF[0] == 54){/// '6'
 8004ebc:	2b36      	cmp	r3, #54	; 0x36
 8004ebe:	d109      	bne.n	8004ed4 <USART1_IRQHandler+0xd4>
	  int magY = pDataXYZ1[1];
 8004ec0:	4919      	ldr	r1, [pc, #100]	; (8004f28 <USART1_IRQHandler+0x128>)
 8004ec2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
	  int magX = pDataXYZ1[0];
 8004ec6:	f9b1 2000 	ldrsh.w	r2, [r1]
	  int magZ = pDataXYZ1[2];
 8004eca:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8004ece:	9100      	str	r1, [sp, #0]
	  sprintf(str,"MAGNETO xyz = %d, %d, %d\n\r",magX,magY,magZ);
 8004ed0:	4916      	ldr	r1, [pc, #88]	; (8004f2c <USART1_IRQHandler+0x12c>)
 8004ed2:	e7d6      	b.n	8004e82 <USART1_IRQHandler+0x82>
  else if(RX_BUFF[0] == 55){/// '7'
 8004ed4:	2b37      	cmp	r3, #55	; 0x37
 8004ed6:	d107      	bne.n	8004ee8 <USART1_IRQHandler+0xe8>
	  sprintf(str,"DISTANCE is %d mm\n\r",DISTANCE);
 8004ed8:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <USART1_IRQHandler+0x130>)
 8004eda:	4916      	ldr	r1, [pc, #88]	; (8004f34 <USART1_IRQHandler+0x134>)
 8004edc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004ee0:	a805      	add	r0, sp, #20
 8004ee2:	f003 f99f 	bl	8008224 <siprintf>
 8004ee6:	e7a1      	b.n	8004e2c <USART1_IRQHandler+0x2c>
	  HAL_UART_Transmit(&huart1, "no sensor\n\r", 13,1000);
 8004ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eec:	220d      	movs	r2, #13
 8004eee:	4912      	ldr	r1, [pc, #72]	; (8004f38 <USART1_IRQHandler+0x138>)
 8004ef0:	e7a3      	b.n	8004e3a <USART1_IRQHandler+0x3a>
 8004ef2:	bf00      	nop
 8004ef4:	20000d74 	.word	0x20000d74
 8004ef8:	40013800 	.word	0x40013800
 8004efc:	20000ee8 	.word	0x20000ee8
 8004f00:	20000ef0 	.word	0x20000ef0
 8004f04:	0800a1b1 	.word	0x0800a1b1
 8004f08:	20000f0c 	.word	0x20000f0c
 8004f0c:	0800a1cb 	.word	0x0800a1cb
 8004f10:	20000efc 	.word	0x20000efc
 8004f14:	0800a1e3 	.word	0x0800a1e3
 8004f18:	20000eea 	.word	0x20000eea
 8004f1c:	0800a1fe 	.word	0x0800a1fe
 8004f20:	20000f00 	.word	0x20000f00
 8004f24:	0800a21a 	.word	0x0800a21a
 8004f28:	20000ef6 	.word	0x20000ef6
 8004f2c:	0800a238 	.word	0x0800a238
 8004f30:	20000ef4 	.word	0x20000ef4
 8004f34:	0800a253 	.word	0x0800a253
 8004f38:	0800a267 	.word	0x0800a267

08004f3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004f3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004f42:	f7fc ff09 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004f46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f4a:	f7fc ff05 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004f4e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004f52:	f7fc ff01 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004f56:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f5a:	f7fc fefd 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004f5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004f66:	f7fc bef7 	b.w	8001d58 <HAL_GPIO_EXTI_IRQHandler>
	...

08004f6c <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004f6c:	4801      	ldr	r0, [pc, #4]	; (8004f74 <UART4_IRQHandler+0x8>)
 8004f6e:	f7fe bd89 	b.w	8003a84 <HAL_UART_IRQHandler>
 8004f72:	bf00      	nop
 8004f74:	20000e2c 	.word	0x20000e2c

08004f78 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004f78:	4801      	ldr	r0, [pc, #4]	; (8004f80 <TIM6_DAC_IRQHandler+0x8>)
 8004f7a:	f7fe bc12 	b.w	80037a2 <HAL_TIM_IRQHandler>
 8004f7e:	bf00      	nop
 8004f80:	20000dec 	.word	0x20000dec

08004f84 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f84:	490f      	ldr	r1, [pc, #60]	; (8004fc4 <SystemInit+0x40>)
 8004f86:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004f8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004f92:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <SystemInit+0x44>)
 8004f94:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004f96:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8004f9e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8004fa6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004faa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fb0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004fba:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004fbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fc0:	608b      	str	r3, [r1, #8]
 8004fc2:	4770      	bx	lr
 8004fc4:	e000ed00 	.word	0xe000ed00
 8004fc8:	40021000 	.word	0x40021000

08004fcc <VL53L0X_GetDeviceInfo>:
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8004fcc:	f002 ba46 	b.w	800745c <VL53L0X_get_device_info>

08004fd0 <VL53L0X_SetDeviceMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004fd0:	2915      	cmp	r1, #21
 8004fd2:	d807      	bhi.n	8004fe4 <VL53L0X_SetDeviceMode+0x14>
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <VL53L0X_SetDeviceMode+0x1c>)
 8004fd8:	408a      	lsls	r2, r1
 8004fda:	4013      	ands	r3, r2
 8004fdc:	b113      	cbz	r3, 8004fe4 <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8004fde:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fe0:	2000      	movs	r0, #0
		break;
 8004fe2:	4770      	bx	lr
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004fe4:	f06f 0007 	mvn.w	r0, #7
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	0030000b 	.word	0x0030000b

08004ff0 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8004ff0:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8004ff2:	460a      	mov	r2, r1
{
 8004ff4:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8004ff6:	2109      	movs	r1, #9
 8004ff8:	f002 fa91 	bl	800751e <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 8004ffc:	b918      	cbnz	r0, 8005006 <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 8004ffe:	7823      	ldrb	r3, [r4, #0]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005006:	bd10      	pop	{r4, pc}

08005008 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005008:	f001 be7a 	b.w	8006d00 <VL53L0X_set_measurement_timing_budget_micro_seconds>

0800500c <VL53L0X_SetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800500c:	f001 bd54 	b.w	8006ab8 <VL53L0X_set_vcsel_pulse_period>

08005010 <VL53L0X_GetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005010:	f001 be5d 	b.w	8006cce <VL53L0X_get_vcsel_pulse_period>

08005014 <VL53L0X_SetSequenceStepEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005016:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8005018:	aa02      	add	r2, sp, #8
 800501a:	2300      	movs	r3, #0
{
 800501c:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 800501e:	f802 3d01 	strb.w	r3, [r2, #-1]!
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005022:	2101      	movs	r1, #1
{
 8005024:	4606      	mov	r6, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005026:	f002 fa7a 	bl	800751e <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 800502a:	4605      	mov	r5, r0
 800502c:	b9d8      	cbnz	r0, 8005066 <VL53L0X_SetSequenceStepEnable+0x52>
		if (SequenceStepEnabled == 1) {
 800502e:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
 8005030:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 8005034:	d126      	bne.n	8005084 <VL53L0X_SetSequenceStepEnable+0x70>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005036:	2c04      	cmp	r4, #4
 8005038:	d83a      	bhi.n	80050b0 <VL53L0X_SetSequenceStepEnable+0x9c>
 800503a:	e8df f004 	tbb	[pc, r4]
 800503e:	1703      	.short	0x1703
 8005040:	1d1a      	.short	0x1d1a
 8005042:	20          	.byte	0x20
 8005043:	00          	.byte	0x00
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005044:	f043 0410 	orr.w	r4, r3, #16
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005048:	42a3      	cmp	r3, r4
 800504a:	d00c      	beq.n	8005066 <VL53L0X_SetSequenceStepEnable+0x52>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 800504c:	4622      	mov	r2, r4
 800504e:	2101      	movs	r1, #1
 8005050:	4630      	mov	r0, r6
 8005052:	f002 faf3 	bl	800763c <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005056:	4605      	mov	r5, r0
 8005058:	b928      	cbnz	r0, 8005066 <VL53L0X_SetSequenceStepEnable+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800505a:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800505e:	6971      	ldr	r1, [r6, #20]
 8005060:	4630      	mov	r0, r6
 8005062:	f7ff ffd1 	bl	8005008 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8005066:	4628      	mov	r0, r5
 8005068:	b003      	add	sp, #12
 800506a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 800506c:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
 8005070:	e7ea      	b.n	8005048 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x04;
 8005072:	f043 0404 	orr.w	r4, r3, #4
				break;
 8005076:	e7e7      	b.n	8005048 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x40;
 8005078:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
 800507c:	e7e4      	b.n	8005048 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x80;
 800507e:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
 8005082:	e7e1      	b.n	8005048 <VL53L0X_SetSequenceStepEnable+0x34>
			switch (SequenceStepId) {
 8005084:	2c04      	cmp	r4, #4
 8005086:	d813      	bhi.n	80050b0 <VL53L0X_SetSequenceStepEnable+0x9c>
 8005088:	e8df f004 	tbb	[pc, r4]
 800508c:	0c090603 	.word	0x0c090603
 8005090:	0f          	.byte	0x0f
 8005091:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 8005092:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
 8005096:	e7d7      	b.n	8005048 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xd7;
 8005098:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
 800509c:	e7d4      	b.n	8005048 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xfb;
 800509e:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
 80050a2:	e7d1      	b.n	8005048 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xbf;
 80050a4:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
 80050a8:	e7ce      	b.n	8005048 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0x7f;
 80050aa:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
 80050ae:	e7cb      	b.n	8005048 <VL53L0X_SetSequenceStepEnable+0x34>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80050b0:	f06f 0503 	mvn.w	r5, #3
 80050b4:	e7d7      	b.n	8005066 <VL53L0X_SetSequenceStepEnable+0x52>

080050b6 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80050b6:	b513      	push	{r0, r1, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 80050b8:	aa02      	add	r2, sp, #8
 80050ba:	2300      	movs	r3, #0
{
 80050bc:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 80050be:	f802 3d01 	strb.w	r3, [r2, #-1]!
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80050c2:	2101      	movs	r1, #1
 80050c4:	f002 fa2b 	bl	800751e <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80050c8:	b978      	cbnz	r0, 80050ea <VL53L0X_GetSequenceStepEnables+0x34>
		Status = sequence_step_enabled(Dev,
 80050ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80050ce:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80050d2:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80050d4:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80050d8:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80050da:	f3c3 0280 	ubfx	r2, r3, #2, #1
 80050de:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80050e0:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80050e4:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80050e6:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80050e8:	7123      	strb	r3, [r4, #4]
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80050ea:	b002      	add	sp, #8
 80050ec:	bd10      	pop	{r4, pc}

080050ee <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 80050ee:	b513      	push	{r0, r1, r4, lr}
 80050f0:	4614      	mov	r4, r2
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
	uint32_t Fraction_ms = 0;
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 80050f2:	aa01      	add	r2, sp, #4
 80050f4:	f001 fbd4 	bl	80068a0 <get_sequence_step_timeout>
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 80050f8:	b978      	cbnz	r0, 800511a <VL53L0X_GetSequenceStepTimeout+0x2c>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 80050fa:	9b01      	ldr	r3, [sp, #4]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 80050fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005100:	fbb3 f1f2 	udiv	r1, r3, r2
 8005104:	fb02 3311 	mls	r3, r2, r1, r3
 8005108:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 800510c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005110:	fbb3 f3f2 	udiv	r3, r3, r2
 8005114:	eb03 4301 	add.w	r3, r3, r1, lsl #16
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8005118:	6023      	str	r3, [r4, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800511a:	b002      	add	sp, #8
 800511c:	bd10      	pop	{r4, pc}

0800511e <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800511e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005120:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005122:	f10d 0202 	add.w	r2, sp, #2
 8005126:	21f8      	movs	r1, #248	; 0xf8
{
 8005128:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800512a:	f002 fa41 	bl	80075b0 <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800512e:	b970      	cbnz	r0, 800514e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 8005130:	aa01      	add	r2, sp, #4
 8005132:	2104      	movs	r1, #4
 8005134:	4620      	mov	r0, r4
 8005136:	f002 fa5b 	bl	80075f0 <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800513a:	b940      	cbnz	r0, 800514e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 800513c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005140:	b11a      	cbz	r2, 800514a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005142:	9b01      	ldr	r3, [sp, #4]
 8005144:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005148:	602b      	str	r3, [r5, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800514a:	682b      	ldr	r3, [r5, #0]
 800514c:	61a3      	str	r3, [r4, #24]
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800514e:	b003      	add	sp, #12
 8005150:	bd30      	pop	{r4, r5, pc}

08005152 <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005152:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 8005154:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005156:	2000      	movs	r0, #0
 8005158:	4770      	bx	lr

0800515a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800515a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800515c:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800515e:	f10d 0206 	add.w	r2, sp, #6
 8005162:	2120      	movs	r1, #32
{
 8005164:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 8005166:	f002 fa23 	bl	80075b0 <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800516a:	b928      	cbnz	r0, 8005178 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 800516c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005170:	b923      	cbnz	r3, 800517c <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005172:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005174:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005176:	7720      	strb	r0, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005178:	b003      	add	sp, #12
 800517a:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800517c:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800517e:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005180:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005182:	2301      	movs	r3, #1
 8005184:	7723      	strb	r3, [r4, #28]
 8005186:	e7f7      	b.n	8005178 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

08005188 <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005188:	2905      	cmp	r1, #5
{
 800518a:	b570      	push	{r4, r5, r6, lr}
 800518c:	4604      	mov	r4, r0
 800518e:	460d      	mov	r5, r1
 8005190:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005192:	d832      	bhi.n	80051fa <VL53L0X_SetLimitCheckEnable+0x72>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 8005194:	b3a2      	cbz	r2, 8005200 <VL53L0X_SetLimitCheckEnable+0x78>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005196:	eb00 0381 	add.w	r3, r0, r1, lsl #2
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800519a:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800519c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
 800519e:	2300      	movs	r3, #0
		}

		switch (LimitCheckId) {
 80051a0:	1e68      	subs	r0, r5, #1
 80051a2:	2804      	cmp	r0, #4
 80051a4:	d804      	bhi.n	80051b0 <VL53L0X_SetLimitCheckEnable+0x28>
 80051a6:	e8df f000 	tbb	[pc, r0]
 80051aa:	140b      	.short	0x140b
 80051ac:	1a17      	.short	0x1a17
 80051ae:	21          	.byte	0x21
 80051af:	00          	.byte	0x00

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80051b0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80051b4:	442c      	add	r4, r5
		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (LimitCheckEnable == 0) {
 80051b6:	b9e6      	cbnz	r6, 80051f2 <VL53L0X_SetLimitCheckEnable+0x6a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80051b8:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80051bc:	2000      	movs	r0, #0
 80051be:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 80051c0:	f3c2 224f 	ubfx	r2, r2, #9, #16
 80051c4:	2144      	movs	r1, #68	; 0x44
 80051c6:	4620      	mov	r0, r4
 80051c8:	f002 fa48 	bl	800765c <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d0f1      	beq.n	80051b4 <VL53L0X_SetLimitCheckEnable+0x2c>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80051d0:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80051d2:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
			break;
 80051d6:	e7ed      	b.n	80051b4 <VL53L0X_SetLimitCheckEnable+0x2c>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80051d8:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
			break;
 80051dc:	e7ea      	b.n	80051b4 <VL53L0X_SetLimitCheckEnable+0x2c>
			Status = VL53L0X_UpdateByte(Dev,
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
 80051e2:	2160      	movs	r1, #96	; 0x60
 80051e4:	4620      	mov	r0, r4
 80051e6:	f002 fa4b 	bl	8007680 <VL53L0X_UpdateByte>
			break;
 80051ea:	e7ef      	b.n	80051cc <VL53L0X_SetLimitCheckEnable+0x44>
			Status = VL53L0X_UpdateByte(Dev,
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	22ef      	movs	r2, #239	; 0xef
 80051f0:	e7f7      	b.n	80051e2 <VL53L0X_SetLimitCheckEnable+0x5a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80051f2:	2301      	movs	r3, #1
 80051f4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80051f8:	e7e0      	b.n	80051bc <VL53L0X_SetLimitCheckEnable+0x34>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80051fa:	f06f 0003 	mvn.w	r0, #3
	return Status;
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckEnableInt = 0;
 8005200:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 8005202:	2301      	movs	r3, #1
 8005204:	e7cc      	b.n	80051a0 <VL53L0X_SetLimitCheckEnable+0x18>

08005206 <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005206:	2905      	cmp	r1, #5
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005208:	bf8c      	ite	hi
 800520a:	f06f 0003 	mvnhi.w	r0, #3
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800520e:	1840      	addls	r0, r0, r1
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	bf97      	itett	ls
 8005216:	f890 1028 	ldrbls.w	r1, [r0, #40]	; 0x28
		*pLimitCheckEnable = 0;
 800521a:	7013      	strbhi	r3, [r2, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800521c:	7011      	strbls	r1, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800521e:	4618      	movls	r0, r3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005220:	4770      	bx	lr

08005222 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005222:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005224:	1843      	adds	r3, r0, r1
{
 8005226:	4604      	mov	r4, r0
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005228:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
 800522c:	460e      	mov	r6, r1
 800522e:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 8005230:	b918      	cbnz	r0, 800523a <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005232:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005236:	6362      	str	r2, [r4, #52]	; 0x34
 8005238:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800523a:	2905      	cmp	r1, #5
 800523c:	d81b      	bhi.n	8005276 <VL53L0X_SetLimitCheckValue+0x54>
 800523e:	e8df f001 	tbb	[pc, r1]
 8005242:	0903      	.short	0x0903
 8005244:	16161412 	.word	0x16161412

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005248:	6362      	str	r2, [r4, #52]	; 0x34
			Status = VL53L0X_ERROR_INVALID_PARAMS;

		}

		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800524a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800524e:	2000      	movs	r0, #0
 8005250:	6365      	str	r5, [r4, #52]	; 0x34
 8005252:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 8005254:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005258:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
 800525a:	4620      	mov	r0, r4
 800525c:	f002 f9fe 	bl	800765c <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 8005260:	2800      	cmp	r0, #0
 8005262:	d0f2      	beq.n	800524a <VL53L0X_SetLimitCheckValue+0x28>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005264:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005266:	63e2      	str	r2, [r4, #60]	; 0x3c
			break;
 8005268:	e7ef      	b.n	800524a <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800526a:	6422      	str	r2, [r4, #64]	; 0x40
			break;
 800526c:	e7ed      	b.n	800524a <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
 800526e:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005272:	2164      	movs	r1, #100	; 0x64
 8005274:	e7f1      	b.n	800525a <VL53L0X_SetLimitCheckValue+0x38>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005276:	f06f 0003 	mvn.w	r0, #3
 800527a:	e7f3      	b.n	8005264 <VL53L0X_SetLimitCheckValue+0x42>

0800527c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800527c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800527e:	4604      	mov	r4, r0
 8005280:	4615      	mov	r5, r2
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8005282:	2905      	cmp	r1, #5
 8005284:	d82c      	bhi.n	80052e0 <VL53L0X_GetLimitCheckValue+0x64>
 8005286:	e8df f001 	tbb	[pc, r1]
 800528a:	0703      	.short	0x0703
 800528c:	1b1b1917 	.word	0x1b1b1917

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005290:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005292:	602b      	str	r3, [r5, #0]
 8005294:	2000      	movs	r0, #0
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005296:	e021      	b.n	80052dc <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
 8005298:	f10d 0206 	add.w	r2, sp, #6
 800529c:	2144      	movs	r1, #68	; 0x44
 800529e:	f002 f987 	bl	80075b0 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 80052a2:	b9d8      	cbnz	r0, 80052dc <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80052a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 80052a8:	0253      	lsls	r3, r2, #9
 80052aa:	b19a      	cbz	r2, 80052d4 <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
 80052ac:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80052ae:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80052b0:	2301      	movs	r3, #1
 80052b2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80052b6:	e011      	b.n	80052dc <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80052b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		break;
 80052ba:	e7ea      	b.n	8005292 <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80052bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
		break;
 80052be:	e7e8      	b.n	8005292 <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 80052c0:	f10d 0206 	add.w	r2, sp, #6
 80052c4:	2164      	movs	r1, #100	; 0x64
 80052c6:	f002 f973 	bl	80075b0 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 80052ca:	b938      	cbnz	r0, 80052dc <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80052cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80052d0:	025b      	lsls	r3, r3, #9
 80052d2:	e7de      	b.n	8005292 <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80052d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 80052d6:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80052d8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29

}
 80052dc:	b003      	add	sp, #12
 80052de:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80052e0:	f06f 0003 	mvn.w	r0, #3
 80052e4:	e7fa      	b.n	80052dc <VL53L0X_GetLimitCheckValue+0x60>

080052e6 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80052e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052e8:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80052ea:	f10d 0207 	add.w	r2, sp, #7
 80052ee:	2101      	movs	r1, #1
{
 80052f0:	4605      	mov	r5, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80052f2:	f002 f914 	bl	800751e <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 80052f6:	b958      	cbnz	r0, 8005310 <VL53L0X_GetWrapAroundCheckEnable+0x2a>
		PALDevDataSet(Dev, SequenceConfig, data);
 80052f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052fc:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		if (data & (0x01 << 7))
 8005300:	061b      	lsls	r3, r3, #24
			*pWrapAroundCheckEnable = 0x01;
 8005302:	bf46      	itte	mi
 8005304:	2301      	movmi	r3, #1
 8005306:	7023      	strbmi	r3, [r4, #0]
		else
			*pWrapAroundCheckEnable = 0x00;
 8005308:	7020      	strbpl	r0, [r4, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800530a:	7823      	ldrb	r3, [r4, #0]
 800530c:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005310:	b003      	add	sp, #12
 8005312:	bd30      	pop	{r4, r5, pc}

08005314 <VL53L0X_GetDeviceParameters>:
{
 8005314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005318:	7c03      	ldrb	r3, [r0, #16]
{
 800531a:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800531c:	f801 3b08 	strb.w	r3, [r1], #8
{
 8005320:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005322:	f7ff fefc 	bl	800511e <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8005326:	bb40      	cbnz	r0, 800537a <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005328:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800532a:	f104 0110 	add.w	r1, r4, #16
 800532e:	4628      	mov	r0, r5
 8005330:	f7ff ff13 	bl	800515a <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 8005334:	bb08      	cbnz	r0, 800537a <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005336:	f104 0114 	add.w	r1, r4, #20
 800533a:	4628      	mov	r0, r5
 800533c:	f000 fc03 	bl	8005b46 <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 8005340:	b9d8      	cbnz	r0, 800537a <VL53L0X_GetDeviceParameters+0x66>
 8005342:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8005346:	f105 0928 	add.w	r9, r5, #40	; 0x28
 800534a:	f104 0818 	add.w	r8, r4, #24
 800534e:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005350:	463a      	mov	r2, r7
 8005352:	b2b1      	uxth	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	f7ff ff91 	bl	800527c <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 800535a:	b970      	cbnz	r0, 800537a <VL53L0X_GetDeviceParameters+0x66>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800535c:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800535e:	f819 3b01 	ldrb.w	r3, [r9], #1
		*pLimitCheckEnable = Temp8;
 8005362:	f808 3b01 	strb.w	r3, [r8], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005366:	2e06      	cmp	r6, #6
 8005368:	f107 0704 	add.w	r7, r7, #4
 800536c:	d1f0      	bne.n	8005350 <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800536e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005372:	4628      	mov	r0, r5
 8005374:	f7ff ffb7 	bl	80052e6 <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8005378:	b108      	cbz	r0, 800537e <VL53L0X_GetDeviceParameters+0x6a>
}
 800537a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800537e:	1d21      	adds	r1, r4, #4
 8005380:	4628      	mov	r0, r5
}
 8005382:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005386:	f001 bd1c 	b.w	8006dc2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
	...

0800538c <VL53L0X_DataInit>:
{
 800538c:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800538e:	2200      	movs	r2, #0
{
 8005390:	4605      	mov	r5, r0
 8005392:	b091      	sub	sp, #68	; 0x44
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005394:	2188      	movs	r1, #136	; 0x88
 8005396:	f002 f951 	bl	800763c <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800539a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800539e:	f8a5 214e 	strh.w	r2, [r5, #334]	; 0x14e
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80053a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80053a6:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80053aa:	4a41      	ldr	r2, [pc, #260]	; (80054b0 <VL53L0X_DataInit+0x124>)
 80053ac:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80053b0:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80053b2:	4a40      	ldr	r2, [pc, #256]	; (80054b4 <VL53L0X_DataInit+0x128>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80053b4:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80053b8:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80053bc:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80053be:	4669      	mov	r1, sp
 80053c0:	4628      	mov	r0, r5
 80053c2:	f7ff ffa7 	bl	8005314 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 80053c6:	4604      	mov	r4, r0
 80053c8:	b980      	cbnz	r0, 80053ec <VL53L0X_DataInit+0x60>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80053ca:	f88d 0000 	strb.w	r0, [sp]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80053ce:	f88d 0001 	strb.w	r0, [sp, #1]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80053d2:	466e      	mov	r6, sp
 80053d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80053d6:	f105 0710 	add.w	r7, r5, #16
 80053da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80053dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80053de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80053e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80053e2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80053e4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80053e8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80053ec:	2364      	movs	r3, #100	; 0x64
 80053ee:	f8a5 3134 	strh.w	r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80053f2:	f44f 7361 	mov.w	r3, #900	; 0x384
 80053f6:	f8a5 3136 	strh.w	r3, [r5, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80053fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80053fe:	f8a5 3138 	strh.w	r3, [r5, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005402:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005406:	f8a5 313a 	strh.w	r3, [r5, #314]	; 0x13a
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800540a:	2301      	movs	r3, #1
 800540c:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005410:	2600      	movs	r6, #0
		if (Status == VL53L0X_ERROR_NONE)
 8005412:	2c00      	cmp	r4, #0
 8005414:	d149      	bne.n	80054aa <VL53L0X_DataInit+0x11e>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005416:	b2b1      	uxth	r1, r6
 8005418:	2201      	movs	r2, #1
 800541a:	4628      	mov	r0, r5
 800541c:	f7ff feb4 	bl	8005188 <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005420:	3601      	adds	r6, #1
 8005422:	2e06      	cmp	r6, #6
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005424:	4604      	mov	r4, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005426:	d1f4      	bne.n	8005412 <VL53L0X_DataInit+0x86>
	if (Status == VL53L0X_ERROR_NONE)
 8005428:	bbf8      	cbnz	r0, 80054aa <VL53L0X_DataInit+0x11e>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800542a:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800542e:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005432:	4602      	mov	r2, r0
 8005434:	2104      	movs	r1, #4
 8005436:	4628      	mov	r0, r5
 8005438:	f7ff fea6 	bl	8005188 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 800543c:	4604      	mov	r4, r0
 800543e:	bba0      	cbnz	r0, 80054aa <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005440:	4602      	mov	r2, r0
 8005442:	2105      	movs	r1, #5
 8005444:	4628      	mov	r0, r5
 8005446:	f7ff fe9f 	bl	8005188 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 800544a:	4604      	mov	r4, r0
 800544c:	bb68      	cbnz	r0, 80054aa <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800544e:	4601      	mov	r1, r0
 8005450:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005454:	4628      	mov	r0, r5
 8005456:	f7ff fee4 	bl	8005222 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 800545a:	4604      	mov	r4, r0
 800545c:	bb28      	cbnz	r0, 80054aa <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800545e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005462:	2101      	movs	r1, #1
 8005464:	4628      	mov	r0, r5
 8005466:	f7ff fedc 	bl	8005222 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 800546a:	4604      	mov	r4, r0
 800546c:	b9e8      	cbnz	r0, 80054aa <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800546e:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005472:	2102      	movs	r1, #2
 8005474:	4628      	mov	r0, r5
 8005476:	f7ff fed4 	bl	8005222 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 800547a:	4604      	mov	r4, r0
 800547c:	b9a8      	cbnz	r0, 80054aa <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800547e:	4602      	mov	r2, r0
 8005480:	2103      	movs	r1, #3
 8005482:	4628      	mov	r0, r5
 8005484:	f7ff fecd 	bl	8005222 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8005488:	4604      	mov	r4, r0
 800548a:	b970      	cbnz	r0, 80054aa <VL53L0X_DataInit+0x11e>
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800548c:	22ff      	movs	r2, #255	; 0xff
 800548e:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005492:	2101      	movs	r1, #1
 8005494:	4628      	mov	r0, r5
 8005496:	f002 f8d1 	bl	800763c <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800549a:	2301      	movs	r3, #1
 800549c:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 80054a0:	4604      	mov	r4, r0
 80054a2:	b910      	cbnz	r0, 80054aa <VL53L0X_DataInit+0x11e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80054a4:	2300      	movs	r3, #0
 80054a6:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
}
 80054aa:	4620      	mov	r0, r4
 80054ac:	b011      	add	sp, #68	; 0x44
 80054ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b0:	00016b85 	.word	0x00016b85
 80054b4:	000970a4 	.word	0x000970a4

080054b8 <VL53L0X_PerformRefCalibration>:
	uint8_t *pPhaseCal)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80054b8:	2301      	movs	r3, #1
 80054ba:	f000 bd66 	b.w	8005f8a <VL53L0X_perform_ref_calibration>

080054be <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80054be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c2:	b08e      	sub	sp, #56	; 0x38
 80054c4:	460c      	mov	r4, r1
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80054c6:	230c      	movs	r3, #12
 80054c8:	aa04      	add	r2, sp, #16
 80054ca:	2114      	movs	r1, #20
{
 80054cc:	4606      	mov	r6, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80054ce:	f002 f859 	bl	8007584 <VL53L0X_ReadMulti>
 80054d2:	4686      	mov	lr, r0

	if (Status == VL53L0X_ERROR_NONE) {
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d175      	bne.n	80055c4 <VL53L0X_GetRangingMeasurementData+0x106>
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80054d8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80054dc:	f89d 2017 	ldrb.w	r2, [sp, #23]
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80054e0:	f89d 1018 	ldrb.w	r1, [sp, #24]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80054e4:	f89d 501a 	ldrb.w	r5, [sp, #26]
 80054e8:	f89d 701b 	ldrb.w	r7, [sp, #27]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80054ec:	75a0      	strb	r0, [r4, #22]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80054ee:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80054f2:	f89d 3019 	ldrb.w	r3, [sp, #25]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80054f6:	6020      	str	r0, [r4, #0]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80054f8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	025b      	lsls	r3, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005500:	6123      	str	r3, [r4, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005502:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8005506:	f89d 3013 	ldrb.w	r3, [sp, #19]
		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800550a:	6060      	str	r0, [r4, #4]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800550c:	eb07 2705 	add.w	r7, r7, r5, lsl #8
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005510:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005514:	b292      	uxth	r2, r2
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005516:	f8b6 514e 	ldrh.w	r5, [r6, #334]	; 0x14e
		DeviceRangeStatus = localBuffer[0];
 800551a:	f89d 1010 	ldrb.w	r1, [sp, #16]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800551e:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005520:	b29b      	uxth	r3, r3
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005522:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005524:	82a3      	strh	r3, [r4, #20]

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005526:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800552a:	b2bf      	uxth	r7, r7
		RangeFractionalEnable = PALDevDataGet(Dev,
 800552c:	f896 e131 	ldrb.w	lr, [r6, #305]	; 0x131
		if (LinearityCorrectiveGain != 1000) {
 8005530:	d00c      	beq.n	800554c <VL53L0X_GetRangingMeasurementData+0x8e>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005532:	fb07 f005 	mul.w	r0, r7, r5
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005536:	7f37      	ldrb	r7, [r6, #28]
				* tmpuint16 + 500) / 1000);
 8005538:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800553c:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8005540:	fb90 f0f5 	sdiv	r0, r0, r5
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005544:	6a35      	ldr	r5, [r6, #32]
			if (XTalkCompensationEnable) {
 8005546:	2f00      	cmp	r7, #0
 8005548:	d140      	bne.n	80055cc <VL53L0X_GetRangingMeasurementData+0x10e>
						XtalkRangeMilliMeter = 8888;
					else
						XtalkRangeMilliMeter = 8888
							<< 2;
				} else {
					XtalkRangeMilliMeter =
 800554a:	b287      	uxth	r7, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 800554c:	f1be 0f00 	cmp.w	lr, #0
 8005550:	d046      	beq.n	80055e0 <VL53L0X_GetRangingMeasurementData+0x122>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005552:	08b8      	lsrs	r0, r7, #2
			pRangingMeasurementData->RangeMilliMeter =
 8005554:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005556:	01b8      	lsls	r0, r7, #6
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005558:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800555a:	f10d 000f 	add.w	r0, sp, #15
 800555e:	9001      	str	r0, [sp, #4]
 8005560:	9400      	str	r4, [sp, #0]
 8005562:	4630      	mov	r0, r6
 8005564:	f001 fe5c 	bl	8007220 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005568:	4686      	mov	lr, r0
 800556a:	bb58      	cbnz	r0, 80055c4 <VL53L0X_GetRangingMeasurementData+0x106>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800556c:	f89d c00f 	ldrb.w	ip, [sp, #15]
 8005570:	f884 c018 	strb.w	ip, [r4, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005574:	f106 0550 	add.w	r5, r6, #80	; 0x50
 8005578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800557a:	af07      	add	r7, sp, #28
 800557c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800557e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005582:	f8b4 a008 	ldrh.w	sl, [r4, #8]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005586:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005588:	f8b4 900a 	ldrh.w	r9, [r4, #10]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800558c:	f8b4 8014 	ldrh.w	r8, [r4, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005590:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005594:	e887 0007 	stmia.w	r7, {r0, r1, r2}
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005598:	68e1      	ldr	r1, [r4, #12]
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800559a:	6922      	ldr	r2, [r4, #16]
		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800559c:	6860      	ldr	r0, [r4, #4]
 800559e:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 80055a2:	910a      	str	r1, [sp, #40]	; 0x28
 80055a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80055a6:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 80055aa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80055ae:	f88d c034 	strb.w	ip, [sp, #52]	; 0x34
 80055b2:	ac07      	add	r4, sp, #28
 80055b4:	9008      	str	r0, [sp, #32]
 80055b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055b8:	3650      	adds	r6, #80	; 0x50
 80055ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80055bc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80055c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80055c4:	4670      	mov	r0, lr
 80055c6:	b00e      	add	sp, #56	; 0x38
 80055c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					* EffectiveSpadRtnCount) >> 8))
 80055cc:	b2ad      	uxth	r5, r5
 80055ce:	435d      	muls	r5, r3
 80055d0:	122d      	asrs	r5, r5, #8
				if ((SignalRate
 80055d2:	42aa      	cmp	r2, r5
 80055d4:	d107      	bne.n	80055e6 <VL53L0X_GetRangingMeasurementData+0x128>
					if (RangeFractionalEnable)
 80055d6:	f1be 0f00 	cmp.w	lr, #0
 80055da:	d10a      	bne.n	80055f2 <VL53L0X_GetRangingMeasurementData+0x134>
						XtalkRangeMilliMeter = 8888
 80055dc:	f648 27e0 	movw	r7, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80055e0:	8127      	strh	r7, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80055e2:	2000      	movs	r0, #0
 80055e4:	e7b8      	b.n	8005558 <VL53L0X_GetRangingMeasurementData+0x9a>
					(tmpuint16 * SignalRate)
 80055e6:	b280      	uxth	r0, r0
 80055e8:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 80055ea:	1b55      	subs	r5, r2, r5
						/ (SignalRate
 80055ec:	fbb0 f0f5 	udiv	r0, r0, r5
 80055f0:	e7ab      	b.n	800554a <VL53L0X_GetRangingMeasurementData+0x8c>
						XtalkRangeMilliMeter = 8888;
 80055f2:	f242 27b8 	movw	r7, #8888	; 0x22b8
 80055f6:	e7ac      	b.n	8005552 <VL53L0X_GetRangingMeasurementData+0x94>

080055f8 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80055f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055fa:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80055fc:	210e      	movs	r1, #14
 80055fe:	f10d 0206 	add.w	r2, sp, #6
{
 8005602:	461d      	mov	r5, r3
 8005604:	4606      	mov	r6, r0
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005606:	4c0b      	ldr	r4, [pc, #44]	; (8005634 <VL53L0X_GetInterruptThresholds+0x3c>)
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005608:	f001 ffd2 	bl	80075b0 <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800560c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005610:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 8005614:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005616:	b950      	cbnz	r0, 800562e <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005618:	f10d 0206 	add.w	r2, sp, #6
 800561c:	210c      	movs	r1, #12
 800561e:	4630      	mov	r0, r6
 8005620:	f001 ffc6 	bl	80075b0 <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005624:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005628:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 800562c:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800562e:	b003      	add	sp, #12
 8005630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005632:	bf00      	nop
 8005634:	1ffe0000 	.word	0x1ffe0000

08005638 <VL53L0X_CheckAndLoadInterruptSettings>:
{
 8005638:	b573      	push	{r0, r1, r4, r5, r6, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800563a:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
 800563e:	3b01      	subs	r3, #1
 8005640:	2b02      	cmp	r3, #2
{
 8005642:	4606      	mov	r6, r0
 8005644:	460c      	mov	r4, r1
	if ((InterruptConfig ==
 8005646:	d833      	bhi.n	80056b0 <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005648:	ab01      	add	r3, sp, #4
 800564a:	466a      	mov	r2, sp
 800564c:	2101      	movs	r1, #1
 800564e:	f7ff ffd3 	bl	80055f8 <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 8005652:	9b00      	ldr	r3, [sp, #0]
 8005654:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005658:	4605      	mov	r5, r0
		if (((ThresholdLow > 255*65536) ||
 800565a:	d803      	bhi.n	8005664 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 800565c:	9b01      	ldr	r3, [sp, #4]
 800565e:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005662:	d906      	bls.n	8005672 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
 8005664:	b92d      	cbnz	r5, 8005672 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
 8005666:	b13c      	cbz	r4, 8005678 <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005668:	4912      	ldr	r1, [pc, #72]	; (80056b4 <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 800566a:	4630      	mov	r0, r6
 800566c:	f001 fc0e 	bl	8006e8c <VL53L0X_load_tuning_settings>
 8005670:	4605      	mov	r5, r0
}
 8005672:	4628      	mov	r0, r5
 8005674:	b002      	add	sp, #8
 8005676:	bd70      	pop	{r4, r5, r6, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005678:	2204      	movs	r2, #4
 800567a:	21ff      	movs	r1, #255	; 0xff
 800567c:	4630      	mov	r0, r6
 800567e:	f001 ffdd 	bl	800763c <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005682:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005684:	4604      	mov	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005686:	2170      	movs	r1, #112	; 0x70
 8005688:	4630      	mov	r0, r6
 800568a:	f001 ffd7 	bl	800763c <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800568e:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005690:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005692:	21ff      	movs	r1, #255	; 0xff
 8005694:	4630      	mov	r0, r6
 8005696:	f001 ffd1 	bl	800763c <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800569a:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800569c:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800569e:	462a      	mov	r2, r5
 80056a0:	2180      	movs	r1, #128	; 0x80
 80056a2:	4630      	mov	r0, r6
 80056a4:	f001 ffca 	bl	800763c <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80056a8:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80056aa:	4320      	orrs	r0, r4
 80056ac:	b245      	sxtb	r5, r0
 80056ae:	e7e0      	b.n	8005672 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056b0:	2500      	movs	r5, #0
 80056b2:	e7de      	b.n	8005672 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
 80056b4:	20000343 	.word	0x20000343

080056b8 <VL53L0X_StartMeasurement>:
{
 80056b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	switch (DeviceMode) {
 80056ba:	7c01      	ldrb	r1, [r0, #16]
 80056bc:	2901      	cmp	r1, #1
{
 80056be:	4604      	mov	r4, r0
	switch (DeviceMode) {
 80056c0:	d027      	beq.n	8005712 <VL53L0X_StartMeasurement+0x5a>
 80056c2:	d304      	bcc.n	80056ce <VL53L0X_StartMeasurement+0x16>
 80056c4:	2903      	cmp	r1, #3
 80056c6:	d031      	beq.n	800572c <VL53L0X_StartMeasurement+0x74>
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80056c8:	f06f 0007 	mvn.w	r0, #7
 80056cc:	e013      	b.n	80056f6 <VL53L0X_StartMeasurement+0x3e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80056ce:	2201      	movs	r2, #1
 80056d0:	2100      	movs	r1, #0
 80056d2:	f001 ffb3 	bl	800763c <VL53L0X_WrByte>
		Byte = StartStopByte;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 80056dc:	b958      	cbnz	r0, 80056f6 <VL53L0X_StartMeasurement+0x3e>
 80056de:	4605      	mov	r5, r0
			} while (((Byte & StartStopByte) == StartStopByte)
 80056e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80056e4:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
 80056e6:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80056ea:	d50d      	bpl.n	8005708 <VL53L0X_StartMeasurement+0x50>
				&& (Status == VL53L0X_ERROR_NONE)
 80056ec:	b960      	cbnz	r0, 8005708 <VL53L0X_StartMeasurement+0x50>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80056ee:	2dc8      	cmp	r5, #200	; 0xc8
 80056f0:	d103      	bne.n	80056fa <VL53L0X_StartMeasurement+0x42>
				Status = VL53L0X_ERROR_TIME_OUT;
 80056f2:	f06f 0006 	mvn.w	r0, #6
}
 80056f6:	b003      	add	sp, #12
 80056f8:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
 80056fa:	4601      	mov	r1, r0
 80056fc:	f10d 0207 	add.w	r2, sp, #7
 8005700:	4620      	mov	r0, r4
 8005702:	f001 ff0c 	bl	800751e <VL53L0X_RdByte>
 8005706:	e7eb      	b.n	80056e0 <VL53L0X_StartMeasurement+0x28>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005708:	2dc8      	cmp	r5, #200	; 0xc8
 800570a:	bf08      	it	eq
 800570c:	f06f 0006 	mvneq.w	r0, #6
 8005710:	e7f1      	b.n	80056f6 <VL53L0X_StartMeasurement+0x3e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005712:	f7ff ff91 	bl	8005638 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8005716:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 8005718:	2100      	movs	r1, #0
 800571a:	4620      	mov	r0, r4
 800571c:	f001 ff8e 	bl	800763c <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8005720:	2800      	cmp	r0, #0
 8005722:	d1e8      	bne.n	80056f6 <VL53L0X_StartMeasurement+0x3e>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005724:	2304      	movs	r3, #4
 8005726:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 800572a:	e7e4      	b.n	80056f6 <VL53L0X_StartMeasurement+0x3e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800572c:	2101      	movs	r1, #1
 800572e:	f7ff ff83 	bl	8005638 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8005732:	2204      	movs	r2, #4
 8005734:	e7f0      	b.n	8005718 <VL53L0X_StartMeasurement+0x60>

08005736 <VL53L0X_PerformSingleMeasurement>:
{
 8005736:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005738:	7c05      	ldrb	r5, [r0, #16]
{
 800573a:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800573c:	b125      	cbz	r5, 8005748 <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800573e:	4620      	mov	r0, r4
 8005740:	f000 fd76 	bl	8006230 <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 8005744:	b128      	cbz	r0, 8005752 <VL53L0X_PerformSingleMeasurement+0x1c>
 8005746:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
 8005748:	f7ff ffb6 	bl	80056b8 <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 800574c:	2800      	cmp	r0, #0
 800574e:	d0f6      	beq.n	800573e <VL53L0X_PerformSingleMeasurement+0x8>
}
 8005750:	bd38      	pop	{r3, r4, r5, pc}
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005752:	2d00      	cmp	r5, #0
 8005754:	d1fc      	bne.n	8005750 <VL53L0X_PerformSingleMeasurement+0x1a>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005756:	2303      	movs	r3, #3
 8005758:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 800575c:	e7f8      	b.n	8005750 <VL53L0X_PerformSingleMeasurement+0x1a>

0800575e <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800575e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005760:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005762:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 8005764:	2201      	movs	r2, #1
 8005766:	210b      	movs	r1, #11
 8005768:	4630      	mov	r0, r6
 800576a:	f001 ff67 	bl	800763c <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800576e:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 8005770:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 8005772:	210b      	movs	r1, #11
 8005774:	4630      	mov	r0, r6
 8005776:	f001 ff61 	bl	800763c <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800577a:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 800577e:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 8005780:	2113      	movs	r1, #19
 8005782:	4630      	mov	r0, r6
 8005784:	f001 fecb 	bl	800751e <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005788:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
 800578c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 800578e:	4320      	orrs	r0, r4
		LoopCount++;
 8005790:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 8005792:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
 8005794:	b240      	sxtb	r0, r0
		LoopCount++;
 8005796:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 8005798:	d005      	beq.n	80057a6 <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
 800579a:	2d03      	cmp	r5, #3
 800579c:	d008      	beq.n	80057b0 <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
 800579e:	2800      	cmp	r0, #0
 80057a0:	d0e0      	beq.n	8005764 <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 80057a2:	b002      	add	sp, #8
 80057a4:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80057a6:	2d03      	cmp	r5, #3
 80057a8:	bf08      	it	eq
 80057aa:	f06f 000b 	mvneq.w	r0, #11
 80057ae:	e7f8      	b.n	80057a2 <VL53L0X_ClearInterruptMask+0x44>
 80057b0:	f06f 000b 	mvn.w	r0, #11
 80057b4:	e7f5      	b.n	80057a2 <VL53L0X_ClearInterruptMask+0x44>

080057b6 <VL53L0X_PerformSingleRangingMeasurement>:
{
 80057b6:	b538      	push	{r3, r4, r5, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80057b8:	2300      	movs	r3, #0
 80057ba:	7403      	strb	r3, [r0, #16]
{
 80057bc:	4604      	mov	r4, r0
 80057be:	460d      	mov	r5, r1
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80057c0:	f7ff ffb9 	bl	8005736 <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 80057c4:	b950      	cbnz	r0, 80057dc <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80057c6:	4629      	mov	r1, r5
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff fe78 	bl	80054be <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 80057ce:	b928      	cbnz	r0, 80057dc <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80057d0:	4601      	mov	r1, r0
 80057d2:	4620      	mov	r0, r4
}
 80057d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80057d8:	f7ff bfc1 	b.w	800575e <VL53L0X_ClearInterruptMask>
}
 80057dc:	bd38      	pop	{r3, r4, r5, pc}

080057de <VL53L0X_SetGpioConfig>:
{
 80057de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e0:	4605      	mov	r5, r0
 80057e2:	461c      	mov	r4, r3
 80057e4:	f89d 7018 	ldrb.w	r7, [sp, #24]
	if (Pin != 0) {
 80057e8:	460e      	mov	r6, r1
 80057ea:	2900      	cmp	r1, #0
 80057ec:	f040 809a 	bne.w	8005924 <VL53L0X_SetGpioConfig+0x146>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80057f0:	2a14      	cmp	r2, #20
 80057f2:	d108      	bne.n	8005806 <VL53L0X_SetGpioConfig+0x28>
			data = 1;
 80057f4:	2f00      	cmp	r7, #0
		Status = VL53L0X_WrByte(Dev,
 80057f6:	bf0c      	ite	eq
 80057f8:	2210      	moveq	r2, #16
 80057fa:	2201      	movne	r2, #1
 80057fc:	2184      	movs	r1, #132	; 0x84
}
 80057fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev,
 8005802:	f001 bf1b 	b.w	800763c <VL53L0X_WrByte>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8005806:	2a15      	cmp	r2, #21
 8005808:	d167      	bne.n	80058da <VL53L0X_SetGpioConfig+0xfc>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800580a:	2201      	movs	r2, #1
 800580c:	21ff      	movs	r1, #255	; 0xff
 800580e:	f001 ff15 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005812:	4632      	mov	r2, r6
 8005814:	4631      	mov	r1, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005816:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005818:	4628      	mov	r0, r5
 800581a:	f001 ff0f 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800581e:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005820:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005822:	21ff      	movs	r1, #255	; 0xff
 8005824:	4628      	mov	r0, r5
 8005826:	f001 ff09 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800582a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800582c:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800582e:	2201      	movs	r2, #1
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	4628      	mov	r0, r5
 8005834:	f001 ff02 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005838:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800583a:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800583c:	2202      	movs	r2, #2
 800583e:	2185      	movs	r1, #133	; 0x85
 8005840:	4628      	mov	r0, r5
 8005842:	f001 fefb 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005846:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005848:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800584a:	2204      	movs	r2, #4
 800584c:	21ff      	movs	r1, #255	; 0xff
 800584e:	4628      	mov	r0, r5
 8005850:	f001 fef4 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005854:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005856:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005858:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800585a:	21cd      	movs	r1, #205	; 0xcd
 800585c:	4628      	mov	r0, r5
 800585e:	f001 feed 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005862:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005864:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005866:	2211      	movs	r2, #17
 8005868:	21cc      	movs	r1, #204	; 0xcc
 800586a:	4628      	mov	r0, r5
 800586c:	f001 fee6 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005870:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005872:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005874:	2207      	movs	r2, #7
 8005876:	21ff      	movs	r1, #255	; 0xff
 8005878:	4628      	mov	r0, r5
 800587a:	f001 fedf 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800587e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005880:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005882:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005884:	21be      	movs	r1, #190	; 0xbe
 8005886:	4628      	mov	r0, r5
 8005888:	f001 fed8 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800588c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800588e:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005890:	2206      	movs	r2, #6
 8005892:	21ff      	movs	r1, #255	; 0xff
 8005894:	4628      	mov	r0, r5
 8005896:	f001 fed1 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800589a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800589c:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800589e:	2209      	movs	r2, #9
 80058a0:	21cc      	movs	r1, #204	; 0xcc
 80058a2:	4628      	mov	r0, r5
 80058a4:	f001 feca 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80058a8:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80058aa:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80058ac:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80058ae:	21ff      	movs	r1, #255	; 0xff
 80058b0:	4628      	mov	r0, r5
 80058b2:	f001 fec3 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80058b6:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80058b8:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80058ba:	2201      	movs	r2, #1
 80058bc:	21ff      	movs	r1, #255	; 0xff
 80058be:	4628      	mov	r0, r5
 80058c0:	f001 febc 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80058c4:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80058c6:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80058c8:	4632      	mov	r2, r6
 80058ca:	4631      	mov	r1, r6
 80058cc:	4628      	mov	r0, r5
 80058ce:	f001 feb5 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80058d2:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80058d4:	4320      	orrs	r0, r4
 80058d6:	b240      	sxtb	r0, r0
 80058d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch (Functionality) {
 80058da:	2c04      	cmp	r4, #4
 80058dc:	d825      	bhi.n	800592a <VL53L0X_SetGpioConfig+0x14c>
 80058de:	e8df f004 	tbb	[pc, r4]
 80058e2:	2729      	.short	0x2729
 80058e4:	0a03      	.short	0x0a03
 80058e6:	0c          	.byte	0x0c
 80058e7:	00          	.byte	0x00
				data = 0x02;
 80058e8:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 80058ea:	210a      	movs	r1, #10
 80058ec:	4628      	mov	r0, r5
 80058ee:	f001 fea5 	bl	800763c <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 80058f2:	b120      	cbz	r0, 80058fe <VL53L0X_SetGpioConfig+0x120>
}
 80058f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x03;
 80058f6:	2203      	movs	r2, #3
				break;
 80058f8:	e7f7      	b.n	80058ea <VL53L0X_SetGpioConfig+0x10c>
				data = 0x04;
 80058fa:	2204      	movs	r2, #4
				break;
 80058fc:	e7f5      	b.n	80058ea <VL53L0X_SetGpioConfig+0x10c>
				data = (uint8_t)(1 << 4);
 80058fe:	2f00      	cmp	r7, #0
			Status = VL53L0X_UpdateByte(Dev,
 8005900:	bf0c      	ite	eq
 8005902:	4633      	moveq	r3, r6
 8005904:	2310      	movne	r3, #16
 8005906:	22ef      	movs	r2, #239	; 0xef
 8005908:	2184      	movs	r1, #132	; 0x84
 800590a:	4628      	mov	r0, r5
 800590c:	f001 feb8 	bl	8007680 <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 8005910:	2800      	cmp	r0, #0
 8005912:	d1ef      	bne.n	80058f4 <VL53L0X_SetGpioConfig+0x116>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005914:	f885 40da 	strb.w	r4, [r5, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005918:	4601      	mov	r1, r0
 800591a:	4628      	mov	r0, r5
}
 800591c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005920:	f7ff bf1d 	b.w	800575e <VL53L0X_ClearInterruptMask>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8005924:	f06f 0009 	mvn.w	r0, #9
 8005928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				Status =
 800592a:	f06f 000a 	mvn.w	r0, #10
 800592e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x01;
 8005930:	2201      	movs	r2, #1
 8005932:	e7da      	b.n	80058ea <VL53L0X_SetGpioConfig+0x10c>
				data = 0x00;
 8005934:	2200      	movs	r2, #0
 8005936:	e7d8      	b.n	80058ea <VL53L0X_SetGpioConfig+0x10c>

08005938 <VL53L0X_StaticInit>:
{
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	b096      	sub	sp, #88	; 0x58
 800593c:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800593e:	2240      	movs	r2, #64	; 0x40
 8005940:	2100      	movs	r1, #0
 8005942:	a806      	add	r0, sp, #24
 8005944:	f001 ff95 	bl	8007872 <memset>
	uint16_t tempword = 0;
 8005948:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 800594a:	2101      	movs	r1, #1
 800594c:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 800594e:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint8_t tempbyte = 0;
 8005952:	f88d 300b 	strb.w	r3, [sp, #11]
	uint8_t isApertureSpads = 0;
 8005956:	f88d 300c 	strb.w	r3, [sp, #12]
	uint32_t refSpadCount = 0;
 800595a:	9304      	str	r3, [sp, #16]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 800595c:	f000 fcb8 	bl	80062d0 <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005960:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 8005964:	2a01      	cmp	r2, #1
 8005966:	d806      	bhi.n	8005976 <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005968:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 800596c:	f040 80ae 	bne.w	8005acc <VL53L0X_StaticInit+0x194>
		((ApertureSpads == 1) && (count > 32)) ||
 8005970:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 8005972:	f240 80ad 	bls.w	8005ad0 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005976:	aa03      	add	r2, sp, #12
 8005978:	a904      	add	r1, sp, #16
 800597a:	4628      	mov	r0, r5
 800597c:	f000 fb20 	bl	8005fc0 <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005980:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8005982:	2800      	cmp	r0, #0
 8005984:	f040 809f 	bne.w	8005ac6 <VL53L0X_StaticInit+0x18e>
		if (UseInternalTuningSettings == 0)
 8005988:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 80a3 	bne.w	8005ad8 <VL53L0X_StaticInit+0x1a0>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8005992:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005996:	4628      	mov	r0, r5
 8005998:	f001 fa78 	bl	8006e8c <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 800599c:	4604      	mov	r4, r0
 800599e:	2800      	cmp	r0, #0
 80059a0:	f040 8091 	bne.w	8005ac6 <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80059a4:	9400      	str	r4, [sp, #0]
 80059a6:	4622      	mov	r2, r4
 80059a8:	4621      	mov	r1, r4
 80059aa:	2304      	movs	r3, #4
 80059ac:	4628      	mov	r0, r5
 80059ae:	f7ff ff16 	bl	80057de <VL53L0X_SetGpioConfig>
	if (Status == VL53L0X_ERROR_NONE) {
 80059b2:	4604      	mov	r4, r0
 80059b4:	2800      	cmp	r0, #0
 80059b6:	f040 8086 	bne.w	8005ac6 <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80059ba:	2201      	movs	r2, #1
 80059bc:	21ff      	movs	r1, #255	; 0xff
 80059be:	4628      	mov	r0, r5
 80059c0:	f001 fe3c 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80059c4:	f10d 020e 	add.w	r2, sp, #14
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80059c8:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80059ca:	2184      	movs	r1, #132	; 0x84
 80059cc:	4628      	mov	r0, r5
 80059ce:	f001 fdef 	bl	80075b0 <VL53L0X_RdWord>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80059d2:	4622      	mov	r2, r4
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80059d4:	4306      	orrs	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80059d6:	21ff      	movs	r1, #255	; 0xff
 80059d8:	4628      	mov	r0, r5
 80059da:	f001 fe2f 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80059de:	b276      	sxtb	r6, r6
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80059e0:	4330      	orrs	r0, r6
 80059e2:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 80059e4:	2c00      	cmp	r4, #0
 80059e6:	d16e      	bne.n	8005ac6 <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80059e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80059f2:	a906      	add	r1, sp, #24
 80059f4:	4628      	mov	r0, r5
 80059f6:	f7ff fc8d 	bl	8005314 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 80059fa:	4604      	mov	r4, r0
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d162      	bne.n	8005ac6 <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005a00:	f10d 010b 	add.w	r1, sp, #11
 8005a04:	4628      	mov	r0, r5
 8005a06:	f7ff faf3 	bl	8004ff0 <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	d15a      	bne.n	8005ac6 <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005a10:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005a14:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005a18:	ae06      	add	r6, sp, #24
 8005a1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005a1c:	f105 0410 	add.w	r4, r5, #16
 8005a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a2a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005a2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 8005a32:	f10d 020b 	add.w	r2, sp, #11
 8005a36:	2101      	movs	r1, #1
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f001 fd70 	bl	800751e <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 8005a3e:	4604      	mov	r4, r0
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d140      	bne.n	8005ac6 <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005a44:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005a48:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	4601      	mov	r1, r0
 8005a50:	4628      	mov	r0, r5
 8005a52:	f7ff fadf 	bl	8005014 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8005a56:	4604      	mov	r4, r0
 8005a58:	bba8      	cbnz	r0, 8005ac6 <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	2102      	movs	r1, #2
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f7ff fad8 	bl	8005014 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8005a64:	4604      	mov	r4, r0
 8005a66:	bb70      	cbnz	r0, 8005ac6 <VL53L0X_StaticInit+0x18e>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005a68:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005a6a:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005a6c:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005a70:	f10d 020d 	add.w	r2, sp, #13
 8005a74:	4628      	mov	r0, r5
 8005a76:	f001 f92a 	bl	8006cce <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	bb18      	cbnz	r0, 8005ac6 <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005a7e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005a82:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005a86:	f10d 020d 	add.w	r2, sp, #13
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f001 f91e 	bl	8006cce <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8005a92:	4604      	mov	r4, r0
 8005a94:	b9b8      	cbnz	r0, 8005ac6 <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005a96:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005a9a:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = VL53L0X_GetSequenceStepTimeout(
 8005a9e:	aa05      	add	r2, sp, #20
 8005aa0:	2103      	movs	r1, #3
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f7ff fb23 	bl	80050ee <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	b960      	cbnz	r0, 8005ac6 <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005aac:	9b05      	ldr	r3, [sp, #20]
 8005aae:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = VL53L0X_GetSequenceStepTimeout(
 8005ab2:	aa05      	add	r2, sp, #20
 8005ab4:	2104      	movs	r1, #4
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f7ff fb19 	bl	80050ee <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8005abc:	4604      	mov	r4, r0
 8005abe:	b910      	cbnz	r0, 8005ac6 <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005ac0:	9b05      	ldr	r3, [sp, #20]
 8005ac2:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	b016      	add	sp, #88	; 0x58
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 8005acc:	290c      	cmp	r1, #12
 8005ace:	e750      	b.n	8005972 <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 f913 	bl	8005cfc <VL53L0X_set_reference_spads>
 8005ad6:	e753      	b.n	8005980 <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 8005ad8:	4900      	ldr	r1, [pc, #0]	; (8005adc <VL53L0X_StaticInit+0x1a4>)
 8005ada:	e75c      	b.n	8005996 <VL53L0X_StaticInit+0x5e>
 8005adc:	20000250 	.word	0x20000250

08005ae0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005ae0:	b513      	push	{r0, r1, r4, lr}
 8005ae2:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8005ae4:	f10d 0207 	add.w	r2, sp, #7
 8005ae8:	2113      	movs	r1, #19
 8005aea:	f001 fd18 	bl	800751e <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 8005aee:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
 8005af2:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
 8005af6:	f003 0207 	and.w	r2, r3, #7
		Status = VL53L0X_ERROR_RANGE_ERROR;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005afa:	bf18      	it	ne
 8005afc:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 8005b00:	6022      	str	r2, [r4, #0]
}
 8005b02:	b002      	add	sp, #8
 8005b04:	bd10      	pop	{r4, pc}

08005b06 <VL53L0X_GetMeasurementDataReady>:
{
 8005b06:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 8005b08:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 8005b0c:	2b04      	cmp	r3, #4
{
 8005b0e:	460c      	mov	r4, r1
	if (InterruptConfig ==
 8005b10:	d10b      	bne.n	8005b2a <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005b12:	a901      	add	r1, sp, #4
 8005b14:	f7ff ffe4 	bl	8005ae0 <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 8005b18:	9b01      	ldr	r3, [sp, #4]
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d101      	bne.n	8005b22 <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	7023      	strb	r3, [r4, #0]
}
 8005b26:	b002      	add	sp, #8
 8005b28:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005b2a:	aa01      	add	r2, sp, #4
 8005b2c:	2114      	movs	r1, #20
 8005b2e:	f001 fcf6 	bl	800751e <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d1f7      	bne.n	8005b26 <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
 8005b36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005b3a:	07db      	lsls	r3, r3, #31
 8005b3c:	d4ef      	bmi.n	8005b1e <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
 8005b3e:	7020      	strb	r0, [r4, #0]
 8005b40:	e7f1      	b.n	8005b26 <VL53L0X_GetMeasurementDataReady+0x20>

08005b42 <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005b42:	f000 ba3d 	b.w	8005fc0 <VL53L0X_perform_ref_spad_management>

08005b46 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005b46:	b513      	push	{r0, r1, r4, lr}
 8005b48:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8005b4a:	f10d 0206 	add.w	r2, sp, #6
 8005b4e:	2128      	movs	r1, #40	; 0x28
 8005b50:	f001 fd2e 	bl	80075b0 <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8005b54:	b970      	cbnz	r0, 8005b74 <VL53L0X_get_offset_calibration_data_micro_meter+0x2e>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005b56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8005b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b62:	f04f 02fa 	mov.w	r2, #250	; 0xfa
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005b66:	bf26      	itte	cs
 8005b68:	f5a3 5380 	subcs.w	r3, r3, #4096	; 0x1000
					* 250;
 8005b6c:	fb13 f302 	smulbbcs	r3, r3, r2
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005b70:	4353      	mulcc	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005b72:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 8005b74:	b002      	add	sp, #8
 8005b76:	bd10      	pop	{r4, pc}

08005b78 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005b78:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * the index of the bit within each byte.
	 */

	*next = -1;

	startIndex = curr / cSpadsPerByte;
 8005b7a:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
	*next = -1;
 8005b7e:	f04f 34ff 	mov.w	r4, #4294967295
 8005b82:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;
 8005b84:	f002 0207 	and.w	r2, r2, #7
 8005b88:	ea4f 0cce 	mov.w	ip, lr, lsl #3

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005b8c:	4676      	mov	r6, lr
	uint8_t success = 0;
 8005b8e:	2700      	movs	r7, #0
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005b90:	428e      	cmp	r6, r1
 8005b92:	d200      	bcs.n	8005b96 <get_next_good_spad+0x1e>
 8005b94:	b107      	cbz	r7, 8005b98 <get_next_good_spad+0x20>
 8005b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
				coarseIndex++) {
		fineIndex = 0;
		dataByte = goodSpadArray[coarseIndex];
 8005b98:	5d85      	ldrb	r5, [r0, r6]

		if (coarseIndex == startIndex) {
 8005b9a:	4576      	cmp	r6, lr
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005b9c:	bf03      	ittte	eq
 8005b9e:	4115      	asreq	r5, r2
 8005ba0:	b2ed      	uxtbeq	r5, r5
			fineIndex = fineOffset;
 8005ba2:	4614      	moveq	r4, r2
		fineIndex = 0;
 8005ba4:	463c      	movne	r4, r7
		}

		while (fineIndex < cSpadsPerByte) {
			if ((dataByte & 0x1) == 1) {
 8005ba6:	f015 0f01 	tst.w	r5, #1
 8005baa:	d006      	beq.n	8005bba <get_next_good_spad+0x42>
				success = 1;
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005bac:	4464      	add	r4, ip
 8005bae:	601c      	str	r4, [r3, #0]
				success = 1;
 8005bb0:	2701      	movs	r7, #1
				coarseIndex++) {
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	f10c 0c08 	add.w	ip, ip, #8
 8005bb8:	e7ea      	b.n	8005b90 <get_next_good_spad+0x18>
				break;
			}
			dataByte >>= 1;
			fineIndex++;
 8005bba:	3401      	adds	r4, #1
		while (fineIndex < cSpadsPerByte) {
 8005bbc:	2c08      	cmp	r4, #8
			dataByte >>= 1;
 8005bbe:	ea4f 0555 	mov.w	r5, r5, lsr #1
		while (fineIndex < cSpadsPerByte) {
 8005bc2:	d1f0      	bne.n	8005ba6 <get_next_good_spad+0x2e>
 8005bc4:	e7f5      	b.n	8005bb2 <get_next_good_spad+0x3a>
	...

08005bc8 <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005bc8:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 8005bca:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005bcc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 8005bd0:	3000      	adds	r0, #0
 8005bd2:	bf18      	it	ne
 8005bd4:	2001      	movne	r0, #1
 8005bd6:	4770      	bx	lr
 8005bd8:	200004fc 	.word	0x200004fc

08005bdc <enable_spad_bit>:
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t cSpadsPerByte = 8;
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005bdc:	08d3      	lsrs	r3, r2, #3
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 8005bde:	428b      	cmp	r3, r1
	fineIndex = spadIndex % cSpadsPerByte;
 8005be0:	f002 0207 	and.w	r2, r2, #7
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8005be4:	bf3f      	itttt	cc
 8005be6:	2101      	movcc	r1, #1
 8005be8:	4091      	lslcc	r1, r2
 8005bea:	5cc2      	ldrbcc	r2, [r0, r3]
 8005bec:	430a      	orrcc	r2, r1
 8005bee:	bf3a      	itte	cc
 8005bf0:	54c2      	strbcc	r2, [r0, r3]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005bf2:	2000      	movcc	r0, #0
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005bf4:	f06f 0031 	mvncs.w	r0, #49	; 0x31

	return status;
}
 8005bf8:	4770      	bx	lr

08005bfa <set_ref_spad_map>:
	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005bfa:	460a      	mov	r2, r1
 8005bfc:	2306      	movs	r3, #6
 8005bfe:	21b0      	movs	r1, #176	; 0xb0
 8005c00:	f001 bca2 	b.w	8007548 <VL53L0X_WriteMulti>

08005c04 <get_ref_spad_map>:
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005c04:	460a      	mov	r2, r1
 8005c06:	2306      	movs	r3, #6
 8005c08:	21b0      	movs	r1, #176	; 0xb0
 8005c0a:	f001 bcbb 	b.w	8007584 <VL53L0X_ReadMulti>

08005c0e <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005c0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c12:	b087      	sub	sp, #28
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005c14:	f10d 0918 	add.w	r9, sp, #24
{
 8005c18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005c1a:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int32_t nextGoodSpad = offset;
 8005c1c:	f849 4d0c 	str.w	r4, [r9, #-12]!
{
 8005c20:	4682      	mov	sl, r0
 8005c22:	468b      	mov	fp, r1
 8005c24:	9201      	str	r2, [sp, #4]
 8005c26:	461d      	mov	r5, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 8005c28:	f04f 0800 	mov.w	r8, #0
 8005c2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c2e:	4598      	cmp	r8, r3
 8005c30:	d114      	bne.n	8005c5c <enable_ref_spads+0x4e>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005c32:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 8005c34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c36:	601c      	str	r4, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005c38:	b968      	cbnz	r0, 8005c56 <enable_ref_spads+0x48>
		status = set_ref_spad_map(Dev, spadArray);
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	4650      	mov	r0, sl
 8005c3e:	f7ff ffdc 	bl	8005bfa <set_ref_spad_map>
 8005c42:	4604      	mov	r4, r0


	if (status == VL53L0X_ERROR_NONE) {
 8005c44:	b938      	cbnz	r0, 8005c56 <enable_ref_spads+0x48>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005c46:	ae04      	add	r6, sp, #16
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	f7ff ffda 	bl	8005c04 <get_ref_spad_map>

		i = 0;
 8005c50:	4623      	mov	r3, r4

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005c52:	429f      	cmp	r7, r3
 8005c54:	d11d      	bne.n	8005c92 <enable_ref_spads+0x84>
			}
			i++;
		}
	}
	return status;
}
 8005c56:	b007      	add	sp, #28
 8005c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4639      	mov	r1, r7
 8005c62:	9801      	ldr	r0, [sp, #4]
 8005c64:	f7ff ff88 	bl	8005b78 <get_next_good_spad>
		if (nextGoodSpad == -1) {
 8005c68:	9e03      	ldr	r6, [sp, #12]
 8005c6a:	1c73      	adds	r3, r6, #1
 8005c6c:	d00e      	beq.n	8005c8c <enable_ref_spads+0x7e>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005c6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c70:	18f0      	adds	r0, r6, r3
 8005c72:	f7ff ffa9 	bl	8005bc8 <is_aperture>
 8005c76:	4558      	cmp	r0, fp
 8005c78:	d108      	bne.n	8005c8c <enable_ref_spads+0x7e>
		enable_spad_bit(spadArray, size, currentSpad);
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f7ff ffac 	bl	8005bdc <enable_spad_bit>
		currentSpad++;
 8005c84:	1c74      	adds	r4, r6, #1
	for (index = 0; index < spadCount; index++) {
 8005c86:	f108 0801 	add.w	r8, r8, #1
 8005c8a:	e7cf      	b.n	8005c2c <enable_ref_spads+0x1e>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005c8c:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8005c90:	e7d0      	b.n	8005c34 <enable_ref_spads+0x26>
			if (spadArray[i] != checkSpadArray[i]) {
 8005c92:	5ce9      	ldrb	r1, [r5, r3]
 8005c94:	5cf2      	ldrb	r2, [r6, r3]
 8005c96:	4291      	cmp	r1, r2
 8005c98:	d101      	bne.n	8005c9e <enable_ref_spads+0x90>
			i++;
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	e7d9      	b.n	8005c52 <enable_ref_spads+0x44>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005c9e:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8005ca2:	e7d8      	b.n	8005c56 <enable_ref_spads+0x48>

08005ca4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005ca4:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 8005ca6:	22c0      	movs	r2, #192	; 0xc0
{
 8005ca8:	b088      	sub	sp, #32
 8005caa:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 8005cac:	2101      	movs	r1, #1
{
 8005cae:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005cb0:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
		status = VL53L0X_WrByte(Dev,
 8005cb4:	f001 fcc2 	bl	800763c <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005cb8:	b9f0      	cbnz	r0, 8005cf8 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005cba:	a901      	add	r1, sp, #4
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f7ff fd7a 	bl	80057b6 <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005cc2:	b9c8      	cbnz	r0, 8005cf8 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	21ff      	movs	r1, #255	; 0xff
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f001 fcb7 	bl	800763c <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 8005cce:	b998      	cbnz	r0, 8005cf8 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	21b6      	movs	r1, #182	; 0xb6
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f001 fc6b 	bl	80075b0 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005cda:	b968      	cbnz	r0, 8005cf8 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005cdc:	4602      	mov	r2, r0
 8005cde:	21ff      	movs	r1, #255	; 0xff
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f001 fcab 	bl	800763c <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 8005ce6:	b938      	cbnz	r0, 8005cf8 <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005ce8:	462a      	mov	r2, r5
 8005cea:	2101      	movs	r1, #1
 8005cec:	4620      	mov	r0, r4
 8005cee:	f001 fca5 	bl	800763c <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005cf2:	b908      	cbnz	r0, 8005cf8 <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005cf4:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
	}

	return status;
}
 8005cf8:	b008      	add	sp, #32
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}

08005cfc <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	460e      	mov	r6, r1
 8005d00:	b088      	sub	sp, #32
 8005d02:	4615      	mov	r5, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005d04:	21ff      	movs	r1, #255	; 0xff
 8005d06:	2201      	movs	r2, #1
{
 8005d08:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005d0a:	f001 fc97 	bl	800763c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8005d0e:	4602      	mov	r2, r0
 8005d10:	b9a8      	cbnz	r0, 8005d3e <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8005d12:	214f      	movs	r1, #79	; 0x4f
 8005d14:	4620      	mov	r0, r4
 8005d16:	f001 fc91 	bl	800763c <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005d1a:	b980      	cbnz	r0, 8005d3e <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8005d1c:	222c      	movs	r2, #44	; 0x2c
 8005d1e:	214e      	movs	r1, #78	; 0x4e
 8005d20:	4620      	mov	r0, r4
 8005d22:	f001 fc8b 	bl	800763c <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005d26:	4602      	mov	r2, r0
 8005d28:	b948      	cbnz	r0, 8005d3e <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005d2a:	21ff      	movs	r1, #255	; 0xff
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f001 fc85 	bl	800763c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8005d32:	b920      	cbnz	r0, 8005d3e <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8005d34:	22b4      	movs	r2, #180	; 0xb4
 8005d36:	21b6      	movs	r1, #182	; 0xb6
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f001 fc7f 	bl	800763c <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8005d44:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
 8005d48:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
 8005d4c:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
 8005d50:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
 8005d54:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129

	if (isApertureSpads) {
 8005d58:	b31d      	cbz	r5, 8005da2 <VL53L0X_set_reference_spads+0xa6>
 8005d5a:	461a      	mov	r2, r3
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005d5c:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
 8005d60:	f7ff ff32 	bl	8005bc8 <is_aperture>
 8005d64:	b908      	cbnz	r0, 8005d6a <VL53L0X_set_reference_spads+0x6e>
 8005d66:	2a2c      	cmp	r2, #44	; 0x2c
 8005d68:	d119      	bne.n	8005d9e <VL53L0X_set_reference_spads+0xa2>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 8005d6a:	ab07      	add	r3, sp, #28
 8005d6c:	9304      	str	r3, [sp, #16]
 8005d6e:	9202      	str	r2, [sp, #8]
 8005d70:	23b4      	movs	r3, #180	; 0xb4
 8005d72:	2206      	movs	r2, #6
 8005d74:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005d78:	9603      	str	r6, [sp, #12]
 8005d7a:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8005d7e:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 8005d82:	4629      	mov	r1, r5
 8005d84:	4620      	mov	r0, r4
 8005d86:	f7ff ff42 	bl	8005c0e <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8005d8a:	b930      	cbnz	r0, 8005d9a <VL53L0X_set_reference_spads+0x9e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d92:	f884 6113 	strb.w	r6, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d96:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 8005d9a:	b008      	add	sp, #32
 8005d9c:	bd70      	pop	{r4, r5, r6, pc}
			currentSpadIndex++;
 8005d9e:	3201      	adds	r2, #1
 8005da0:	e7dc      	b.n	8005d5c <VL53L0X_set_reference_spads+0x60>
	uint32_t currentSpadIndex = 0;
 8005da2:	462a      	mov	r2, r5
 8005da4:	e7e1      	b.n	8005d6a <VL53L0X_set_reference_spads+0x6e>

08005da6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005da6:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005da8:	f041 0201 	orr.w	r2, r1, #1
 8005dac:	2100      	movs	r1, #0
{
 8005dae:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005db0:	f001 fc44 	bl	800763c <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005db4:	b978      	cbnz	r0, 8005dd6 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 fa3a 	bl	8006230 <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 8005dbc:	b958      	cbnz	r0, 8005dd6 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7ff fccc 	bl	800575e <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 8005dc6:	b930      	cbnz	r0, 8005dd6 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005dc8:	4602      	mov	r2, r0
 8005dca:	4601      	mov	r1, r0
 8005dcc:	4620      	mov	r0, r4

	return Status;
}
 8005dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005dd2:	f001 bc33 	b.w	800763c <VL53L0X_WrByte>
}
 8005dd6:	bd10      	pop	{r4, pc}

08005dd8 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 8005ddc:	f04f 0b00 	mov.w	fp, #0
{
 8005de0:	4689      	mov	r9, r1
 8005de2:	4690      	mov	r8, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005de4:	21ff      	movs	r1, #255	; 0xff
 8005de6:	2201      	movs	r2, #1
{
 8005de8:	4605      	mov	r5, r0
 8005dea:	461f      	mov	r7, r3
 8005dec:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8005df0:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
	uint8_t PhaseCalint = 0;
 8005df4:	f88d b007 	strb.w	fp, [sp, #7]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005df8:	f001 fc20 	bl	800763c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005dfc:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005dfe:	4604      	mov	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005e00:	4659      	mov	r1, fp
 8005e02:	4628      	mov	r0, r5
 8005e04:	f001 fc1a 	bl	800763c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e08:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005e0a:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e0c:	21ff      	movs	r1, #255	; 0xff
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f001 fc14 	bl	800763c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005e14:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e16:	4304      	orrs	r4, r0
 8005e18:	b264      	sxtb	r4, r4

	if (read_not_write) {
 8005e1a:	f1b9 0f00 	cmp.w	r9, #0
 8005e1e:	d030      	beq.n	8005e82 <VL53L0X_ref_calibration_io+0xaa>
		if (vhv_enable)
 8005e20:	f1ba 0f00 	cmp.w	sl, #0
 8005e24:	d006      	beq.n	8005e34 <VL53L0X_ref_calibration_io+0x5c>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e28:	21cb      	movs	r1, #203	; 0xcb
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f001 fb77 	bl	800751e <VL53L0X_RdByte>
 8005e30:	4304      	orrs	r4, r0
 8005e32:	b264      	sxtb	r4, r4
		if (phase_enable)
 8005e34:	b13e      	cbz	r6, 8005e46 <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005e36:	f10d 0207 	add.w	r2, sp, #7
 8005e3a:	21ee      	movs	r1, #238	; 0xee
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f001 fb6e 	bl	800751e <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005e42:	4304      	orrs	r4, r0
 8005e44:	b264      	sxtb	r4, r4
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005e46:	2201      	movs	r2, #1
 8005e48:	21ff      	movs	r1, #255	; 0xff
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f001 fbf6 	bl	800763c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005e50:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005e52:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005e54:	2100      	movs	r1, #0
 8005e56:	4628      	mov	r0, r5
 8005e58:	f001 fbf0 	bl	800763c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005e5c:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005e5e:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e60:	2200      	movs	r2, #0
 8005e62:	21ff      	movs	r1, #255	; 0xff
 8005e64:	4628      	mov	r0, r5
 8005e66:	f001 fbe9 	bl	800763c <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005e6a:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005e6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005e70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e72:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005e74:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 8005e78:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005e7a:	7013      	strb	r3, [r2, #0]
}
 8005e7c:	b003      	add	sp, #12
 8005e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 8005e82:	f1ba 0f00 	cmp.w	sl, #0
 8005e86:	d006      	beq.n	8005e96 <VL53L0X_ref_calibration_io+0xbe>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005e88:	4642      	mov	r2, r8
 8005e8a:	21cb      	movs	r1, #203	; 0xcb
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f001 fbd5 	bl	800763c <VL53L0X_WrByte>
 8005e92:	4304      	orrs	r4, r0
 8005e94:	b264      	sxtb	r4, r4
		if (phase_enable)
 8005e96:	2e00      	cmp	r6, #0
 8005e98:	d0d5      	beq.n	8005e46 <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	2280      	movs	r2, #128	; 0x80
 8005e9e:	21ee      	movs	r1, #238	; 0xee
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f001 fbed 	bl	8007680 <VL53L0X_UpdateByte>
 8005ea6:	e7cc      	b.n	8005e42 <VL53L0X_ref_calibration_io+0x6a>

08005ea8 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eac:	b086      	sub	sp, #24
 8005eae:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 8005eb0:	2200      	movs	r2, #0
{
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
 8005eb6:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005eba:	461e      	mov	r6, r3
 8005ebc:	b343      	cbz	r3, 8005f10 <VL53L0X_perform_vhv_calibration+0x68>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005ebe:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f001 fbb8 	bl	800763c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8005ecc:	bb10      	cbnz	r0, 8005f14 <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005ece:	2140      	movs	r1, #64	; 0x40
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f7ff ff68 	bl	8005da6 <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005ed6:	b9e8      	cbnz	r0, 8005f14 <VL53L0X_perform_vhv_calibration+0x6c>
 8005ed8:	2f01      	cmp	r7, #1
 8005eda:	d11b      	bne.n	8005f14 <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005edc:	f10d 0317 	add.w	r3, sp, #23
 8005ee0:	9003      	str	r0, [sp, #12]
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	9702      	str	r7, [sp, #8]
 8005eea:	f8cd 8000 	str.w	r8, [sp]
 8005eee:	4639      	mov	r1, r7
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f7ff ff71 	bl	8005dd8 <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005ef6:	b940      	cbnz	r0, 8005f0a <VL53L0X_perform_vhv_calibration+0x62>
 8005ef8:	b13e      	cbz	r6, 8005f0a <VL53L0X_perform_vhv_calibration+0x62>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005efa:	462a      	mov	r2, r5
 8005efc:	2101      	movs	r1, #1
 8005efe:	4620      	mov	r0, r4
 8005f00:	f001 fb9c 	bl	800763c <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005f04:	b908      	cbnz	r0, 8005f0a <VL53L0X_perform_vhv_calibration+0x62>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005f06:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 8005f0a:	b006      	add	sp, #24
 8005f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 8005f10:	461d      	mov	r5, r3
 8005f12:	e7d6      	b.n	8005ec2 <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 8005f14:	2300      	movs	r3, #0
 8005f16:	f888 3000 	strb.w	r3, [r8]
 8005f1a:	e7ec      	b.n	8005ef6 <VL53L0X_perform_vhv_calibration+0x4e>

08005f1c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f20:	4604      	mov	r4, r0
 8005f22:	b086      	sub	sp, #24
 8005f24:	4688      	mov	r8, r1
 8005f26:	4617      	mov	r7, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005f28:	461e      	mov	r6, r3
 8005f2a:	b343      	cbz	r3, 8005f7e <VL53L0X_perform_phase_calibration+0x62>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005f2c:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005f30:	2202      	movs	r2, #2
 8005f32:	2101      	movs	r1, #1
 8005f34:	4620      	mov	r0, r4
 8005f36:	f001 fb81 	bl	800763c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8005f3a:	bb10      	cbnz	r0, 8005f82 <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005f3c:	4601      	mov	r1, r0
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7ff ff31 	bl	8005da6 <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005f44:	b9e8      	cbnz	r0, 8005f82 <VL53L0X_perform_phase_calibration+0x66>
 8005f46:	2f01      	cmp	r7, #1
 8005f48:	d11b      	bne.n	8005f82 <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005f4a:	f10d 0317 	add.w	r3, sp, #23
 8005f4e:	9002      	str	r0, [sp, #8]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	4602      	mov	r2, r0
 8005f54:	4603      	mov	r3, r0
 8005f56:	9703      	str	r7, [sp, #12]
 8005f58:	f8cd 8004 	str.w	r8, [sp, #4]
 8005f5c:	4639      	mov	r1, r7
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f7ff ff3a 	bl	8005dd8 <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005f64:	b940      	cbnz	r0, 8005f78 <VL53L0X_perform_phase_calibration+0x5c>
 8005f66:	b13e      	cbz	r6, 8005f78 <VL53L0X_perform_phase_calibration+0x5c>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f68:	462a      	mov	r2, r5
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	f001 fb65 	bl	800763c <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005f72:	b908      	cbnz	r0, 8005f78 <VL53L0X_perform_phase_calibration+0x5c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005f74:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 8005f78:	b006      	add	sp, #24
 8005f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 8005f7e:	461d      	mov	r5, r3
 8005f80:	e7d6      	b.n	8005f30 <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	f888 3000 	strb.w	r3, [r8]
 8005f88:	e7ec      	b.n	8005f64 <VL53L0X_perform_phase_calibration+0x48>

08005f8a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8c:	461e      	mov	r6, r3
 8005f8e:	4617      	mov	r7, r2

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005f90:	2300      	movs	r3, #0
 8005f92:	4632      	mov	r2, r6
{
 8005f94:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005f96:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
	Status = VL53L0X_perform_vhv_calibration(
 8005f9a:	f7ff ff85 	bl	8005ea8 <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005f9e:	b970      	cbnz	r0, 8005fbe <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4632      	mov	r2, r6
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f7ff ffb8 	bl	8005f1c <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005fac:	b938      	cbnz	r0, 8005fbe <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005fae:	462a      	mov	r2, r5
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f001 fb42 	bl	800763c <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005fb8:	b908      	cbnz	r0, 8005fbe <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005fba:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 8005fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005fc0 <VL53L0X_perform_ref_spad_management>:
{
 8005fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	b093      	sub	sp, #76	; 0x4c
	uint32_t lastSpadIndex = 0;
 8005fc6:	2300      	movs	r3, #0
{
 8005fc8:	910a      	str	r1, [sp, #40]	; 0x28
 8005fca:	920b      	str	r2, [sp, #44]	; 0x2c
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005fcc:	f880 3124 	strb.w	r3, [r0, #292]	; 0x124
 8005fd0:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
 8005fd4:	f880 3126 	strb.w	r3, [r0, #294]	; 0x126
 8005fd8:	f880 3127 	strb.w	r3, [r0, #295]	; 0x127
 8005fdc:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
 8005fe0:	f880 3129 	strb.w	r3, [r0, #297]	; 0x129
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	21ff      	movs	r1, #255	; 0xff
{
 8005fe8:	4605      	mov	r5, r0
	uint32_t lastSpadIndex = 0;
 8005fea:	930e      	str	r3, [sp, #56]	; 0x38
	int32_t nextGoodSpad = 0;
 8005fec:	930f      	str	r3, [sp, #60]	; 0x3c
	uint8_t VhvSettings = 0;
 8005fee:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	uint8_t PhaseCal = 0;
 8005ff2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005ff6:	f8b0 813a 	ldrh.w	r8, [r0, #314]	; 0x13a
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ffa:	f001 fb1f 	bl	800763c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8005ffe:	4604      	mov	r4, r0
 8006000:	2800      	cmp	r0, #0
 8006002:	f040 810e 	bne.w	8006222 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 8006006:	4602      	mov	r2, r0
 8006008:	214f      	movs	r1, #79	; 0x4f
 800600a:	4628      	mov	r0, r5
 800600c:	f001 fb16 	bl	800763c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006010:	4604      	mov	r4, r0
 8006012:	2800      	cmp	r0, #0
 8006014:	f040 8105 	bne.w	8006222 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 8006018:	222c      	movs	r2, #44	; 0x2c
 800601a:	214e      	movs	r1, #78	; 0x4e
 800601c:	4628      	mov	r0, r5
 800601e:	f001 fb0d 	bl	800763c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006022:	4604      	mov	r4, r0
 8006024:	2800      	cmp	r0, #0
 8006026:	f040 80fc 	bne.w	8006222 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800602a:	4602      	mov	r2, r0
 800602c:	21ff      	movs	r1, #255	; 0xff
 800602e:	4628      	mov	r0, r5
 8006030:	f001 fb04 	bl	800763c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006034:	4604      	mov	r4, r0
 8006036:	2800      	cmp	r0, #0
 8006038:	f040 80f3 	bne.w	8006222 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 800603c:	22b4      	movs	r2, #180	; 0xb4
 800603e:	21b6      	movs	r1, #182	; 0xb6
 8006040:	4628      	mov	r0, r5
 8006042:	f001 fafb 	bl	800763c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006046:	4604      	mov	r4, r0
 8006048:	2800      	cmp	r0, #0
 800604a:	f040 80ea 	bne.w	8006222 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 800604e:	4602      	mov	r2, r0
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	4628      	mov	r0, r5
 8006054:	f001 faf2 	bl	800763c <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006058:	4604      	mov	r4, r0
 800605a:	2800      	cmp	r0, #0
 800605c:	f040 80e1 	bne.w	8006222 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006060:	4603      	mov	r3, r0
 8006062:	f10d 0235 	add.w	r2, sp, #53	; 0x35
 8006066:	a90d      	add	r1, sp, #52	; 0x34
 8006068:	4628      	mov	r0, r5
 800606a:	f7ff ff8e 	bl	8005f8a <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 800606e:	4604      	mov	r4, r0
 8006070:	2800      	cmp	r0, #0
 8006072:	f040 80d6 	bne.w	8006222 <VL53L0X_perform_ref_spad_management+0x262>
		lastSpadIndex = currentSpadIndex;
 8006076:	af12      	add	r7, sp, #72	; 0x48
					Dev->Data.SpadData.RefGoodSpadMap,
 8006078:	f505 7395 	add.w	r3, r5, #298	; 0x12a
		lastSpadIndex = currentSpadIndex;
 800607c:	f847 0d10 	str.w	r0, [r7, #-16]!
					Dev->Data.SpadData.RefGoodSpadMap,
 8006080:	9307      	str	r3, [sp, #28]
		Status = enable_ref_spads(Dev,
 8006082:	2303      	movs	r3, #3
 8006084:	9303      	str	r3, [sp, #12]
 8006086:	2106      	movs	r1, #6
 8006088:	23b4      	movs	r3, #180	; 0xb4
					Dev->Data.SpadData.RefSpadEnables,
 800608a:	f505 7992 	add.w	r9, r5, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800608e:	e88d 000a 	stmia.w	sp, {r1, r3}
 8006092:	9002      	str	r0, [sp, #8]
 8006094:	4601      	mov	r1, r0
 8006096:	9704      	str	r7, [sp, #16]
 8006098:	464b      	mov	r3, r9
 800609a:	9a07      	ldr	r2, [sp, #28]
 800609c:	4628      	mov	r0, r5
 800609e:	f7ff fdb6 	bl	8005c0e <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 80060a2:	4604      	mov	r4, r0
 80060a4:	2800      	cmp	r0, #0
 80060a6:	f040 80bc 	bne.w	8006222 <VL53L0X_perform_ref_spad_management+0x262>
		Status = perform_ref_signal_measurement(Dev,
 80060aa:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80060ae:	4628      	mov	r0, r5
		currentSpadIndex = lastSpadIndex;
 80060b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
		Status = perform_ref_signal_measurement(Dev,
 80060b2:	f7ff fdf7 	bl	8005ca4 <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 80060b6:	4604      	mov	r4, r0
 80060b8:	2800      	cmp	r0, #0
 80060ba:	f040 80b2 	bne.w	8006222 <VL53L0X_perform_ref_spad_management+0x262>
 80060be:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80060c2:	4543      	cmp	r3, r8
 80060c4:	d955      	bls.n	8006172 <VL53L0X_perform_ref_spad_management+0x1b2>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80060c6:	f885 0124 	strb.w	r0, [r5, #292]	; 0x124
 80060ca:	f885 0125 	strb.w	r0, [r5, #293]	; 0x125
 80060ce:	f885 0126 	strb.w	r0, [r5, #294]	; 0x126
 80060d2:	f885 0127 	strb.w	r0, [r5, #295]	; 0x127
 80060d6:	f885 0128 	strb.w	r0, [r5, #296]	; 0x128
 80060da:	f885 0129 	strb.w	r0, [r5, #297]	; 0x129
			while ((is_aperture(startSelect + currentSpadIndex)
 80060de:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 80060e2:	f7ff fd71 	bl	8005bc8 <is_aperture>
 80060e6:	b180      	cbz	r0, 800610a <VL53L0X_perform_ref_spad_management+0x14a>
			Status = enable_ref_spads(Dev,
 80060e8:	2206      	movs	r2, #6
 80060ea:	23b4      	movs	r3, #180	; 0xb4
 80060ec:	9704      	str	r7, [sp, #16]
 80060ee:	2703      	movs	r7, #3
 80060f0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80060f4:	9703      	str	r7, [sp, #12]
 80060f6:	9602      	str	r6, [sp, #8]
 80060f8:	464b      	mov	r3, r9
 80060fa:	9a07      	ldr	r2, [sp, #28]
 80060fc:	2101      	movs	r1, #1
 80060fe:	4628      	mov	r0, r5
 8006100:	f7ff fd85 	bl	8005c0e <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 8006104:	b128      	cbz	r0, 8006112 <VL53L0X_perform_ref_spad_management+0x152>
			Status = perform_ref_signal_measurement(Dev,
 8006106:	4604      	mov	r4, r0
	return Status;
 8006108:	e08b      	b.n	8006222 <VL53L0X_perform_ref_spad_management+0x262>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800610a:	2e2b      	cmp	r6, #43	; 0x2b
 800610c:	d8ec      	bhi.n	80060e8 <VL53L0X_perform_ref_spad_management+0x128>
				currentSpadIndex++;
 800610e:	3601      	adds	r6, #1
 8006110:	e7e5      	b.n	80060de <VL53L0X_perform_ref_spad_management+0x11e>
				Status = perform_ref_signal_measurement(Dev,
 8006112:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8006116:	4628      	mov	r0, r5
				currentSpadIndex = lastSpadIndex;
 8006118:	9e0e      	ldr	r6, [sp, #56]	; 0x38
				Status = perform_ref_signal_measurement(Dev,
 800611a:	f7ff fdc3 	bl	8005ca4 <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 800611e:	2800      	cmp	r0, #0
 8006120:	d1f1      	bne.n	8006106 <VL53L0X_perform_ref_spad_management+0x146>
 8006122:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8006126:	4543      	cmp	r3, r8
 8006128:	d97f      	bls.n	800622a <VL53L0X_perform_ref_spad_management+0x26a>
					isApertureSpads_int = 1;
 800612a:	f04f 0a01 	mov.w	sl, #1
			needAptSpads = 1;
 800612e:	f04f 0b01 	mov.w	fp, #1
 8006132:	e022      	b.n	800617a <VL53L0X_perform_ref_spad_management+0x1ba>
				memcpy(lastSpadArray,
 8006134:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 8006138:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
 800613c:	9010      	str	r0, [sp, #64]	; 0x40
 800613e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
			(refSpadCount_int)++;
 8006142:	9f08      	ldr	r7, [sp, #32]
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006144:	9209      	str	r2, [sp, #36]	; 0x24
 8006146:	e02a      	b.n	800619e <VL53L0X_perform_ref_spad_management+0x1de>
			(refSpadCount_int)++;
 8006148:	9f08      	ldr	r7, [sp, #32]
		*refSpadCount = refSpadCount_int;
 800614a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800614c:	601f      	str	r7, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800614e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006150:	f883 a000 	strb.w	sl, [r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006154:	2301      	movs	r3, #1
 8006156:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800615a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
 800616a:	e05a      	b.n	8006222 <VL53L0X_perform_ref_spad_management+0x262>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800616c:	f06f 0431 	mvn.w	r4, #49	; 0x31
 8006170:	e057      	b.n	8006222 <VL53L0X_perform_ref_spad_management+0x262>
	uint8_t	 isApertureSpads_int = 0;
 8006172:	f04f 0a00 	mov.w	sl, #0
	uint32_t refSpadCount_int = 0;
 8006176:	4657      	mov	r7, sl
			needAptSpads = 0;
 8006178:	46d3      	mov	fp, sl
		(peakSignalRateRef < targetRefRate)) {
 800617a:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
	if ((Status == VL53L0X_ERROR_NONE) &&
 800617e:	4590      	cmp	r8, r2
 8006180:	d9e3      	bls.n	800614a <VL53L0X_perform_ref_spad_management+0x18a>
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006182:	eba2 0208 	sub.w	r2, r2, r8
 8006186:	2a00      	cmp	r2, #0
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006188:	f8d9 0000 	ldr.w	r0, [r9]
 800618c:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8006190:	9010      	str	r0, [sp, #64]	; 0x40
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006192:	bfb8      	it	lt
 8006194:	4252      	neglt	r2, r2
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006196:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		lastSignalRateDiff = abs(peakSignalRateRef -
 800619a:	9209      	str	r2, [sp, #36]	; 0x24
		refSpadCount_int	= minimumSpadCount;
 800619c:	2703      	movs	r7, #3
			get_next_good_spad(
 800619e:	ab0f      	add	r3, sp, #60	; 0x3c
 80061a0:	4632      	mov	r2, r6
 80061a2:	2106      	movs	r1, #6
 80061a4:	9807      	ldr	r0, [sp, #28]
 80061a6:	f7ff fce7 	bl	8005b78 <get_next_good_spad>
			if (nextGoodSpad == -1) {
 80061aa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80061ac:	1c73      	adds	r3, r6, #1
 80061ae:	d0dd      	beq.n	800616c <VL53L0X_perform_ref_spad_management+0x1ac>
			(refSpadCount_int)++;
 80061b0:	1c7b      	adds	r3, r7, #1
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80061b2:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
			(refSpadCount_int)++;
 80061b6:	9308      	str	r3, [sp, #32]
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80061b8:	f7ff fd06 	bl	8005bc8 <is_aperture>
 80061bc:	4558      	cmp	r0, fp
 80061be:	4682      	mov	sl, r0
 80061c0:	d1d4      	bne.n	800616c <VL53L0X_perform_ref_spad_management+0x1ac>
			Status = enable_spad_bit(
 80061c2:	4632      	mov	r2, r6
 80061c4:	2106      	movs	r1, #6
 80061c6:	4648      	mov	r0, r9
 80061c8:	f7ff fd08 	bl	8005bdc <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d19a      	bne.n	8006106 <VL53L0X_perform_ref_spad_management+0x146>
				Status = set_ref_spad_map(Dev,
 80061d0:	4649      	mov	r1, r9
 80061d2:	4628      	mov	r0, r5
				currentSpadIndex++;
 80061d4:	3601      	adds	r6, #1
				Status = set_ref_spad_map(Dev,
 80061d6:	f7ff fd10 	bl	8005bfa <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 80061da:	2800      	cmp	r0, #0
 80061dc:	d193      	bne.n	8006106 <VL53L0X_perform_ref_spad_management+0x146>
			Status = perform_ref_signal_measurement(Dev,
 80061de:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80061e2:	4628      	mov	r0, r5
 80061e4:	f7ff fd5e 	bl	8005ca4 <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d18c      	bne.n	8006106 <VL53L0X_perform_ref_spad_management+0x146>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80061ec:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80061f0:	eba1 0208 	sub.w	r2, r1, r8
 80061f4:	2a00      	cmp	r2, #0
 80061f6:	bfb8      	it	lt
 80061f8:	4252      	neglt	r2, r2
			if (peakSignalRateRef > targetRefRate) {
 80061fa:	4588      	cmp	r8, r1
 80061fc:	d29a      	bcs.n	8006134 <VL53L0X_perform_ref_spad_management+0x174>
				if (signalRateDiff > lastSignalRateDiff) {
 80061fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006200:	429a      	cmp	r2, r3
 8006202:	d9a1      	bls.n	8006148 <VL53L0X_perform_ref_spad_management+0x188>
					Status = set_ref_spad_map(Dev,
 8006204:	a910      	add	r1, sp, #64	; 0x40
 8006206:	4628      	mov	r0, r5
 8006208:	f7ff fcf7 	bl	8005bfa <set_ref_spad_map>
					memcpy(
 800620c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8006210:	f8a5 1128 	strh.w	r1, [r5, #296]	; 0x128
					Status = set_ref_spad_map(Dev,
 8006214:	4602      	mov	r2, r0
					memcpy(
 8006216:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006218:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 800621c:	2a00      	cmp	r2, #0
 800621e:	d094      	beq.n	800614a <VL53L0X_perform_ref_spad_management+0x18a>
 8006220:	4614      	mov	r4, r2
}
 8006222:	4620      	mov	r0, r4
 8006224:	b013      	add	sp, #76	; 0x4c
 8006226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t	 isApertureSpads_int = 0;
 800622a:	4682      	mov	sl, r0
	uint32_t refSpadCount_int = 0;
 800622c:	4607      	mov	r7, r0
 800622e:	e77e      	b.n	800612e <VL53L0X_perform_ref_spad_management+0x16e>

08006230 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006230:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 8006232:	ad02      	add	r5, sp, #8
 8006234:	2300      	movs	r3, #0
 8006236:	f805 3d01 	strb.w	r3, [r5, #-1]!
{
 800623a:	4606      	mov	r6, r0
	uint8_t NewDataReady = 0;
 800623c:	24c8      	movs	r4, #200	; 0xc8
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800623e:	4629      	mov	r1, r5
 8006240:	4630      	mov	r0, r6
 8006242:	f7ff fc60 	bl	8005b06 <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 8006246:	b958      	cbnz	r0, 8006260 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006248:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d007      	beq.n	8006260 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006250:	3c01      	subs	r4, #1
 8006252:	d003      	beq.n	800625c <VL53L0X_measurement_poll_for_completion+0x2c>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8006254:	4630      	mov	r0, r6
 8006256:	f001 fa29 	bl	80076ac <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800625a:	e7f0      	b.n	800623e <VL53L0X_measurement_poll_for_completion+0xe>
			Status = VL53L0X_ERROR_TIME_OUT;
 800625c:	f06f 0006 	mvn.w	r0, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8006260:	b002      	add	sp, #8
 8006262:	bd70      	pop	{r4, r5, r6, pc}

08006264 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006264:	b510      	push	{r4, lr}
 8006266:	4601      	mov	r1, r0
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 8006268:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800626c:	428a      	cmp	r2, r1
 800626e:	d802      	bhi.n	8006276 <VL53L0X_isqrt+0x12>
 8006270:	2000      	movs	r0, #0
		bit >>= 2;


	while (bit != 0) {
 8006272:	b912      	cbnz	r2, 800627a <VL53L0X_isqrt+0x16>

		bit >>= 2;
	}

	return res;
}
 8006274:	bd10      	pop	{r4, pc}
		bit >>= 2;
 8006276:	0892      	lsrs	r2, r2, #2
 8006278:	e7f8      	b.n	800626c <VL53L0X_isqrt+0x8>
		if (num >= res + bit) {
 800627a:	1884      	adds	r4, r0, r2
 800627c:	42a1      	cmp	r1, r4
 800627e:	ea4f 0350 	mov.w	r3, r0, lsr #1
			res = (res >> 1) + bit;
 8006282:	bf26      	itte	cs
 8006284:	18d0      	addcs	r0, r2, r3
			num -= res + bit;
 8006286:	1b09      	subcs	r1, r1, r4
			res >>= 1;
 8006288:	4618      	movcc	r0, r3
		bit >>= 2;
 800628a:	0892      	lsrs	r2, r2, #2
 800628c:	e7f1      	b.n	8006272 <VL53L0X_isqrt+0xe>

0800628e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800628e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006290:	2200      	movs	r2, #0
 8006292:	2183      	movs	r1, #131	; 0x83
{
 8006294:	4606      	mov	r6, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006296:	f001 f9d1 	bl	800763c <VL53L0X_WrByte>
 800629a:	4604      	mov	r4, r0

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800629c:	b978      	cbnz	r0, 80062be <VL53L0X_device_read_strobe+0x30>
 800629e:	25c8      	movs	r5, #200	; 0xc8
		LoopNb = 0;
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80062a0:	f10d 0207 	add.w	r2, sp, #7
 80062a4:	2183      	movs	r1, #131	; 0x83
 80062a6:	4630      	mov	r0, r6
 80062a8:	f001 f939 	bl	800751e <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80062ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80062b0:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80062b2:	b923      	cbnz	r3, 80062be <VL53L0X_device_read_strobe+0x30>
 80062b4:	b918      	cbnz	r0, 80062be <VL53L0X_device_read_strobe+0x30>
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80062b6:	3d01      	subs	r5, #1
 80062b8:	d1f2      	bne.n	80062a0 <VL53L0X_device_read_strobe+0x12>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 80062ba:	f06f 0406 	mvn.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80062be:	2201      	movs	r2, #1
 80062c0:	2183      	movs	r1, #131	; 0x83
 80062c2:	4630      	mov	r0, r6
 80062c4:	f001 f9ba 	bl	800763c <VL53L0X_WrByte>
 80062c8:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 80062ca:	b240      	sxtb	r0, r0
 80062cc:	b002      	add	sp, #8
 80062ce:	bd70      	pop	{r4, r5, r6, pc}

080062d0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80062d4:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
 80062d8:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
 80062da:	f04f 0900 	mov.w	r9, #0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80062de:	2e07      	cmp	r6, #7
{
 80062e0:	4604      	mov	r4, r0
 80062e2:	4688      	mov	r8, r1
	uint32_t PartUIDUpper = 0;
 80062e4:	f8cd 901c 	str.w	r9, [sp, #28]
	uint32_t PartUIDLower = 0;
 80062e8:	f8cd 9020 	str.w	r9, [sp, #32]
	if (ReadDataFromDeviceDone != 7) {
 80062ec:	f000 8298 	beq.w	8006820 <VL53L0X_get_info_from_device+0x550>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80062f0:	2201      	movs	r2, #1
 80062f2:	2180      	movs	r1, #128	; 0x80
 80062f4:	f001 f9a2 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80062f8:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80062fa:	4607      	mov	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80062fc:	21ff      	movs	r1, #255	; 0xff
 80062fe:	4620      	mov	r0, r4
 8006300:	f001 f99c 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006304:	464a      	mov	r2, r9
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006306:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006308:	4649      	mov	r1, r9
 800630a:	4620      	mov	r0, r4
 800630c:	f001 f996 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006310:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006312:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006314:	2206      	movs	r2, #6
 8006316:	21ff      	movs	r1, #255	; 0xff
 8006318:	4620      	mov	r0, r4
 800631a:	f001 f98f 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800631e:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006320:	4307      	orrs	r7, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006322:	f10d 0215 	add.w	r2, sp, #21
 8006326:	2183      	movs	r1, #131	; 0x83
 8006328:	4620      	mov	r0, r4
 800632a:	f001 f8f8 	bl	800751e <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800632e:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006332:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006334:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006336:	f042 0204 	orr.w	r2, r2, #4
 800633a:	2183      	movs	r1, #131	; 0x83
 800633c:	4620      	mov	r0, r4
 800633e:	f001 f97d 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006342:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006344:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006346:	2207      	movs	r2, #7
 8006348:	21ff      	movs	r1, #255	; 0xff
 800634a:	4620      	mov	r0, r4
 800634c:	f001 f976 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006350:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006352:	2201      	movs	r2, #1
 8006354:	2181      	movs	r1, #129	; 0x81
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006356:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006358:	4620      	mov	r0, r4
 800635a:	f001 f96f 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800635e:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006360:	4307      	orrs	r7, r0

		Status |= VL53L0X_PollingDelay(Dev);
 8006362:	4620      	mov	r0, r4
 8006364:	f001 f9a2 	bl	80076ac <VL53L0X_PollingDelay>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006368:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_PollingDelay(Dev);
 800636a:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800636c:	2201      	movs	r2, #1
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	4620      	mov	r0, r4
 8006372:	f001 f963 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_PollingDelay(Dev);
 8006376:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006378:	4338      	orrs	r0, r7

		if (((option & 1) == 1) &&
 800637a:	f018 0a01 	ands.w	sl, r8, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800637e:	b245      	sxtb	r5, r0
		if (((option & 1) == 1) &&
 8006380:	f000 8223 	beq.w	80067ca <VL53L0X_get_info_from_device+0x4fa>
 8006384:	07f3      	lsls	r3, r6, #31
 8006386:	f100 8223 	bmi.w	80067d0 <VL53L0X_get_info_from_device+0x500>
			((ReadDataFromDeviceDone & 1) == 0)) {
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800638a:	226b      	movs	r2, #107	; 0x6b
 800638c:	2194      	movs	r1, #148	; 0x94
 800638e:	4620      	mov	r0, r4
 8006390:	f001 f954 	bl	800763c <VL53L0X_WrByte>
 8006394:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006396:	4620      	mov	r0, r4
 8006398:	f7ff ff79 	bl	800628e <VL53L0X_device_read_strobe>
 800639c:	4338      	orrs	r0, r7
 800639e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063a0:	aa06      	add	r2, sp, #24
 80063a2:	2190      	movs	r1, #144	; 0x90
 80063a4:	4620      	mov	r0, r4
 80063a6:	f001 f923 	bl	80075f0 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80063aa:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063ac:	4305      	orrs	r5, r0

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80063ae:	9806      	ldr	r0, [sp, #24]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80063b0:	2224      	movs	r2, #36	; 0x24
 80063b2:	2194      	movs	r1, #148	; 0x94
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80063b4:	f3c0 2b06 	ubfx	fp, r0, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80063b8:	f3c0 39c0 	ubfx	r9, r0, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80063bc:	4620      	mov	r0, r4
 80063be:	f001 f93d 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063c2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80063c4:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80063c6:	4620      	mov	r0, r4
 80063c8:	f7ff ff61 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80063cc:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80063ce:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063d0:	aa06      	add	r2, sp, #24
 80063d2:	2190      	movs	r1, #144	; 0x90
 80063d4:	4620      	mov	r0, r4
 80063d6:	f001 f90b 	bl	80075f0 <VL53L0X_RdDWord>


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80063da:	9b06      	ldr	r3, [sp, #24]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80063dc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80063e0:	0e1a      	lsrs	r2, r3, #24
 80063e2:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80063e6:	0c1a      	lsrs	r2, r3, #16
 80063e8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
			Status |= VL53L0X_device_read_strobe(Dev);
 80063ec:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80063ee:	0a1a      	lsrs	r2, r3, #8

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80063f0:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063f2:	4305      	orrs	r5, r0
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80063f4:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80063f8:	4620      	mov	r0, r4
 80063fa:	2225      	movs	r2, #37	; 0x25
 80063fc:	f001 f91e 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006400:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006402:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006404:	4620      	mov	r0, r4
 8006406:	f7ff ff42 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800640a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 800640c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800640e:	aa06      	add	r2, sp, #24
 8006410:	2190      	movs	r1, #144	; 0x90
 8006412:	4620      	mov	r0, r4
 8006414:	f001 f8ec 	bl	80075f0 <VL53L0X_RdDWord>

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006418:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 800641a:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800641c:	0e1a      	lsrs	r2, r3, #24
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800641e:	4305      	orrs	r5, r0
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006420:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006422:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006424:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800642c:	f018 0302 	ands.w	r3, r8, #2
 8006430:	9302      	str	r3, [sp, #8]
 8006432:	f000 80db 	beq.w	80065ec <VL53L0X_get_info_from_device+0x31c>
 8006436:	f016 0702 	ands.w	r7, r6, #2
 800643a:	f040 80d7 	bne.w	80065ec <VL53L0X_get_info_from_device+0x31c>
			((ReadDataFromDeviceDone & 2) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800643e:	2202      	movs	r2, #2
 8006440:	2194      	movs	r1, #148	; 0x94
 8006442:	4620      	mov	r0, r4
 8006444:	f001 f8fa 	bl	800763c <VL53L0X_WrByte>
 8006448:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 800644a:	4620      	mov	r0, r4
 800644c:	f7ff ff1f 	bl	800628e <VL53L0X_device_read_strobe>
 8006450:	9b01      	ldr	r3, [sp, #4]
 8006452:	4318      	orrs	r0, r3
 8006454:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006456:	f10d 0216 	add.w	r2, sp, #22
 800645a:	2190      	movs	r1, #144	; 0x90
 800645c:	4620      	mov	r0, r4
 800645e:	f001 f85e 	bl	800751e <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006462:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006464:	227b      	movs	r2, #123	; 0x7b
 8006466:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006468:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800646a:	4620      	mov	r0, r4
 800646c:	f001 f8e6 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006470:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006472:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006474:	4620      	mov	r0, r4
 8006476:	f7ff ff0a 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800647a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 800647c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800647e:	f10d 0217 	add.w	r2, sp, #23
 8006482:	2190      	movs	r1, #144	; 0x90
 8006484:	4620      	mov	r0, r4
 8006486:	f001 f84a 	bl	800751e <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 800648a:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800648c:	2277      	movs	r2, #119	; 0x77
 800648e:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006490:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006492:	4620      	mov	r0, r4
 8006494:	f001 f8d2 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006498:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800649a:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff fef6 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80064a2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80064a4:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064a6:	aa06      	add	r2, sp, #24
 80064a8:	2190      	movs	r1, #144	; 0x90
 80064aa:	4620      	mov	r0, r4
 80064ac:	f001 f8a0 	bl	80075f0 <VL53L0X_RdDWord>

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80064b0:	9b06      	ldr	r3, [sp, #24]
 80064b2:	0e5a      	lsrs	r2, r3, #25
 80064b4:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80064b8:	f3c3 4286 	ubfx	r2, r3, #18, #7
 80064bc:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80064c0:	f3c3 22c6 	ubfx	r2, r3, #11, #7
 80064c4:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			Status |= VL53L0X_device_read_strobe(Dev);
 80064c8:	b26d      	sxtb	r5, r5
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80064ca:	f3c3 1206 	ubfx	r2, r3, #4, #7

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	f003 0378 	and.w	r3, r3, #120	; 0x78

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80064d4:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064d6:	4305      	orrs	r5, r0
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80064d8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80064dc:	4620      	mov	r0, r4
 80064de:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80064e0:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80064e4:	f001 f8aa 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064e8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80064ea:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80064ec:	4620      	mov	r0, r4
 80064ee:	f7ff fece 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80064f2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80064f4:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80064f6:	aa06      	add	r2, sp, #24
 80064f8:	2190      	movs	r1, #144	; 0x90
 80064fa:	4620      	mov	r0, r4
 80064fc:	f001 f878 	bl	80075f0 <VL53L0X_RdDWord>

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006500:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 8006502:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006506:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 800650a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800650e:	f3c3 5286 	ubfx	r2, r3, #22, #7
 8006512:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006516:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 800651a:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800651e:	f3c3 2206 	ubfx	r2, r3, #8, #7
 8006522:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			Status |= VL53L0X_device_read_strobe(Dev);
 8006526:	b26d      	sxtb	r5, r5
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006528:	f3c3 0246 	ubfx	r2, r3, #1, #7

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800652c:	019b      	lsls	r3, r3, #6
 800652e:	f003 0340 	and.w	r3, r3, #64	; 0x40

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006532:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006534:	4305      	orrs	r5, r0
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006536:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800653a:	4620      	mov	r0, r4
 800653c:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800653e:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006542:	f001 f87b 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006546:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006548:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 800654a:	4620      	mov	r0, r4
 800654c:	f7ff fe9f 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006550:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006552:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006554:	aa06      	add	r2, sp, #24
 8006556:	2190      	movs	r1, #144	; 0x90
 8006558:	4620      	mov	r0, r4
 800655a:	f001 f849 	bl	80075f0 <VL53L0X_RdDWord>

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800655e:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 8006560:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006564:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 8006568:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800656c:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 8006570:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006574:	f3c3 3206 	ubfx	r2, r3, #12, #7
 8006578:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			Status |= VL53L0X_device_read_strobe(Dev);
 800657c:	b26d      	sxtb	r5, r5
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800657e:	f3c3 1246 	ubfx	r2, r3, #5, #7

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	f003 037c 	and.w	r3, r3, #124	; 0x7c

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006588:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800658a:	4305      	orrs	r5, r0
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800658c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006590:	4620      	mov	r0, r4
 8006592:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006594:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006598:	f001 f850 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800659c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800659e:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 80065a0:	4620      	mov	r0, r4
 80065a2:	f7ff fe74 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80065a6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80065a8:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80065aa:	aa06      	add	r2, sp, #24
 80065ac:	2190      	movs	r1, #144	; 0x90
 80065ae:	4620      	mov	r0, r4
 80065b0:	f001 f81e 	bl	80075f0 <VL53L0X_RdDWord>

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80065b4:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 80065b6:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
			ProductId[18] = '\0';
 80065ba:	f88d 703e 	strb.w	r7, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
 80065be:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 80065c2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80065c6:	f3c3 52c6 	ubfx	r2, r3, #23, #7
			Status |= VL53L0X_device_read_strobe(Dev);
 80065ca:	b26d      	sxtb	r5, r5
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80065cc:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80065d0:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80065d4:	4305      	orrs	r5, r0
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80065d6:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80065da:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80065de:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80065e2:	b26d      	sxtb	r5, r5
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80065e4:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80065e8:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d

		}

		if (((option & 4) == 4) &&
 80065ec:	f018 0304 	ands.w	r3, r8, #4
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	f000 80ef 	beq.w	80067d4 <VL53L0X_get_info_from_device+0x504>
 80065f6:	0777      	lsls	r7, r6, #29
 80065f8:	f100 80ec 	bmi.w	80067d4 <VL53L0X_get_info_from_device+0x504>
			((ReadDataFromDeviceDone & 4) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80065fc:	227b      	movs	r2, #123	; 0x7b
 80065fe:	2194      	movs	r1, #148	; 0x94
 8006600:	4620      	mov	r0, r4
 8006602:	f001 f81b 	bl	800763c <VL53L0X_WrByte>
 8006606:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006608:	4620      	mov	r0, r4
 800660a:	f7ff fe40 	bl	800628e <VL53L0X_device_read_strobe>
 800660e:	4338      	orrs	r0, r7
 8006610:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006612:	aa07      	add	r2, sp, #28
 8006614:	2190      	movs	r1, #144	; 0x90
 8006616:	4620      	mov	r0, r4
 8006618:	f000 ffea 	bl	80075f0 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 800661c:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800661e:	227c      	movs	r2, #124	; 0x7c
 8006620:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006622:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006624:	4620      	mov	r0, r4
 8006626:	f001 f809 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800662a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800662c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800662e:	4620      	mov	r0, r4
 8006630:	f7ff fe2d 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006634:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006636:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006638:	aa08      	add	r2, sp, #32
 800663a:	2190      	movs	r1, #144	; 0x90
 800663c:	4620      	mov	r0, r4
 800663e:	f000 ffd7 	bl	80075f0 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006642:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006644:	2273      	movs	r2, #115	; 0x73
 8006646:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006648:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800664a:	4620      	mov	r0, r4
 800664c:	f000 fff6 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006650:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006652:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006654:	4620      	mov	r0, r4
 8006656:	f7ff fe1a 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800665a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 800665c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800665e:	aa06      	add	r2, sp, #24
 8006660:	2190      	movs	r1, #144	; 0x90
 8006662:	4620      	mov	r0, r4
 8006664:	f000 ffc4 	bl	80075f0 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006668:	b26d      	sxtb	r5, r5

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800666a:	2274      	movs	r2, #116	; 0x74
 800666c:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800666e:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006670:	4620      	mov	r0, r4
				0x000000ff) << 8;
 8006672:	9f06      	ldr	r7, [sp, #24]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006674:	f000 ffe2 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006678:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800667a:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800667c:	4620      	mov	r0, r4
 800667e:	f7ff fe06 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006682:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006684:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006686:	aa06      	add	r2, sp, #24
 8006688:	2190      	movs	r1, #144	; 0x90
 800668a:	4620      	mov	r0, r4
 800668c:	f000 ffb0 	bl	80075f0 <VL53L0X_RdDWord>
				0x000000ff) << 8;
 8006690:	023f      	lsls	r7, r7, #8

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006692:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006696:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006698:	2275      	movs	r2, #117	; 0x75
 800669a:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800669c:	4305      	orrs	r5, r0
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800669e:	b2bf      	uxth	r7, r7
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80066a0:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80066a2:	431f      	orrs	r7, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80066a4:	f000 ffca 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80066a8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80066aa:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80066ac:	4620      	mov	r0, r4
 80066ae:	f7ff fdee 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80066b2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80066b4:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80066b6:	aa06      	add	r2, sp, #24
 80066b8:	2190      	movs	r1, #144	; 0x90
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 ff98 	bl	80075f0 <VL53L0X_RdDWord>

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 80066c0:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 80066c2:	b26d      	sxtb	r5, r5
							<< 8;
 80066c4:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 80066c6:	b29b      	uxth	r3, r3

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80066c8:	2276      	movs	r2, #118	; 0x76
 80066ca:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80066cc:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80066ce:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 80066d0:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80066d2:	f000 ffb3 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80066d6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80066d8:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80066da:	4620      	mov	r0, r4
 80066dc:	f7ff fdd7 	bl	800628e <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80066e0:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80066e2:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80066e4:	aa06      	add	r2, sp, #24
 80066e6:	2190      	movs	r1, #144	; 0x90
 80066e8:	4620      	mov	r0, r4
 80066ea:	f000 ff81 	bl	80075f0 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80066ee:	b26d      	sxtb	r5, r5

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80066f0:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80066f4:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80066f6:	4305      	orrs	r5, r0
 80066f8:	b26d      	sxtb	r5, r5
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80066fa:	4313      	orrs	r3, r2
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80066fc:	2200      	movs	r2, #0
 80066fe:	2181      	movs	r1, #129	; 0x81
 8006700:	4620      	mov	r0, r4
 8006702:	9303      	str	r3, [sp, #12]
 8006704:	f000 ff9a 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006708:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800670a:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800670c:	21ff      	movs	r1, #255	; 0xff
 800670e:	4620      	mov	r0, r4
 8006710:	f000 ff94 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006714:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006716:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006718:	f10d 0215 	add.w	r2, sp, #21
 800671c:	2183      	movs	r1, #131	; 0x83
 800671e:	4620      	mov	r0, r4
 8006720:	f000 fefd 	bl	800751e <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006724:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006728:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800672a:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800672c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8006730:	2183      	movs	r1, #131	; 0x83
 8006732:	4620      	mov	r0, r4
 8006734:	f000 ff82 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006738:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800673a:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800673c:	2201      	movs	r2, #1
 800673e:	21ff      	movs	r1, #255	; 0xff
 8006740:	4620      	mov	r0, r4
 8006742:	f000 ff7b 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006746:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006748:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800674a:	2201      	movs	r2, #1
 800674c:	2100      	movs	r1, #0
 800674e:	4620      	mov	r0, r4
 8006750:	f000 ff74 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006754:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006756:	4305      	orrs	r5, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006758:	2200      	movs	r2, #0
 800675a:	21ff      	movs	r1, #255	; 0xff
 800675c:	4620      	mov	r0, r4
 800675e:	f000 ff6d 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006762:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006764:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006766:	2200      	movs	r2, #0
 8006768:	2180      	movs	r1, #128	; 0x80
 800676a:	4620      	mov	r0, r4
 800676c:	f000 ff66 	bl	800763c <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006770:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006772:	4305      	orrs	r5, r0
 8006774:	b26d      	sxtb	r5, r5
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	bb1d      	cbnz	r5, 80067c2 <VL53L0X_get_info_from_device+0x4f2>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800677a:	f1ba 0f00 	cmp.w	sl, #0
 800677e:	d001      	beq.n	8006784 <VL53L0X_get_info_from_device+0x4b4>
 8006780:	07f0      	lsls	r0, r6, #31
 8006782:	d52a      	bpl.n	80067da <VL53L0X_get_info_from_device+0x50a>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
			}
		}

		if (((option & 2) == 2) &&
 8006784:	9a02      	ldr	r2, [sp, #8]
 8006786:	2a00      	cmp	r2, #0
 8006788:	d138      	bne.n	80067fc <VL53L0X_get_info_from_device+0x52c>
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);

		}

		if (((option & 4) == 4) &&
 800678a:	9a01      	ldr	r2, [sp, #4]
 800678c:	b1aa      	cbz	r2, 80067ba <VL53L0X_get_info_from_device+0x4ea>
 800678e:	0772      	lsls	r2, r6, #29
 8006790:	d413      	bmi.n	80067ba <VL53L0X_get_info_from_device+0x4ea>
			((ReadDataFromDeviceDone & 4) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006792:	9a07      	ldr	r2, [sp, #28]
 8006794:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006798:	027f      	lsls	r7, r7, #9
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800679a:	9a08      	ldr	r2, [sp, #32]
 800679c:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067a0:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
			if (DistMeasFixed1104_400_mm != 0) {
 80067a4:	b13b      	cbz	r3, 80067b6 <VL53L0X_get_info_from_device+0x4e6>
					OffsetFixed1104_mm =
 80067a6:	f5a3 52c8 	sub.w	r2, r3, #6400	; 0x1900
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80067aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067ae:	4353      	muls	r3, r2
 80067b0:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 80067b2:	425b      	negs	r3, r3
 80067b4:	b29b      	uxth	r3, r3
			}

			PALDevDataSet(Dev,
 80067b6:	b21b      	sxth	r3, r3
 80067b8:	60e3      	str	r3, [r4, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80067ba:	ea46 0608 	orr.w	r6, r6, r8
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80067be:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80067c2:	4628      	mov	r0, r5
 80067c4:	b011      	add	sp, #68	; 0x44
 80067c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
 80067ca:	46d1      	mov	r9, sl
	uint8_t ReferenceSpadCount = 0;
 80067cc:	46d3      	mov	fp, sl
 80067ce:	e62d      	b.n	800642c <VL53L0X_get_info_from_device+0x15c>
 80067d0:	46cb      	mov	fp, r9
 80067d2:	e62b      	b.n	800642c <VL53L0X_get_info_from_device+0x15c>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80067d4:	2700      	movs	r7, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 80067d6:	463b      	mov	r3, r7
 80067d8:	e790      	b.n	80066fc <VL53L0X_get_info_from_device+0x42c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067da:	f884 b113 	strb.w	fp, [r4, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067de:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
 80067e2:	f504 7195 	add.w	r1, r4, #298	; 0x12a
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80067e6:	462a      	mov	r2, r5
					NvmRefGoodSpadMap[i];
 80067e8:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80067ec:	f812 000e 	ldrb.w	r0, [r2, lr]
 80067f0:	f801 0b01 	strb.w	r0, [r1], #1
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80067f4:	3201      	adds	r2, #1
 80067f6:	2a06      	cmp	r2, #6
 80067f8:	d1f8      	bne.n	80067ec <VL53L0X_get_info_from_device+0x51c>
 80067fa:	e7c3      	b.n	8006784 <VL53L0X_get_info_from_device+0x4b4>
		if (((option & 2) == 2) &&
 80067fc:	07b1      	lsls	r1, r6, #30
 80067fe:	d4c4      	bmi.n	800678a <VL53L0X_get_info_from_device+0x4ba>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006800:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8006804:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006808:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800680c:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006810:	a90b      	add	r1, sp, #44	; 0x2c
 8006812:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
 8006816:	9302      	str	r3, [sp, #8]
 8006818:	f001 fd28 	bl	800826c <strcpy>
 800681c:	9b02      	ldr	r3, [sp, #8]
 800681e:	e7b4      	b.n	800678a <VL53L0X_get_info_from_device+0x4ba>
 8006820:	464d      	mov	r5, r9
	return Status;
 8006822:	e7ce      	b.n	80067c2 <VL53L0X_get_info_from_device+0x4f2>

08006824 <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 8006824:	b150      	cbz	r0, 800683c <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
 8006826:	3801      	subs	r0, #1
 8006828:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800682a:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 800682e:	b29a      	uxth	r2, r3
 8006830:	f103 0301 	add.w	r3, r3, #1
 8006834:	d103      	bne.n	800683e <VL53L0X_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8006836:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800683a:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;

}
 800683c:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 800683e:	0840      	lsrs	r0, r0, #1
 8006840:	e7f3      	b.n	800682a <VL53L0X_encode_timeout+0x6>

08006842 <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006842:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006844:	0a00      	lsrs	r0, r0, #8
 8006846:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 800684a:	3001      	adds	r0, #1
 800684c:	4770      	bx	lr
	...

08006850 <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006850:	4808      	ldr	r0, [pc, #32]	; (8006874 <VL53L0X_calc_timeout_mclks+0x24>)

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006856:	4342      	muls	r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006858:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 800685c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006860:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006864:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006868:	fb03 0001 	mla	r0, r3, r1, r0

	return timeout_period_mclks;
}
 800686c:	fbb0 f0f2 	udiv	r0, r0, r2
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	003a2f00 	.word	0x003a2f00

08006878 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006878:	b510      	push	{r4, lr}
	macro_period_ps = (uint32_t)(macro_period_vclks
 800687a:	4b08      	ldr	r3, [pc, #32]	; (800689c <VL53L0X_calc_timeout_us+0x24>)
 800687c:	435a      	muls	r2, r3
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800687e:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8006882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
		+ (macro_period_ns / 2)) / 1000;
 8006886:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800688a:	fbb2 f3f0 	udiv	r3, r2, r0
		+ (macro_period_ns / 2)) / 1000;
 800688e:	fbb2 f2f4 	udiv	r2, r2, r4
 8006892:	fb01 2203 	mla	r2, r1, r3, r2

	return actual_timeout_period_us;
}
 8006896:	fbb2 f0f0 	udiv	r0, r2, r0
 800689a:	bd10      	pop	{r4, pc}
 800689c:	003a2f00 	.word	0x003a2f00

080068a0 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80068a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80068a4:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
 80068a6:	f04f 0400 	mov.w	r4, #0
{
 80068aa:	4606      	mov	r6, r0
 80068ac:	4690      	mov	r8, r2
	uint8_t EncodedTimeOutByte = 0;
 80068ae:	f88d 4003 	strb.w	r4, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 80068b2:	f8ad 4004 	strh.w	r4, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80068b6:	d81d      	bhi.n	80068f4 <get_sequence_step_timeout+0x54>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80068b8:	f10d 0202 	add.w	r2, sp, #2
 80068bc:	4621      	mov	r1, r4
 80068be:	f7fe fba7 	bl	8005010 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80068c2:	4605      	mov	r5, r0
 80068c4:	b930      	cbnz	r0, 80068d4 <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
 80068c6:	f10d 0203 	add.w	r2, sp, #3
 80068ca:	2146      	movs	r1, #70	; 0x46
 80068cc:	4630      	mov	r0, r6
 80068ce:	f000 fe26 	bl	800751e <VL53L0X_RdByte>
 80068d2:	4605      	mov	r5, r0
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80068d4:	f89d 0003 	ldrb.w	r0, [sp, #3]
				Status = VL53L0X_RdWord(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80068d8:	f7ff ffb3 	bl	8006842 <VL53L0X_decode_timeout>
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80068dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80068e0:	b281      	uxth	r1, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7ff ffc8 	bl	8006878 <VL53L0X_calc_timeout_us>
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80068e8:	f8c8 0000 	str.w	r0, [r8]

	return Status;
}
 80068ec:	4628      	mov	r0, r5
 80068ee:	b004      	add	sp, #16
 80068f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80068f4:	2903      	cmp	r1, #3
 80068f6:	d118      	bne.n	800692a <get_sequence_step_timeout+0x8a>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80068f8:	f10d 0202 	add.w	r2, sp, #2
 80068fc:	4621      	mov	r1, r4
 80068fe:	f7fe fb87 	bl	8005010 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8006902:	4605      	mov	r5, r0
 8006904:	2800      	cmp	r0, #0
 8006906:	d14a      	bne.n	800699e <get_sequence_step_timeout+0xfe>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006908:	4601      	mov	r1, r0
 800690a:	f10d 0202 	add.w	r2, sp, #2
 800690e:	4630      	mov	r0, r6
 8006910:	f7fe fb7e 	bl	8005010 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8006914:	4605      	mov	r5, r0
 8006916:	b928      	cbnz	r0, 8006924 <get_sequence_step_timeout+0x84>
				Status = VL53L0X_RdWord(Dev,
 8006918:	aa01      	add	r2, sp, #4
 800691a:	2151      	movs	r1, #81	; 0x51
 800691c:	4630      	mov	r0, r6
 800691e:	f000 fe47 	bl	80075b0 <VL53L0X_RdWord>
 8006922:	4605      	mov	r5, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006924:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8006928:	e7d6      	b.n	80068d8 <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800692a:	2904      	cmp	r1, #4
 800692c:	d139      	bne.n	80069a2 <get_sequence_step_timeout+0x102>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800692e:	a902      	add	r1, sp, #8
 8006930:	f7fe fbc1 	bl	80050b6 <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006934:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8006938:	b369      	cbz	r1, 8006996 <get_sequence_step_timeout+0xf6>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800693a:	f10d 0202 	add.w	r2, sp, #2
 800693e:	4621      	mov	r1, r4
 8006940:	4630      	mov	r0, r6
 8006942:	f7fe fb65 	bl	8005010 <VL53L0X_GetVcselPulsePeriod>
 8006946:	4605      	mov	r5, r0
 8006948:	4607      	mov	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
 800694a:	bb30      	cbnz	r0, 800699a <get_sequence_step_timeout+0xfa>
				Status = VL53L0X_RdWord(Dev,
 800694c:	aa01      	add	r2, sp, #4
 800694e:	2151      	movs	r1, #81	; 0x51
 8006950:	4630      	mov	r0, r6
 8006952:	f000 fe2d 	bl	80075b0 <VL53L0X_RdWord>
 8006956:	4605      	mov	r5, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006958:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800695c:	f7ff ff71 	bl	8006842 <VL53L0X_decode_timeout>
 8006960:	b284      	uxth	r4, r0
		if (Status == VL53L0X_ERROR_NONE) {
 8006962:	b99d      	cbnz	r5, 800698c <get_sequence_step_timeout+0xec>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006964:	f10d 0202 	add.w	r2, sp, #2
 8006968:	2101      	movs	r1, #1
 800696a:	4630      	mov	r0, r6
 800696c:	f7fe fb50 	bl	8005010 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8006970:	4605      	mov	r5, r0
 8006972:	b990      	cbnz	r0, 800699a <get_sequence_step_timeout+0xfa>
			Status = VL53L0X_RdWord(Dev,
 8006974:	f10d 0206 	add.w	r2, sp, #6
 8006978:	2171      	movs	r1, #113	; 0x71
 800697a:	4630      	mov	r0, r6
 800697c:	f000 fe18 	bl	80075b0 <VL53L0X_RdWord>
 8006980:	4605      	mov	r5, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006982:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8006986:	f7ff ff5c 	bl	8006842 <VL53L0X_decode_timeout>
 800698a:	b287      	uxth	r7, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800698c:	1b3c      	subs	r4, r7, r4
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800698e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8006992:	b2a1      	uxth	r1, r4
 8006994:	e7a5      	b.n	80068e2 <get_sequence_step_timeout+0x42>
		PreRangeTimeOutMClks = 0;
 8006996:	460c      	mov	r4, r1
 8006998:	e7e4      	b.n	8006964 <get_sequence_step_timeout+0xc4>
	uint16_t FinalRangeTimeOutMClks = 0;
 800699a:	2700      	movs	r7, #0
 800699c:	e7f6      	b.n	800698c <get_sequence_step_timeout+0xec>
	uint32_t TimeoutMicroSeconds = 0;
 800699e:	4620      	mov	r0, r4
 80069a0:	e7a2      	b.n	80068e8 <get_sequence_step_timeout+0x48>
 80069a2:	4620      	mov	r0, r4
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069a4:	4625      	mov	r5, r4
 80069a6:	e79f      	b.n	80068e8 <get_sequence_step_timeout+0x48>

080069a8 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80069a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80069aa:	2902      	cmp	r1, #2
{
 80069ac:	b085      	sub	sp, #20
 80069ae:	4605      	mov	r5, r0
 80069b0:	4617      	mov	r7, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80069b2:	d81e      	bhi.n	80069f2 <set_sequence_step_timeout+0x4a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80069b4:	f10d 0205 	add.w	r2, sp, #5
 80069b8:	2100      	movs	r1, #0
 80069ba:	f7fe fb29 	bl	8005010 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80069be:	4604      	mov	r4, r0
 80069c0:	b9a0      	cbnz	r0, 80069ec <set_sequence_step_timeout+0x44>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80069c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80069c6:	4639      	mov	r1, r7
 80069c8:	4628      	mov	r0, r5
 80069ca:	f7ff ff41 	bl	8006850 <VL53L0X_calc_timeout_mclks>
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80069ce:	b283      	uxth	r3, r0
 80069d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut = 255;
			else
				MsrcEncodedTimeOut =
 80069d4:	bf9a      	itte	ls
 80069d6:	f100 32ff 	addls.w	r2, r0, #4294967295
 80069da:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 80069dc:	22ff      	movhi	r2, #255	; 0xff
					(uint8_t)MsrcRangeTimeOutMClks - 1;

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80069de:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 80069e2:	2146      	movs	r1, #70	; 0x46
 80069e4:	4628      	mov	r0, r5
 80069e6:	f000 fe29 	bl	800763c <VL53L0X_WrByte>
 80069ea:	4604      	mov	r4, r0
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 80069ec:	4620      	mov	r0, r4
 80069ee:	b005      	add	sp, #20
 80069f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80069f2:	2903      	cmp	r1, #3
 80069f4:	d11f      	bne.n	8006a36 <set_sequence_step_timeout+0x8e>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80069f6:	f10d 0205 	add.w	r2, sp, #5
 80069fa:	2100      	movs	r1, #0
 80069fc:	f7fe fb08 	bl	8005010 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_calc_timeout_mclks(Dev,
 8006a00:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006a04:	4639      	mov	r1, r7
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a06:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f7ff ff21 	bl	8006850 <VL53L0X_calc_timeout_mclks>
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006a0e:	b280      	uxth	r0, r0
 8006a10:	f7ff ff08 	bl	8006824 <VL53L0X_encode_timeout>
 8006a14:	4602      	mov	r2, r0
 8006a16:	f8ad 0006 	strh.w	r0, [sp, #6]
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a1a:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
			if (Status == VL53L0X_ERROR_NONE) {
 8006a1e:	2c00      	cmp	r4, #0
 8006a20:	d1e4      	bne.n	80069ec <set_sequence_step_timeout+0x44>
				Status = VL53L0X_WrWord(Dev,
 8006a22:	2151      	movs	r1, #81	; 0x51
 8006a24:	4628      	mov	r0, r5
 8006a26:	f000 fe19 	bl	800765c <VL53L0X_WrWord>
			if (Status == VL53L0X_ERROR_NONE) {
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d1dd      	bne.n	80069ec <set_sequence_step_timeout+0x44>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006a30:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
 8006a34:	e7da      	b.n	80069ec <set_sequence_step_timeout+0x44>
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006a36:	2904      	cmp	r1, #4
 8006a38:	d13b      	bne.n	8006ab2 <set_sequence_step_timeout+0x10a>
			VL53L0X_GetSequenceStepEnables(Dev,
 8006a3a:	a902      	add	r1, sp, #8
 8006a3c:	f7fe fb3b 	bl	80050b6 <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006a40:	f89d 600b 	ldrb.w	r6, [sp, #11]
 8006a44:	b1b6      	cbz	r6, 8006a74 <set_sequence_step_timeout+0xcc>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a46:	f10d 0205 	add.w	r2, sp, #5
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f7fe fadf 	bl	8005010 <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 8006a52:	4604      	mov	r4, r0
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d1c9      	bne.n	80069ec <set_sequence_step_timeout+0x44>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006a58:	f10d 0206 	add.w	r2, sp, #6
 8006a5c:	2151      	movs	r1, #81	; 0x51
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 fda6 	bl	80075b0 <VL53L0X_RdWord>
 8006a64:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
 8006a66:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8006a6a:	f7ff feea 	bl	8006842 <VL53L0X_decode_timeout>
			if (Status == VL53L0X_ERROR_NONE) {
 8006a6e:	2c00      	cmp	r4, #0
 8006a70:	d1bc      	bne.n	80069ec <set_sequence_step_timeout+0x44>
					PreRangeTimeOutMClks =
 8006a72:	b286      	uxth	r6, r0
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a74:	f10d 0205 	add.w	r2, sp, #5
 8006a78:	2101      	movs	r1, #1
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f7fe fac8 	bl	8005010 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8006a80:	4604      	mov	r4, r0
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d1b2      	bne.n	80069ec <set_sequence_step_timeout+0x44>
					VL53L0X_calc_timeout_mclks(Dev,
 8006a86:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f7ff fedf 	bl	8006850 <VL53L0X_calc_timeout_mclks>
				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006a92:	fa16 f080 	uxtah	r0, r6, r0
				FinalRangeEncodedTimeOut =
 8006a96:	b280      	uxth	r0, r0
 8006a98:	f7ff fec4 	bl	8006824 <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006a9c:	2171      	movs	r1, #113	; 0x71
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f000 fddb 	bl	800765c <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d19f      	bne.n	80069ec <set_sequence_step_timeout+0x44>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006aac:	f8c5 70dc 	str.w	r7, [r5, #220]	; 0xdc
 8006ab0:	e79c      	b.n	80069ec <set_sequence_step_timeout+0x44>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ab2:	f06f 0403 	mvn.w	r4, #3
 8006ab6:	e799      	b.n	80069ec <set_sequence_step_timeout+0x44>

08006ab8 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006ab8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t MaxFinalVcselPeriodPCLK = 14;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006abc:	2300      	movs	r3, #0

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006abe:	f012 0701 	ands.w	r7, r2, #1
{
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	4688      	mov	r8, r1
 8006ac6:	4616      	mov	r6, r2
	uint8_t PhaseCalInt = 0;
 8006ac8:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006acc:	f040 80e5 	bne.w	8006c9a <VL53L0X_set_vcsel_pulse_period+0x1e2>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d143      	bne.n	8006b5c <VL53L0X_set_vcsel_pulse_period+0xa4>
 8006ad4:	f1a2 030c 	sub.w	r3, r2, #12
 8006ad8:	2b06      	cmp	r3, #6
 8006ada:	f200 80de 	bhi.w	8006c9a <VL53L0X_set_vcsel_pulse_period+0x1e2>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006ade:	2a0c      	cmp	r2, #12
 8006ae0:	d178      	bne.n	8006bd4 <VL53L0X_set_vcsel_pulse_period+0x11c>

			Status = VL53L0X_WrByte(Dev,
 8006ae2:	2218      	movs	r2, #24
			Status = VL53L0X_WrByte(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {

			Status = VL53L0X_WrByte(Dev,
 8006ae4:	2157      	movs	r1, #87	; 0x57
 8006ae6:	f000 fda9 	bl	800763c <VL53L0X_WrByte>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8006aea:	2208      	movs	r2, #8
 8006aec:	2156      	movs	r1, #86	; 0x56
 8006aee:	4628      	mov	r0, r5
 8006af0:	f000 fda4 	bl	800763c <VL53L0X_WrByte>
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d16a      	bne.n	8006bce <VL53L0X_set_vcsel_pulse_period+0x116>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006af8:	0874      	lsrs	r4, r6, #1
 8006afa:	3c01      	subs	r4, #1
 8006afc:	b2e4      	uxtb	r4, r4
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006afe:	aa02      	add	r2, sp, #8
 8006b00:	2103      	movs	r1, #3
 8006b02:	4628      	mov	r0, r5
 8006b04:	f7ff fecc 	bl	80068a0 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006b08:	b9b0      	cbnz	r0, 8006b38 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = get_sequence_step_timeout(Dev,
 8006b0a:	aa03      	add	r2, sp, #12
 8006b0c:	2102      	movs	r1, #2
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f7ff fec6 	bl	80068a0 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006b14:	b980      	cbnz	r0, 8006b38 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = VL53L0X_WrByte(Dev,
 8006b16:	4622      	mov	r2, r4
 8006b18:	2150      	movs	r1, #80	; 0x50
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f000 fd8e 	bl	800763c <VL53L0X_WrByte>
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006b20:	b950      	cbnz	r0, 8006b38 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = set_sequence_step_timeout(Dev,
 8006b22:	9a02      	ldr	r2, [sp, #8]
 8006b24:	2103      	movs	r1, #3
 8006b26:	4628      	mov	r0, r5
 8006b28:	f7ff ff3e 	bl	80069a8 <set_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8006b2c:	b920      	cbnz	r0, 8006b38 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = set_sequence_step_timeout(Dev,
 8006b2e:	9a03      	ldr	r2, [sp, #12]
 8006b30:	2102      	movs	r1, #2
 8006b32:	4628      	mov	r0, r5
 8006b34:	f7ff ff38 	bl	80069a8 <set_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b38:	f885 60e8 	strb.w	r6, [r5, #232]	; 0xe8
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d146      	bne.n	8006bce <VL53L0X_set_vcsel_pulse_period+0x116>
		VL53L0X_GETPARAMETERFIELD(Dev,
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006b40:	6969      	ldr	r1, [r5, #20]
 8006b42:	4628      	mov	r0, r5
 8006b44:	f7fe fa60 	bl	8005008 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d140      	bne.n	8006bce <VL53L0X_set_vcsel_pulse_period+0x116>
		Status = VL53L0X_perform_phase_calibration(
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f10d 0103 	add.w	r1, sp, #3
 8006b54:	4628      	mov	r0, r5
 8006b56:	f7ff f9e1 	bl	8005f1c <VL53L0X_perform_phase_calibration>
 8006b5a:	e038      	b.n	8006bce <VL53L0X_set_vcsel_pulse_period+0x116>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006b5c:	2901      	cmp	r1, #1
 8006b5e:	f040 8092 	bne.w	8006c86 <VL53L0X_set_vcsel_pulse_period+0x1ce>
 8006b62:	f1a2 0308 	sub.w	r3, r2, #8
 8006b66:	2b06      	cmp	r3, #6
 8006b68:	f200 8097 	bhi.w	8006c9a <VL53L0X_set_vcsel_pulse_period+0x1e2>
		if (VCSELPulsePeriodPCLK == 8) {
 8006b6c:	2a08      	cmp	r2, #8
 8006b6e:	d13d      	bne.n	8006bec <VL53L0X_set_vcsel_pulse_period+0x134>
			Status = VL53L0X_WrByte(Dev,
 8006b70:	2210      	movs	r2, #16
 8006b72:	2148      	movs	r1, #72	; 0x48
 8006b74:	f000 fd62 	bl	800763c <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8006b78:	4632      	mov	r2, r6
 8006b7a:	2147      	movs	r1, #71	; 0x47
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	f000 fd5d 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8006b82:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 8006b84:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8006b86:	2132      	movs	r1, #50	; 0x32
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f000 fd57 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8006b8e:	220c      	movs	r2, #12
			Status |= VL53L0X_WrByte(Dev,
 8006b90:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8006b92:	2130      	movs	r1, #48	; 0x30
 8006b94:	4628      	mov	r0, r5
 8006b96:	f000 fd51 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8006b9a:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8006b9c:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	21ff      	movs	r1, #255	; 0xff
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 fd4a 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8006ba8:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006baa:	4304      	orrs	r4, r0
 8006bac:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8006bae:	2230      	movs	r2, #48	; 0x30
			Status |= VL53L0X_WrByte(Dev,
 8006bb0:	2130      	movs	r1, #48	; 0x30
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 fd42 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006bb8:	463a      	mov	r2, r7
			Status |= VL53L0X_WrByte(Dev,
 8006bba:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006bbc:	21ff      	movs	r1, #255	; 0xff
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f000 fd3c 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8006bc4:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006bc6:	4320      	orrs	r0, r4
 8006bc8:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d068      	beq.n	8006ca0 <VL53L0X_set_vcsel_pulse_period+0x1e8>
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
 8006bce:	b004      	add	sp, #16
 8006bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006bd4:	2a0e      	cmp	r2, #14
 8006bd6:	d101      	bne.n	8006bdc <VL53L0X_set_vcsel_pulse_period+0x124>
			Status = VL53L0X_WrByte(Dev,
 8006bd8:	2230      	movs	r2, #48	; 0x30
 8006bda:	e783      	b.n	8006ae4 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 16) {
 8006bdc:	2a10      	cmp	r2, #16
 8006bde:	d101      	bne.n	8006be4 <VL53L0X_set_vcsel_pulse_period+0x12c>
			Status = VL53L0X_WrByte(Dev,
 8006be0:	2240      	movs	r2, #64	; 0x40
 8006be2:	e77f      	b.n	8006ae4 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006be4:	2a12      	cmp	r2, #18
 8006be6:	d14e      	bne.n	8006c86 <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 8006be8:	2250      	movs	r2, #80	; 0x50
 8006bea:	e77b      	b.n	8006ae4 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8006bec:	2a0a      	cmp	r2, #10
 8006bee:	d120      	bne.n	8006c32 <VL53L0X_set_vcsel_pulse_period+0x17a>
			Status = VL53L0X_WrByte(Dev,
 8006bf0:	2228      	movs	r2, #40	; 0x28
 8006bf2:	2148      	movs	r1, #72	; 0x48
 8006bf4:	f000 fd22 	bl	800763c <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	2147      	movs	r1, #71	; 0x47
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f000 fd1d 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8006c02:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8006c04:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8006c06:	2132      	movs	r1, #50	; 0x32
 8006c08:	4628      	mov	r0, r5
 8006c0a:	f000 fd17 	bl	800763c <VL53L0X_WrByte>
 8006c0e:	4304      	orrs	r4, r0
 8006c10:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8006c12:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
 8006c14:	2130      	movs	r1, #48	; 0x30
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 fd10 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006c1c:	4642      	mov	r2, r8
			Status |= VL53L0X_WrByte(Dev,
 8006c1e:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006c20:	21ff      	movs	r1, #255	; 0xff
 8006c22:	4628      	mov	r0, r5
 8006c24:	f000 fd0a 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8006c28:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006c2a:	4304      	orrs	r4, r0
 8006c2c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8006c2e:	2220      	movs	r2, #32
 8006c30:	e7be      	b.n	8006bb0 <VL53L0X_set_vcsel_pulse_period+0xf8>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006c32:	2a0c      	cmp	r2, #12
 8006c34:	d112      	bne.n	8006c5c <VL53L0X_set_vcsel_pulse_period+0x1a4>
			Status = VL53L0X_WrByte(Dev,
 8006c36:	2238      	movs	r2, #56	; 0x38
 8006c38:	2148      	movs	r1, #72	; 0x48
 8006c3a:	f000 fcff 	bl	800763c <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8006c3e:	2208      	movs	r2, #8
 8006c40:	2147      	movs	r1, #71	; 0x47
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 fcfa 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8006c48:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8006c4a:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8006c4c:	2132      	movs	r1, #50	; 0x32
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 fcf4 	bl	800763c <VL53L0X_WrByte>
 8006c54:	4304      	orrs	r4, r0
 8006c56:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8006c58:	2208      	movs	r2, #8
 8006c5a:	e7db      	b.n	8006c14 <VL53L0X_set_vcsel_pulse_period+0x15c>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006c5c:	2a0e      	cmp	r2, #14
 8006c5e:	d112      	bne.n	8006c86 <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 8006c60:	2248      	movs	r2, #72	; 0x48
 8006c62:	4611      	mov	r1, r2
 8006c64:	f000 fcea 	bl	800763c <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8006c68:	2208      	movs	r2, #8
 8006c6a:	2147      	movs	r1, #71	; 0x47
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 fce5 	bl	800763c <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8006c72:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8006c74:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8006c76:	2132      	movs	r1, #50	; 0x32
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f000 fcdf 	bl	800763c <VL53L0X_WrByte>
 8006c7e:	4304      	orrs	r4, r0
 8006c80:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8006c82:	2207      	movs	r2, #7
 8006c84:	e7c6      	b.n	8006c14 <VL53L0X_set_vcsel_pulse_period+0x15c>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006c86:	0874      	lsrs	r4, r6, #1
 8006c88:	3c01      	subs	r4, #1
 8006c8a:	b2e4      	uxtb	r4, r4
		switch (VcselPeriodType) {
 8006c8c:	f1b8 0f00 	cmp.w	r8, #0
 8006c90:	f43f af35 	beq.w	8006afe <VL53L0X_set_vcsel_pulse_period+0x46>
 8006c94:	f1b8 0f01 	cmp.w	r8, #1
 8006c98:	d005      	beq.n	8006ca6 <VL53L0X_set_vcsel_pulse_period+0x1ee>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c9a:	f06f 0003 	mvn.w	r0, #3
 8006c9e:	e796      	b.n	8006bce <VL53L0X_set_vcsel_pulse_period+0x116>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006ca0:	0874      	lsrs	r4, r6, #1
 8006ca2:	3c01      	subs	r4, #1
 8006ca4:	b2e4      	uxtb	r4, r4
			Status = get_sequence_step_timeout(Dev,
 8006ca6:	aa01      	add	r2, sp, #4
 8006ca8:	2104      	movs	r1, #4
 8006caa:	4628      	mov	r0, r5
 8006cac:	f7ff fdf8 	bl	80068a0 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8006cb0:	b950      	cbnz	r0, 8006cc8 <VL53L0X_set_vcsel_pulse_period+0x210>
				Status = VL53L0X_WrByte(Dev,
 8006cb2:	4622      	mov	r2, r4
 8006cb4:	2170      	movs	r1, #112	; 0x70
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	f000 fcc0 	bl	800763c <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 8006cbc:	b920      	cbnz	r0, 8006cc8 <VL53L0X_set_vcsel_pulse_period+0x210>
				Status = set_sequence_step_timeout(Dev,
 8006cbe:	9a01      	ldr	r2, [sp, #4]
 8006cc0:	2104      	movs	r1, #4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f7ff fe70 	bl	80069a8 <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006cc8:	f885 60e0 	strb.w	r6, [r5, #224]	; 0xe0
			break;
 8006ccc:	e736      	b.n	8006b3c <VL53L0X_set_vcsel_pulse_period+0x84>

08006cce <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006cce:	b513      	push	{r0, r1, r4, lr}
 8006cd0:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006cd2:	b121      	cbz	r1, 8006cde <VL53L0X_get_vcsel_pulse_period+0x10>
 8006cd4:	2901      	cmp	r1, #1
 8006cd6:	d00f      	beq.n	8006cf8 <VL53L0X_get_vcsel_pulse_period+0x2a>
		Status = VL53L0X_RdByte(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006cd8:	f06f 0003 	mvn.w	r0, #3
 8006cdc:	e00a      	b.n	8006cf4 <VL53L0X_get_vcsel_pulse_period+0x26>
		Status = VL53L0X_RdByte(Dev,
 8006cde:	f10d 0207 	add.w	r2, sp, #7
 8006ce2:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
 8006ce4:	f000 fc1b 	bl	800751e <VL53L0X_RdByte>
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006ce8:	b920      	cbnz	r0, 8006cf4 <VL53L0X_get_vcsel_pulse_period+0x26>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 8006cf2:	7023      	strb	r3, [r4, #0]
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 8006cf8:	f10d 0207 	add.w	r2, sp, #7
 8006cfc:	2170      	movs	r1, #112	; 0x70
 8006cfe:	e7f1      	b.n	8006ce4 <VL53L0X_get_vcsel_pulse_period+0x16>

08006d00 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006d00:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006d02:	2300      	movs	r3, #0
{
 8006d04:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006d06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006d0a:	e88d 000c 	stmia.w	sp, {r2, r3}
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8006d0e:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8006d12:	4299      	cmp	r1, r3
{
 8006d14:	4606      	mov	r6, r0
 8006d16:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 8006d18:	d804      	bhi.n	8006d24 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
 8006d1a:	f06f 0503 	mvn.w	r5, #3
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8006d1e:	4628      	mov	r0, r5
 8006d20:	b005      	add	sp, #20
 8006d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006d24:	a902      	add	r1, sp, #8
 8006d26:	f7fe f9c6 	bl	80050b6 <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d1f6      	bne.n	8006d1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 8006d30:	f89d 3008 	ldrb.w	r3, [sp, #8]
	FinalRangeTimingBudgetMicroSeconds =
 8006d34:	f6a7 04e8 	subw	r4, r7, #2280	; 0x8e8
	if (Status == VL53L0X_ERROR_NONE &&
 8006d38:	b92b      	cbnz	r3, 8006d46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		(SchedulerSequenceSteps.TccOn  ||
 8006d3a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8006d3e:	b913      	cbnz	r3, 8006d46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		SchedulerSequenceSteps.MsrcOn ||
 8006d40:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8006d44:	b1fb      	cbz	r3, 8006d86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
		Status = get_sequence_step_timeout(Dev,
 8006d46:	466a      	mov	r2, sp
 8006d48:	2102      	movs	r1, #2
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	f7ff fda8 	bl	80068a0 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 8006d50:	bba8      	cbnz	r0, 8006dbe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
		if (SchedulerSequenceSteps.TccOn) {
 8006d52:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006d56:	b12b      	cbz	r3, 8006d64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x64>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006d58:	9b00      	ldr	r3, [sp, #0]
 8006d5a:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 8006d5e:	429c      	cmp	r4, r3
 8006d60:	d9db      	bls.n	8006d1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 8006d62:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 8006d64:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8006d68:	b933      	cbnz	r3, 8006d78 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x78>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006d6a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8006d6e:	b153      	cbz	r3, 8006d86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006d70:	9b00      	ldr	r3, [sp, #0]
 8006d72:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006d76:	e003      	b.n	8006d80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006d78:	9b00      	ldr	r3, [sp, #0]
 8006d7a:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 8006d7e:	005b      	lsls	r3, r3, #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	d2ca      	bcs.n	8006d1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 8006d84:	1ae4      	subs	r4, r4, r3
	if (SchedulerSequenceSteps.PreRangeOn) {
 8006d86:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8006d8a:	b15b      	cbz	r3, 8006da4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa4>
		Status = get_sequence_step_timeout(Dev,
 8006d8c:	aa01      	add	r2, sp, #4
 8006d8e:	2103      	movs	r1, #3
 8006d90:	4630      	mov	r0, r6
 8006d92:	f7ff fd85 	bl	80068a0 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d2bc      	bcs.n	8006d1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 8006da0:	b968      	cbnz	r0, 8006dbe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8006da2:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 8006da4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0b8      	beq.n	8006d1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		Status = set_sequence_step_timeout(Dev,
 8006dac:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 8006db0:	2104      	movs	r1, #4
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7ff fdf8 	bl	80069a8 <set_sequence_step_timeout>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006db8:	6177      	str	r7, [r6, #20]
		Status = set_sequence_step_timeout(Dev,
 8006dba:	4605      	mov	r5, r0
 8006dbc:	e7af      	b.n	8006d1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	e7ad      	b.n	8006d1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

08006dc2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006dc2:	b570      	push	{r4, r5, r6, lr}
 8006dc4:	b086      	sub	sp, #24
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006dc6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006dca:	9302      	str	r3, [sp, #8]
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	9303      	str	r3, [sp, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006dd0:	f640 3336 	movw	r3, #2870	; 0xb36
 8006dd4:	600b      	str	r3, [r1, #0]
{
 8006dd6:	460c      	mov	r4, r1

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006dd8:	a904      	add	r1, sp, #16
{
 8006dda:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006ddc:	f7fe f96b 	bl	80050b6 <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 8006de0:	4605      	mov	r5, r0
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d136      	bne.n	8006e54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8006de6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8006dea:	b92b      	cbnz	r3, 8006df8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
 8006dec:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006df0:	b913      	cbnz	r3, 8006df8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
		SchedulerSequenceSteps.MsrcOn ||
 8006df2:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006df6:	b1cb      	cbz	r3, 8006e2c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 8006df8:	aa02      	add	r2, sp, #8
 8006dfa:	2102      	movs	r1, #2
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	f7ff fd4f 	bl	80068a0 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d140      	bne.n	8006e88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 8006e06:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8006e0a:	b12b      	cbz	r3, 8006e18 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 8006e0c:	9b02      	ldr	r3, [sp, #8]
 8006e0e:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	4413      	add	r3, r2
 8006e16:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8006e18:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8006e1c:	b1eb      	cbz	r3, 8006e5a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8006e1e:	9b02      	ldr	r3, [sp, #8]
 8006e20:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
				*pMeasurementTimingBudgetMicroSeconds +=
 8006e2a:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006e2c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006e30:	b15b      	cbz	r3, 8006e4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x88>
			Status = get_sequence_step_timeout(Dev,
 8006e32:	aa03      	add	r2, sp, #12
 8006e34:	2103      	movs	r1, #3
 8006e36:	4630      	mov	r0, r6
 8006e38:	f7ff fd32 	bl	80068a0 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
				PreRangeTimeoutMicroSeconds +
 8006e3c:	9b03      	ldr	r3, [sp, #12]
 8006e3e:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	4413      	add	r3, r2
 8006e46:	6023      	str	r3, [r4, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e48:	b9f0      	cbnz	r0, 8006e88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8006e4a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006e4e:	b973      	cbnz	r3, 8006e6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	6173      	str	r3, [r6, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8006e54:	4628      	mov	r0, r5
 8006e56:	b006      	add	sp, #24
 8006e58:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8006e5a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0e4      	beq.n	8006e2c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 8006e62:	9b02      	ldr	r3, [sp, #8]
 8006e64:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	e7dd      	b.n	8006e2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 8006e6e:	aa01      	add	r2, sp, #4
 8006e70:	2104      	movs	r1, #4
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff fd14 	bl	80068a0 <get_sequence_step_timeout>
				(FinalRangeTimeoutMicroSeconds +
 8006e78:	9b01      	ldr	r3, [sp, #4]
 8006e7a:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	4413      	add	r3, r2
 8006e82:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d0e3      	beq.n	8006e50 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
 8006e88:	4605      	mov	r5, r0
 8006e8a:	e7e3      	b.n	8006e54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

08006e8c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8006e8e:	2200      	movs	r2, #0
{
 8006e90:	4606      	mov	r6, r0
 8006e92:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e94:	4610      	mov	r0, r2
 8006e96:	af01      	add	r7, sp, #4

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006e98:	5cab      	ldrb	r3, [r5, r2]
 8006e9a:	eb05 0e02 	add.w	lr, r5, r2
 8006e9e:	b103      	cbz	r3, 8006ea2 <VL53L0X_load_tuning_settings+0x16>
 8006ea0:	b108      	cbz	r0, 8006ea6 <VL53L0X_load_tuning_settings+0x1a>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8006ea2:	b003      	add	sp, #12
 8006ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfWrites == 0xFF) {
 8006ea6:	2bff      	cmp	r3, #255	; 0xff
		Index++;
 8006ea8:	f102 0401 	add.w	r4, r2, #1
		if (NumberOfWrites == 0xFF) {
 8006eac:	d12c      	bne.n	8006f08 <VL53L0X_load_tuning_settings+0x7c>
			SelectParam = *(pTuningSettingBuffer + Index);
 8006eae:	5d2b      	ldrb	r3, [r5, r4]
			Index++;
 8006eb0:	1c94      	adds	r4, r2, #2
			switch (SelectParam) {
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d83a      	bhi.n	8006f2c <VL53L0X_load_tuning_settings+0xa0>
 8006eb6:	e8df f003 	tbb	[pc, r3]
 8006eba:	0c02      	.short	0x0c02
 8006ebc:	1e15      	.short	0x1e15
				msb = *(pTuningSettingBuffer + Index);
 8006ebe:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006ec0:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8006ec4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 8006ec8:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006eca:	f8a6 3134 	strh.w	r3, [r6, #308]	; 0x134
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ece:	4622      	mov	r2, r4
 8006ed0:	e7e2      	b.n	8006e98 <VL53L0X_load_tuning_settings+0xc>
				msb = *(pTuningSettingBuffer + Index);
 8006ed2:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006ed4:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8006ed8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 8006edc:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006ede:	f8a6 3136 	strh.w	r3, [r6, #310]	; 0x136
				break;
 8006ee2:	e7f4      	b.n	8006ece <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 8006ee4:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006ee6:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8006eea:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 8006eee:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006ef0:	f8a6 3138 	strh.w	r3, [r6, #312]	; 0x138
				break;
 8006ef4:	e7eb      	b.n	8006ece <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 8006ef6:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006ef8:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8006efc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 8006f00:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8006f02:	f8a6 313a 	strh.w	r3, [r6, #314]	; 0x13a
				break;
 8006f06:	e7e2      	b.n	8006ece <VL53L0X_load_tuning_settings+0x42>
		} else if (NumberOfWrites <= 4) {
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d80f      	bhi.n	8006f2c <VL53L0X_load_tuning_settings+0xa0>
			Address = *(pTuningSettingBuffer + Index);
 8006f0c:	5d29      	ldrb	r1, [r5, r4]
			Index++;
 8006f0e:	3202      	adds	r2, #2
			for (i = 0; i < NumberOfWrites; i++) {
 8006f10:	4298      	cmp	r0, r3
 8006f12:	db05      	blt.n	8006f20 <VL53L0X_load_tuning_settings+0x94>
 8006f14:	18d4      	adds	r4, r2, r3
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006f16:	4630      	mov	r0, r6
 8006f18:	463a      	mov	r2, r7
 8006f1a:	f000 fb15 	bl	8007548 <VL53L0X_WriteMulti>
 8006f1e:	e7d6      	b.n	8006ece <VL53L0X_load_tuning_settings+0x42>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006f20:	eb0e 0400 	add.w	r4, lr, r0
 8006f24:	78a4      	ldrb	r4, [r4, #2]
 8006f26:	543c      	strb	r4, [r7, r0]
			for (i = 0; i < NumberOfWrites; i++) {
 8006f28:	3001      	adds	r0, #1
 8006f2a:	e7f1      	b.n	8006f10 <VL53L0X_load_tuning_settings+0x84>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f2c:	f06f 0003 	mvn.w	r0, #3
 8006f30:	e7cd      	b.n	8006ece <VL53L0X_load_tuning_settings+0x42>

08006f32 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006f32:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006f34:	2300      	movs	r3, #0
{
 8006f36:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 8006f38:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006f3a:	f10d 0107 	add.w	r1, sp, #7
{
 8006f3e:	4605      	mov	r5, r0
 8006f40:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006f42:	f7fe f906 	bl	8005152 <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8006f46:	b940      	cbnz	r0, 8006f5a <VL53L0X_get_total_xtalk_rate+0x28>

		if (xtalkCompEnable) {
 8006f48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006f4c:	b12b      	cbz	r3, 8006f5a <VL53L0X_get_total_xtalk_rate+0x28>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006f4e:	8ab2      	ldrh	r2, [r6, #20]
			totalXtalkMegaCps =
 8006f50:	6a2b      	ldr	r3, [r5, #32]
 8006f52:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006f54:	3380      	adds	r3, #128	; 0x80
 8006f56:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006f58:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 8006f5a:	b002      	add	sp, #8
 8006f5c:	bd70      	pop	{r4, r5, r6, pc}

08006f5e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006f5e:	b513      	push	{r0, r1, r4, lr}
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006f60:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 8006f62:	6013      	str	r3, [r2, #0]
{
 8006f64:	4614      	mov	r4, r2

	Status = VL53L0X_get_total_xtalk_rate(
 8006f66:	aa01      	add	r2, sp, #4
 8006f68:	f7ff ffe3 	bl	8006f32 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006f6c:	b918      	cbnz	r0, 8006f76 <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	9a01      	ldr	r2, [sp, #4]
 8006f72:	4413      	add	r3, r2
 8006f74:	6023      	str	r3, [r4, #0]

	return Status;
}
 8006f76:	b002      	add	sp, #8
 8006f78:	bd10      	pop	{r4, pc}
	...

08006f7c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 8006f7e:	f8b0 4150 	ldrh.w	r4, [r0, #336]	; 0x150

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006f82:	f8d0 5154 	ldr.w	r5, [r0, #340]	; 0x154
{
 8006f86:	9e07      	ldr	r6, [sp, #28]
 8006f88:	9f08      	ldr	r7, [sp, #32]
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006f8a:	4365      	muls	r5, r4

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006f8c:	3580      	adds	r5, #128	; 0x80
 8006f8e:	0a2d      	lsrs	r5, r5, #8
	SignalAt0mm *= dmaxCalRange_mm;
 8006f90:	4365      	muls	r5, r4

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 8006f92:	b152      	cbz	r2, 8006faa <VL53L0X_calc_dmax+0x2e>
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8006f94:	0854      	lsrs	r4, r2, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8006f96:	eb04 2481 	add.w	r4, r4, r1, lsl #10

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006f9a:	fbb4 f4f2 	udiv	r4, r4, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8006f9e:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006fa2:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006fa4:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 8006fa8:	0c22      	lsrs	r2, r4, #16
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006faa:	9c06      	ldr	r4, [sp, #24]
 8006fac:	435c      	muls	r4, r3
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006fae:	f506 4100 	add.w	r1, r6, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006fb2:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 8006fb6:	0c24      	lsrs	r4, r4, #16
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006fb8:	0c09      	lsrs	r1, r1, #16
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8006fba:	fb04 f304 	mul.w	r3, r4, r4
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8006fbe:	3103      	adds	r1, #3
 8006fc0:	2406      	movs	r4, #6
 8006fc2:	fbb1 f1f4 	udiv	r1, r1, r4
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006fc6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 8006fca:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006fce:	bf3f      	itttt	cc
 8006fd0:	3603      	addcc	r6, #3
 8006fd2:	fbb6 f6f4 	udivcc	r6, r6, r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006fd6:	ebc6 06c6 	rsbcc	r6, r6, r6, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8006fda:	f506 4100 	addcc.w	r1, r6, #32768	; 0x8000
 8006fde:	bf36      	itet	cc
 8006fe0:	0c0c      	lsrcc	r4, r1, #16
		minSignalNeeded_p3 = 0xfff00000;
 8006fe2:	4918      	ldrcs	r1, [pc, #96]	; (8007044 <VL53L0X_calc_dmax+0xc8>)

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006fe4:	fb04 f104 	mulcc.w	r1, r4, r4
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8006fe8:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded += (peakVcselDuration_us/2);
 8006fec:	eb03 0457 	add.w	r4, r3, r7, lsr #1
 8006ff0:	440c      	add	r4, r1
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8006ff2:	0980      	lsrs	r0, r0, #6
	minSignalNeeded /= peakVcselDuration_us;
 8006ff4:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 14;
 8006ff8:	03a4      	lsls	r4, r4, #14
	minSignalNeeded /= minSignalNeeded_p4;
 8006ffa:	23fe      	movs	r3, #254	; 0xfe
	minSignalNeeded += (minSignalNeeded_p4/2);
 8006ffc:	347f      	adds	r4, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 8006ffe:	fbb4 f4f3 	udiv	r4, r4, r3
	minSignalNeeded *= minSignalNeeded_p1;
 8007002:	4354      	muls	r4, r2
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007004:	f7ff f92e 	bl	8006264 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007008:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800700c:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8007010:	fbb4 f4f6 	udiv	r4, r4, r6
	minSignalNeeded <<= 4;
 8007014:	0124      	lsls	r4, r4, #4
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007016:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800701a:	4607      	mov	r7, r0
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800701c:	fbb4 f6f6 	udiv	r6, r4, r6

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007020:	b136      	cbz	r6, 8007030 <VL53L0X_calc_dmax+0xb4>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007022:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007026:	fbb4 f4f3 	udiv	r4, r4, r3
 800702a:	442c      	add	r4, r5
 800702c:	fbb4 f6f6 	udiv	r6, r4, r6
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007030:	4630      	mov	r0, r6
 8007032:	f7ff f917 	bl	8006264 <VL53L0X_isqrt>
 8007036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007038:	4287      	cmp	r7, r0
 800703a:	bf94      	ite	ls
 800703c:	601f      	strls	r7, [r3, #0]
 800703e:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 8007040:	2000      	movs	r0, #0
 8007042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007044:	fff00000 	.word	0xfff00000

08007048 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	b08d      	sub	sp, #52	; 0x34
 800704e:	4606      	mov	r6, r0
 8007050:	9305      	str	r3, [sp, #20]
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007052:	6a03      	ldr	r3, [r0, #32]
 8007054:	930a      	str	r3, [sp, #40]	; 0x28
{
 8007056:	4689      	mov	r9, r1
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;

	correctedSignalRate_mcps =
 8007058:	68cb      	ldr	r3, [r1, #12]
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800705a:	690f      	ldr	r7, [r1, #16]
	correctedSignalRate_mcps =
 800705c:	9306      	str	r3, [sp, #24]
{
 800705e:	4692      	mov	sl, r2
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007060:	aa0b      	add	r2, sp, #44	; 0x2c
 8007062:	f7ff ff7c 	bl	8006f5e <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007066:	aa0a      	add	r2, sp, #40	; 0x28
 8007068:	4649      	mov	r1, r9
 800706a:	4630      	mov	r0, r6
 800706c:	f7ff ff61 	bl	8006f32 <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 8007070:	4605      	mov	r5, r0
 8007072:	bb60      	cbnz	r0, 80070ce <VL53L0X_calc_sigma_estimate+0x86>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007074:	f896 40e0 	ldrb.w	r4, [r6, #224]	; 0xe0
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007078:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
 800707c:	4622      	mov	r2, r4
 800707e:	4630      	mov	r0, r6
 8007080:	f7ff fbe6 	bl	8006850 <VL53L0X_calc_timeout_mclks>
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007084:	f8d6 10e4 	ldr.w	r1, [r6, #228]	; 0xe4
 8007088:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800708c:	4683      	mov	fp, r0
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800708e:	4630      	mov	r0, r6
 8007090:	f7ff fbde 	bl	8006850 <VL53L0X_calc_timeout_mclks>
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007096:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
 800709a:	2c08      	cmp	r4, #8
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800709c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80070a0:	fb04 f803 	mul.w	r8, r4, r3
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80070a4:	f508 4800 	add.w	r8, r8, #32768	; 0x8000
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80070a8:	f103 0380 	add.w	r3, r3, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80070ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
			vcselWidth = 2;
 80070b0:	bf14      	ite	ne
 80070b2:	2103      	movne	r1, #3
 80070b4:	2102      	moveq	r1, #2
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 80070b6:	ea5f 4e18 	movs.w	lr, r8, lsr #16
		totalSignalRate_mcps <<= 8;
 80070ba:	9204      	str	r2, [sp, #16]
 80070bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80070be:	4a54      	ldr	r2, [pc, #336]	; (8007210 <VL53L0X_calc_sigma_estimate+0x1c8>)
	if (peakSignalRate_kcps == 0) {
 80070c0:	d109      	bne.n	80070d6 <VL53L0X_calc_sigma_estimate+0x8e>
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 80070c2:	9b05      	ldr	r3, [sp, #20]
		*pSigmaEstimate = cSigmaEstMax;
 80070c4:	f8ca 2000 	str.w	r2, [sl]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80070c8:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
		*pDmax_mm = 0;
 80070cc:	601d      	str	r5, [r3, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80070ce:	4628      	mov	r0, r5
 80070d0:	b00d      	add	sp, #52	; 0x34
 80070d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80070d6:	4458      	add	r0, fp
		peakVcselDuration_us = vcselWidth * 2048 *
 80070d8:	02c0      	lsls	r0, r0, #11
 80070da:	4341      	muls	r1, r0
		peakVcselDuration_us *= cPllPeriod_ps;
 80070dc:	f240 6b77 	movw	fp, #1655	; 0x677
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80070e0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80070e4:	0a1b      	lsrs	r3, r3, #8
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80070e6:	fbb1 f1f4 	udiv	r1, r1, r4
		peakVcselDuration_us *= cPllPeriod_ps;
 80070ea:	fb0b fb01 	mul.w	fp, fp, r1
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80070ee:	f50b 7bfa 	add.w	fp, fp, #500	; 0x1f4
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80070f2:	4948      	ldr	r1, [pc, #288]	; (8007214 <VL53L0X_calc_sigma_estimate+0x1cc>)
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80070f4:	fbbb fbf4 	udiv	fp, fp, r4
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80070f8:	fb0b f303 	mul.w	r3, fp, r3
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80070fc:	3380      	adds	r3, #128	; 0x80
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80070fe:	4367      	muls	r7, r4
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007100:	fb04 f50c 	mul.w	r5, r4, ip
		if (vcselTotalEventsRtn < 1)
 8007104:	0a1b      	lsrs	r3, r3, #8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007106:	ea07 0701 	and.w	r7, r7, r1
 800710a:	fbb7 fefe 	udiv	lr, r7, lr
 800710e:	4f42      	ldr	r7, [pc, #264]	; (8007218 <VL53L0X_calc_sigma_estimate+0x1d0>)
 8007110:	9209      	str	r2, [sp, #36]	; 0x24
			vcselTotalEventsRtn = 1;
 8007112:	bf08      	it	eq
 8007114:	2301      	moveq	r3, #1
 8007116:	f5b5 1f48 	cmp.w	r5, #3276800	; 0x320000
 800711a:	bf28      	it	cs
 800711c:	f44f 1548 	movcs.w	r5, #3276800	; 0x320000
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007120:	200c      	movs	r0, #12
 8007122:	45be      	cmp	lr, r7
 8007124:	bf28      	it	cs
 8007126:	46be      	movcs	lr, r7
 8007128:	4358      	muls	r0, r3
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800712a:	f44f 7716 	mov.w	r7, #600	; 0x258
 800712e:	fb07 f70e 	mul.w	r7, r7, lr
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007132:	9108      	str	r1, [sp, #32]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007134:	f7ff f896 	bl	8006264 <VL53L0X_isqrt>
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007138:	9908      	ldr	r1, [sp, #32]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800713a:	9007      	str	r0, [sp, #28]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800713c:	ea08 0801 	and.w	r8, r8, r1
 8007140:	eba8 0005 	sub.w	r0, r8, r5
			xTalkCompRate_kcps) + 500)/1000;
 8007144:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007148:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800714c:	4b33      	ldr	r3, [pc, #204]	; (800721c <VL53L0X_calc_sigma_estimate+0x1d4>)
			xTalkCompRate_kcps) + 500)/1000;
 800714e:	44a8      	add	r8, r5
			xTalkCompRate_kcps) + 500)/1000;
 8007150:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007154:	fbb8 f8f4 	udiv	r8, r8, r4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007158:	fbb0 f0f4 	udiv	r0, r0, r4
		diff1_mcps <<= 8;
 800715c:	0200      	lsls	r0, r0, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800715e:	fbb0 f0f8 	udiv	r0, r0, r8
		xTalkCorrection <<= 8;
 8007162:	0205      	lsls	r5, r0, #8
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007164:	f5c5 3580 	rsb	r5, r5, #65536	; 0x10000
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007168:	4359      	muls	r1, r3
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800716a:	f241 235c 	movw	r3, #4700	; 0x125c
 800716e:	fbb1 f3f3 	udiv	r3, r1, r3
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007172:	435d      	muls	r5, r3
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007174:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 8007178:	0c2d      	lsrs	r5, r5, #16
		pwMult += (1 << 16);
 800717a:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
		pwMult >>= 1;
 800717e:	086d      	lsrs	r5, r5, #1
		pwMult = pwMult * pwMult;
 8007180:	436d      	muls	r5, r5
		pwMult >>= 14;
 8007182:	0bad      	lsrs	r5, r5, #14
		sqr1 = pwMult * sigmaEstimateP1;
 8007184:	f44f 7848 	mov.w	r8, #800	; 0x320
 8007188:	fb08 f005 	mul.w	r0, r8, r5
		sqr2 = (sqr2 + 0x8000) >> 16;
 800718c:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007190:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007194:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 8007196:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007198:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800719a:	fb00 3000 	mla	r0, r0, r0, r3
 800719e:	f7ff f861 	bl	8006264 <VL53L0X_isqrt>
		sqrtResult_centi_ns <<= 16;
 80071a2:	0400      	lsls	r0, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80071a4:	2364      	movs	r3, #100	; 0x64
 80071a6:	3032      	adds	r0, #50	; 0x32
 80071a8:	fbb0 f0f3 	udiv	r0, r0, r3
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80071ac:	9b07      	ldr	r3, [sp, #28]
		sigmaEstRtn		 += 5000;
 80071ae:	f640 31b5 	movw	r1, #2997	; 0xbb5
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80071b2:	005b      	lsls	r3, r3, #1
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80071b4:	fbb0 f0f3 	udiv	r0, r0, r3
		sigmaEstRtn		 += 5000;
 80071b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80071bc:	fb01 3000 	mla	r0, r1, r0, r3
		sigmaEstRtn		 /= 10000;
 80071c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80071c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80071c8:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 80071cc:	bf28      	it	cs
 80071ce:	f44f 4070 	movcs.w	r0, #61440	; 0xf000
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80071d2:	f241 1304 	movw	r3, #4356	; 0x1104
 80071d6:	fb00 3000 	mla	r0, r0, r0, r3
 80071da:	f7ff f843 	bl	8006264 <VL53L0X_isqrt>
 80071de:	9a09      	ldr	r2, [sp, #36]	; 0x24
		Status = VL53L0X_calc_dmax(
 80071e0:	9b05      	ldr	r3, [sp, #20]
 80071e2:	9303      	str	r3, [sp, #12]
		sigmaEstimate	 = 1000 * sqrtResult;
 80071e4:	4360      	muls	r0, r4
 80071e6:	4282      	cmp	r2, r0
 80071e8:	bf28      	it	cs
 80071ea:	4602      	movcs	r2, r0
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80071ec:	f8ca 2000 	str.w	r2, [sl]
		Status = VL53L0X_calc_dmax(
 80071f0:	462b      	mov	r3, r5
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80071f2:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 80071f6:	f8cd b008 	str.w	fp, [sp, #8]
 80071fa:	9701      	str	r7, [sp, #4]
 80071fc:	f8cd 8000 	str.w	r8, [sp]
 8007200:	9a06      	ldr	r2, [sp, #24]
 8007202:	9904      	ldr	r1, [sp, #16]
 8007204:	4630      	mov	r0, r6
 8007206:	f7ff feb9 	bl	8006f7c <VL53L0X_calc_dmax>
 800720a:	4605      	mov	r5, r0
 800720c:	e75f      	b.n	80070ce <VL53L0X_calc_sigma_estimate+0x86>
 800720e:	bf00      	nop
 8007210:	028f87ae 	.word	0x028f87ae
 8007214:	ffff0000 	.word	0xffff0000
 8007218:	00666666 	.word	0x00666666
 800721c:	0006999a 	.word	0x0006999a

08007220 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007224:	b08b      	sub	sp, #44	; 0x2c
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007226:	ea4f 09d1 	mov.w	r9, r1, lsr #3
{
 800722a:	469b      	mov	fp, r3
	uint8_t SigmaLimitCheckEnable = 0;
 800722c:	2300      	movs	r3, #0
 800722e:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007232:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007236:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800723a:	f88d 3011 	strb.w	r3, [sp, #17]
	uint16_t tmpWord = 0;
 800723e:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint32_t Dmax_mm = 0;
 8007242:	9309      	str	r3, [sp, #36]	; 0x24
	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007244:	f009 070f 	and.w	r7, r9, #15

	if (DeviceRangeStatusInternal == 0 ||
 8007248:	f24f 03a1 	movw	r3, #61601	; 0xf0a1
 800724c:	40fb      	lsrs	r3, r7
{
 800724e:	9201      	str	r2, [sp, #4]
		DeviceRangeStatusInternal == 12 ||
		DeviceRangeStatusInternal == 13 ||
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007250:	f003 0301 	and.w	r3, r3, #1
		NoneFlag = 0;
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007254:	2201      	movs	r2, #1
 8007256:	21ff      	movs	r1, #255	; 0xff
{
 8007258:	4605      	mov	r5, r0
 800725a:	9e15      	ldr	r6, [sp, #84]	; 0x54
		NoneFlag = 1;
 800725c:	9300      	str	r3, [sp, #0]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800725e:	f000 f9ed 	bl	800763c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8007262:	b928      	cbnz	r0, 8007270 <VL53L0X_get_pal_range_status+0x50>
		Status = VL53L0X_RdWord(Dev,
 8007264:	f10d 0212 	add.w	r2, sp, #18
 8007268:	21b6      	movs	r1, #182	; 0xb6
 800726a:	4628      	mov	r0, r5
 800726c:	f000 f9a0 	bl	80075b0 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007270:	f8bd a012 	ldrh.w	sl, [sp, #18]
 8007274:	ea4f 2a4a 	mov.w	sl, sl, lsl #9

	if (Status == VL53L0X_ERROR_NONE)
 8007278:	b920      	cbnz	r0, 8007284 <VL53L0X_get_pal_range_status+0x64>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800727a:	4602      	mov	r2, r0
 800727c:	21ff      	movs	r1, #255	; 0xff
 800727e:	4628      	mov	r0, r5
 8007280:	f000 f9dc 	bl	800763c <VL53L0X_WrByte>

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007284:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007288:	b928      	cbnz	r0, 8007296 <VL53L0X_get_pal_range_status+0x76>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800728a:	4601      	mov	r1, r0
 800728c:	f10d 020e 	add.w	r2, sp, #14
 8007290:	4628      	mov	r0, r5
 8007292:	f7fd ffb8 	bl	8005206 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007296:	f89d 400e 	ldrb.w	r4, [sp, #14]
 800729a:	b1d4      	cbz	r4, 80072d2 <VL53L0X_get_pal_range_status+0xb2>
 800729c:	2800      	cmp	r0, #0
 800729e:	f040 8091 	bne.w	80073c4 <VL53L0X_get_pal_range_status+0x1a4>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80072a2:	ab09      	add	r3, sp, #36	; 0x24
 80072a4:	aa05      	add	r2, sp, #20
 80072a6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80072a8:	4628      	mov	r0, r5
 80072aa:	f7ff fecd 	bl	8007048 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f040 8088 	bne.w	80073c4 <VL53L0X_get_pal_range_status+0x1a4>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80072b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80072b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b8:	8153      	strh	r3, [r2, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80072ba:	4601      	mov	r1, r0
 80072bc:	aa06      	add	r2, sp, #24
 80072be:	4628      	mov	r0, r5
 80072c0:	f7fd ffdc 	bl	800527c <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80072c4:	9c06      	ldr	r4, [sp, #24]
 80072c6:	b124      	cbz	r4, 80072d2 <VL53L0X_get_pal_range_status+0xb2>
	uint8_t SigmaLimitflag = 0;
 80072c8:	9b05      	ldr	r3, [sp, #20]
 80072ca:	429c      	cmp	r4, r3
 80072cc:	bf2c      	ite	cs
 80072ce:	2400      	movcs	r4, #0
 80072d0:	2401      	movcc	r4, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80072d2:	b920      	cbnz	r0, 80072de <VL53L0X_get_pal_range_status+0xbe>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80072d4:	aa04      	add	r2, sp, #16
 80072d6:	2102      	movs	r1, #2
 80072d8:	4628      	mov	r0, r5
 80072da:	f7fd ff94 	bl	8005206 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80072de:	f89d 8010 	ldrb.w	r8, [sp, #16]
 80072e2:	f1b8 0f00 	cmp.w	r8, #0
 80072e6:	d00f      	beq.n	8007308 <VL53L0X_get_pal_range_status+0xe8>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d16f      	bne.n	80073cc <VL53L0X_get_pal_range_status+0x1ac>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80072ec:	aa07      	add	r2, sp, #28
 80072ee:	2102      	movs	r1, #2
 80072f0:	4628      	mov	r0, r5
 80072f2:	f7fd ffc3 	bl	800527c <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 80072f6:	9b07      	ldr	r3, [sp, #28]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d065      	beq.n	80073c8 <VL53L0X_get_pal_range_status+0x1a8>
	uint8_t SignalRefClipflag = 0;
 80072fc:	459a      	cmp	sl, r3
 80072fe:	bf94      	ite	ls
 8007300:	f04f 0800 	movls.w	r8, #0
 8007304:	f04f 0801 	movhi.w	r8, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007308:	b928      	cbnz	r0, 8007316 <VL53L0X_get_pal_range_status+0xf6>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800730a:	f10d 0211 	add.w	r2, sp, #17
 800730e:	2103      	movs	r1, #3
 8007310:	4628      	mov	r0, r5
 8007312:	f7fd ff78 	bl	8005206 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007316:	f89d a011 	ldrb.w	sl, [sp, #17]
 800731a:	f1ba 0f00 	cmp.w	sl, #0
 800731e:	d016      	beq.n	800734e <VL53L0X_get_pal_range_status+0x12e>
 8007320:	2800      	cmp	r0, #0
 8007322:	d17c      	bne.n	800741e <VL53L0X_get_pal_range_status+0x1fe>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007324:	f1bb 0f00 	cmp.w	fp, #0
 8007328:	d003      	beq.n	8007332 <VL53L0X_get_pal_range_status+0x112>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800732a:	9b01      	ldr	r3, [sp, #4]
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	fbb3 fbfb 	udiv	fp, r3, fp
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007332:	aa08      	add	r2, sp, #32
 8007334:	2103      	movs	r1, #3
 8007336:	4628      	mov	r0, r5
 8007338:	f7fd ffa0 	bl	800527c <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800733c:	9a08      	ldr	r2, [sp, #32]
 800733e:	2a00      	cmp	r2, #0
 8007340:	d047      	beq.n	80073d2 <VL53L0X_get_pal_range_status+0x1b2>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007342:	4593      	cmp	fp, r2
 8007344:	bf2c      	ite	cs
 8007346:	f04f 0a00 	movcs.w	sl, #0
 800734a:	f04f 0a01 	movcc.w	sl, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800734e:	b920      	cbnz	r0, 800735a <VL53L0X_get_pal_range_status+0x13a>
		if (NoneFlag == 1) {
 8007350:	9b00      	ldr	r3, [sp, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d03f      	beq.n	80073d6 <VL53L0X_get_pal_range_status+0x1b6>
			*pPalRangeStatus = 255;	 /* NONE */
 8007356:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007358:	7032      	strb	r2, [r6, #0]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800735a:	7832      	ldrb	r2, [r6, #0]
 800735c:	b90a      	cbnz	r2, 8007362 <VL53L0X_get_pal_range_status+0x142>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800735e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007360:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007362:	f10d 020f 	add.w	r2, sp, #15
 8007366:	2101      	movs	r1, #1
 8007368:	4628      	mov	r0, r5
 800736a:	f7fd ff4c 	bl	8005206 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800736e:	bb30      	cbnz	r0, 80073be <VL53L0X_get_pal_range_status+0x19e>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007370:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8007374:	2a00      	cmp	r2, #0
 8007376:	bf08      	it	eq
 8007378:	2401      	moveq	r4, #1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800737a:	2f04      	cmp	r7, #4
 800737c:	bf1d      	ittte	ne
 800737e:	f89d 200f 	ldrbne.w	r2, [sp, #15]
 8007382:	fab2 f282 	clzne	r2, r2
 8007386:	0952      	lsrne	r2, r2, #5
 8007388:	2201      	moveq	r2, #1
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800738a:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800738e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8007392:	2a00      	cmp	r2, #0
 8007394:	bf08      	it	eq
 8007396:	f04f 0801 	moveq.w	r8, #1
					(SignalRefClipflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800739a:	f008 0301 	and.w	r3, r8, #1
 800739e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80073a2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	bf08      	it	eq
 80073aa:	f04f 0a01 	moveq.w	sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80073ae:	f004 0401 	and.w	r4, r4, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80073b2:	f00a 0a01 	and.w	sl, sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80073b6:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80073ba:	f885 a031 	strb.w	sl, [r5, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 80073be:	b00b      	add	sp, #44	; 0x2c
 80073c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c4:	2400      	movs	r4, #0
 80073c6:	e78a      	b.n	80072de <VL53L0X_get_pal_range_status+0xbe>
	uint8_t SignalRefClipflag = 0;
 80073c8:	4698      	mov	r8, r3
 80073ca:	e79d      	b.n	8007308 <VL53L0X_get_pal_range_status+0xe8>
 80073cc:	f04f 0800 	mov.w	r8, #0
 80073d0:	e7a1      	b.n	8007316 <VL53L0X_get_pal_range_status+0xf6>
	uint8_t RangeIgnoreThresholdflag = 0;
 80073d2:	4692      	mov	sl, r2
 80073d4:	e7bb      	b.n	800734e <VL53L0X_get_pal_range_status+0x12e>
		} else if (DeviceRangeStatusInternal == 1 ||
 80073d6:	1e7a      	subs	r2, r7, #1
 80073d8:	2a02      	cmp	r2, #2
 80073da:	d801      	bhi.n	80073e0 <VL53L0X_get_pal_range_status+0x1c0>
			*pPalRangeStatus = 5; /* HW fail */
 80073dc:	2205      	movs	r2, #5
 80073de:	e7bb      	b.n	8007358 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 6 ||
 80073e0:	2f06      	cmp	r7, #6
 80073e2:	d001      	beq.n	80073e8 <VL53L0X_get_pal_range_status+0x1c8>
 80073e4:	2f09      	cmp	r7, #9
 80073e6:	d101      	bne.n	80073ec <VL53L0X_get_pal_range_status+0x1cc>
			*pPalRangeStatus = 4;  /* Phase fail */
 80073e8:	2204      	movs	r2, #4
 80073ea:	e7b5      	b.n	8007358 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 8 ||
 80073ec:	f009 090d 	and.w	r9, r9, #13
 80073f0:	f1b9 0f08 	cmp.w	r9, #8
 80073f4:	d002      	beq.n	80073fc <VL53L0X_get_pal_range_status+0x1dc>
					DeviceRangeStatusInternal == 10 ||
 80073f6:	f1b8 0f01 	cmp.w	r8, #1
 80073fa:	d101      	bne.n	8007400 <VL53L0X_get_pal_range_status+0x1e0>
			*pPalRangeStatus = 3;  /* Min range */
 80073fc:	2203      	movs	r2, #3
 80073fe:	e7ab      	b.n	8007358 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007400:	2f04      	cmp	r7, #4
 8007402:	d002      	beq.n	800740a <VL53L0X_get_pal_range_status+0x1ea>
 8007404:	f1ba 0f01 	cmp.w	sl, #1
 8007408:	d101      	bne.n	800740e <VL53L0X_get_pal_range_status+0x1ee>
			*pPalRangeStatus = 2;  /* Signal Fail */
 800740a:	2202      	movs	r2, #2
 800740c:	e7a4      	b.n	8007358 <VL53L0X_get_pal_range_status+0x138>
		} else if (SigmaLimitflag == 1) {
 800740e:	2c01      	cmp	r4, #1
 8007410:	d101      	bne.n	8007416 <VL53L0X_get_pal_range_status+0x1f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007412:	2201      	movs	r2, #1
 8007414:	e7a0      	b.n	8007358 <VL53L0X_get_pal_range_status+0x138>
			*pPalRangeStatus = 0; /* Range Valid */
 8007416:	2200      	movs	r2, #0
 8007418:	7032      	strb	r2, [r6, #0]
 800741a:	46a2      	mov	sl, r4
 800741c:	e79d      	b.n	800735a <VL53L0X_get_pal_range_status+0x13a>
	uint8_t RangeIgnoreThresholdflag = 0;
 800741e:	f04f 0a00 	mov.w	sl, #0
 8007422:	e79a      	b.n	800735a <VL53L0X_get_pal_range_status+0x13a>

08007424 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	460f      	mov	r7, r1
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007428:	2102      	movs	r1, #2
{
 800742a:	4606      	mov	r6, r0
 800742c:	4614      	mov	r4, r2
	Status = VL53L0X_get_info_from_device(Dev, 2);
 800742e:	f7fe ff4f 	bl	80062d0 <VL53L0X_get_info_from_device>

	if (Status == VL53L0X_ERROR_NONE) {
 8007432:	4605      	mov	r5, r0
 8007434:	b940      	cbnz	r0, 8007448 <VL53L0X_check_part_used+0x24>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);

	if (ModuleIdInt == 0) {
 8007436:	f896 30f1 	ldrb.w	r3, [r6, #241]	; 0xf1
 800743a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800743e:	b92b      	cbnz	r3, 800744c <VL53L0X_check_part_used+0x28>
		*Revision = 0;
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8007440:	4905      	ldr	r1, [pc, #20]	; (8007458 <VL53L0X_check_part_used+0x34>)
		*Revision = 0;
 8007442:	703d      	strb	r5, [r7, #0]
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007444:	f000 ff12 	bl	800826c <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007448:	4628      	mov	r0, r5
 800744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800744c:	f896 30f2 	ldrb.w	r3, [r6, #242]	; 0xf2
 8007450:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007452:	f106 01f3 	add.w	r1, r6, #243	; 0xf3
 8007456:	e7f5      	b.n	8007444 <VL53L0X_check_part_used+0x20>
 8007458:	0800a1e2 	.word	0x0800a1e2

0800745c <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800745c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800745e:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007460:	460a      	mov	r2, r1
 8007462:	f10d 0107 	add.w	r1, sp, #7
{
 8007466:	4605      	mov	r5, r0
	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007468:	f7ff ffdc 	bl	8007424 <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
 800746c:	bb00      	cbnz	r0, 80074b0 <VL53L0X_get_device_info+0x54>
		if (Revision == 0) {
 800746e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007472:	b9fb      	cbnz	r3, 80074b4 <VL53L0X_get_device_info+0x58>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007474:	4915      	ldr	r1, [pc, #84]	; (80074cc <VL53L0X_get_device_info+0x70>)
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007476:	4620      	mov	r0, r4
 8007478:	f000 fef8 	bl	800826c <strcpy>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800747c:	4914      	ldr	r1, [pc, #80]	; (80074d0 <VL53L0X_get_device_info+0x74>)
 800747e:	f104 0020 	add.w	r0, r4, #32
 8007482:	f000 fef3 	bl	800826c <strcpy>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8007486:	f104 0260 	add.w	r2, r4, #96	; 0x60
 800748a:	21c0      	movs	r1, #192	; 0xc0
 800748c:	4628      	mov	r0, r5
 800748e:	f000 f846 	bl	800751e <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007492:	b968      	cbnz	r0, 80074b0 <VL53L0X_get_device_info+0x54>
		Status = VL53L0X_RdByte(Dev,
 8007494:	f10d 0206 	add.w	r2, sp, #6
 8007498:	21c2      	movs	r1, #194	; 0xc2
 800749a:	4628      	mov	r0, r5
 800749c:	f000 f83f 	bl	800751e <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 80074a0:	2301      	movs	r3, #1
 80074a2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 80074a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80074aa:	091b      	lsrs	r3, r3, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 80074ac:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	}

	return Status;
}
 80074b0:	b003      	add	sp, #12
 80074b2:	bd30      	pop	{r4, r5, pc}
		} else if ((Revision <= 34) && (Revision != 32)) {
 80074b4:	2b22      	cmp	r3, #34	; 0x22
 80074b6:	d803      	bhi.n	80074c0 <VL53L0X_get_device_info+0x64>
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	d003      	beq.n	80074c4 <VL53L0X_get_device_info+0x68>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80074bc:	4905      	ldr	r1, [pc, #20]	; (80074d4 <VL53L0X_get_device_info+0x78>)
 80074be:	e7da      	b.n	8007476 <VL53L0X_get_device_info+0x1a>
		} else if (Revision < 39) {
 80074c0:	2b26      	cmp	r3, #38	; 0x26
 80074c2:	d801      	bhi.n	80074c8 <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80074c4:	4904      	ldr	r1, [pc, #16]	; (80074d8 <VL53L0X_get_device_info+0x7c>)
 80074c6:	e7d6      	b.n	8007476 <VL53L0X_get_device_info+0x1a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80074c8:	4904      	ldr	r1, [pc, #16]	; (80074dc <VL53L0X_get_device_info+0x80>)
 80074ca:	e7d4      	b.n	8007476 <VL53L0X_get_device_info+0x1a>
 80074cc:	0800a2bc 	.word	0x0800a2bc
 80074d0:	0800a2f5 	.word	0x0800a2f5
 80074d4:	0800a2c8 	.word	0x0800a2c8
 80074d8:	0800a2d4 	.word	0x0800a2d4
 80074dc:	0800a2e0 	.word	0x0800a2e0

080074e0 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80074e0:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80074e2:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80074e6:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80074f0:	b293      	uxth	r3, r2
 80074f2:	460a      	mov	r2, r1
 80074f4:	4621      	mov	r1, r4
 80074f6:	f7fa fe25 	bl	8002144 <HAL_I2C_Master_Transmit>
    
    return status;
}
 80074fa:	b002      	add	sp, #8
 80074fc:	bd10      	pop	{r4, pc}

080074fe <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80074fe:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007500:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8007504:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800750e:	b293      	uxth	r3, r2
 8007510:	460a      	mov	r2, r1
 8007512:	f044 0101 	orr.w	r1, r4, #1
 8007516:	f7fa fea9 	bl	800226c <HAL_I2C_Master_Receive>
    
    return status;
}
 800751a:	b002      	add	sp, #8
 800751c:	bd10      	pop	{r4, pc}

0800751e <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800751e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007520:	ab02      	add	r3, sp, #8
 8007522:	4615      	mov	r5, r2
 8007524:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8007528:	2201      	movs	r2, #1
 800752a:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800752c:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, &index, 1);
 800752e:	f7ff ffd7 	bl	80074e0 <_I2CWrite>
    
    if( status_int ){
 8007532:	b928      	cbnz	r0, 8007540 <VL53L0X_RdByte+0x22>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8007534:	2201      	movs	r2, #1
 8007536:	4629      	mov	r1, r5
 8007538:	4620      	mov	r0, r4
 800753a:	f7ff ffe0 	bl	80074fe <_I2CRead>
    
    if (status_int != 0) {
 800753e:	b108      	cbz	r0, 8007544 <VL53L0X_RdByte+0x26>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007540:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8007544:	b003      	add	sp, #12
 8007546:	bd30      	pop	{r4, r5, pc}

08007548 <VL53L0X_WriteMulti>:
// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    
    if (count > sizeof(_I2CBuffer) - 1) {
 8007548:	2b3f      	cmp	r3, #63	; 0x3f
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800754a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754c:	460f      	mov	r7, r1
 800754e:	4606      	mov	r6, r0
 8007550:	4611      	mov	r1, r2
 8007552:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 8007554:	d811      	bhi.n	800757a <VL53L0X_WriteMulti+0x32>
        return VL53L0X_ERROR_INVALID_PARAMS;
    }
    
    _I2CBuffer[0] = index;
 8007556:	4d0a      	ldr	r5, [pc, #40]	; (8007580 <VL53L0X_WriteMulti+0x38>)
 8007558:	4628      	mov	r0, r5
    memcpy(&_I2CBuffer[1], pdata, count);
 800755a:	461a      	mov	r2, r3
    _I2CBuffer[0] = index;
 800755c:	f800 7b01 	strb.w	r7, [r0], #1
    memcpy(&_I2CBuffer[1], pdata, count);
 8007560:	f000 f97c 	bl	800785c <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8007564:	1c62      	adds	r2, r4, #1
 8007566:	4629      	mov	r1, r5
 8007568:	4630      	mov	r0, r6
 800756a:	f7ff ffb9 	bl	80074e0 <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800756e:	2800      	cmp	r0, #0
 8007570:	bf0c      	ite	eq
 8007572:	2000      	moveq	r0, #0
 8007574:	f06f 0013 	mvnne.w	r0, #19
 8007578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L0X_ERROR_INVALID_PARAMS;
 800757a:	f06f 0003 	mvn.w	r0, #3
    }
    
    return Status;
}
 800757e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007580:	20000f10 	.word	0x20000f10

08007584 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007586:	ac02      	add	r4, sp, #8
 8007588:	4616      	mov	r6, r2
 800758a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 800758e:	2201      	movs	r2, #1
 8007590:	4621      	mov	r1, r4
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007592:	4605      	mov	r5, r0
 8007594:	461f      	mov	r7, r3
    status_int = _I2CWrite(Dev, &index, 1);
 8007596:	f7ff ffa3 	bl	80074e0 <_I2CWrite>
    
    if (status_int != 0) {
 800759a:	b928      	cbnz	r0, 80075a8 <VL53L0X_ReadMulti+0x24>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 800759c:	463a      	mov	r2, r7
 800759e:	4631      	mov	r1, r6
 80075a0:	4628      	mov	r0, r5
 80075a2:	f7ff ffac 	bl	80074fe <_I2CRead>
    
    if (status_int != 0) {
 80075a6:	b108      	cbz	r0, 80075ac <VL53L0X_ReadMulti+0x28>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80075a8:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 80075ac:	b003      	add	sp, #12
 80075ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075b0 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80075b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075b2:	ab02      	add	r3, sp, #8
 80075b4:	4615      	mov	r5, r2
 80075b6:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80075ba:	2201      	movs	r2, #1
 80075bc:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80075be:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 80075c0:	f7ff ff8e 	bl	80074e0 <_I2CWrite>

    if( status_int ){
 80075c4:	b118      	cbz	r0, 80075ce <VL53L0X_RdWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80075c6:	f06f 0013 	mvn.w	r0, #19
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    return Status;
}
 80075ca:	b002      	add	sp, #8
 80075cc:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80075ce:	4c07      	ldr	r4, [pc, #28]	; (80075ec <VL53L0X_RdWord+0x3c>)
 80075d0:	2202      	movs	r2, #2
 80075d2:	4621      	mov	r1, r4
 80075d4:	4630      	mov	r0, r6
 80075d6:	f7ff ff92 	bl	80074fe <_I2CRead>
    if (status_int != 0) {
 80075da:	2800      	cmp	r0, #0
 80075dc:	d1f3      	bne.n	80075c6 <VL53L0X_RdWord+0x16>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80075de:	7822      	ldrb	r2, [r4, #0]
 80075e0:	7863      	ldrb	r3, [r4, #1]
 80075e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80075e6:	802b      	strh	r3, [r5, #0]
 80075e8:	e7ef      	b.n	80075ca <VL53L0X_RdWord+0x1a>
 80075ea:	bf00      	nop
 80075ec:	20000f10 	.word	0x20000f10

080075f0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80075f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075f2:	ab02      	add	r3, sp, #8
 80075f4:	4615      	mov	r5, r2
 80075f6:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80075fa:	2201      	movs	r2, #1
 80075fc:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80075fe:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8007600:	f7ff ff6e 	bl	80074e0 <_I2CWrite>
    
    if (status_int != 0) {
 8007604:	b118      	cbz	r0, 800760e <VL53L0X_RdDWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007606:	f06f 0013 	mvn.w	r0, #19

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];

done:
    return Status;
}
 800760a:	b002      	add	sp, #8
 800760c:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800760e:	4c0a      	ldr	r4, [pc, #40]	; (8007638 <VL53L0X_RdDWord+0x48>)
 8007610:	2204      	movs	r2, #4
 8007612:	4621      	mov	r1, r4
 8007614:	4630      	mov	r0, r6
 8007616:	f7ff ff72 	bl	80074fe <_I2CRead>
    if (status_int != 0) {
 800761a:	2800      	cmp	r0, #0
 800761c:	d1f3      	bne.n	8007606 <VL53L0X_RdDWord+0x16>
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800761e:	7863      	ldrb	r3, [r4, #1]
 8007620:	7822      	ldrb	r2, [r4, #0]
 8007622:	041b      	lsls	r3, r3, #16
 8007624:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8007628:	78e2      	ldrb	r2, [r4, #3]
 800762a:	4413      	add	r3, r2
 800762c:	78a2      	ldrb	r2, [r4, #2]
 800762e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	e7e9      	b.n	800760a <VL53L0X_RdDWord+0x1a>
 8007636:	bf00      	nop
 8007638:	20000f10 	.word	0x20000f10

0800763c <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800763c:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 800763e:	4b06      	ldr	r3, [pc, #24]	; (8007658 <VL53L0X_WrByte+0x1c>)
 8007640:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 8007642:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8007644:	4619      	mov	r1, r3
 8007646:	2202      	movs	r2, #2
 8007648:	f7ff ff4a 	bl	80074e0 <_I2CWrite>
    
    if (status_int != 0) {
 800764c:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 800764e:	bf14      	ite	ne
 8007650:	f06f 0013 	mvnne.w	r0, #19
 8007654:	2000      	moveq	r0, #0
 8007656:	bd08      	pop	{r3, pc}
 8007658:	20000f10 	.word	0x20000f10

0800765c <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800765c:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 800765e:	4b07      	ldr	r3, [pc, #28]	; (800767c <VL53L0X_WrWord+0x20>)
 8007660:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 8007662:	0a11      	lsrs	r1, r2, #8
 8007664:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8007666:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8007668:	4619      	mov	r1, r3
 800766a:	2203      	movs	r2, #3
 800766c:	f7ff ff38 	bl	80074e0 <_I2CWrite>
    
    if (status_int != 0) {
 8007670:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 8007672:	bf14      	ite	ne
 8007674:	f06f 0013 	mvnne.w	r0, #19
 8007678:	2000      	moveq	r0, #0
 800767a:	bd08      	pop	{r3, pc}
 800767c:	20000f10 	.word	0x20000f10

08007680 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007682:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8007684:	f10d 0207 	add.w	r2, sp, #7
VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007688:	4606      	mov	r6, r0
 800768a:	460f      	mov	r7, r1
 800768c:	461c      	mov	r4, r3
    Status = VL53L0X_RdByte(Dev, index, &data);
 800768e:	f7ff ff46 	bl	800751e <VL53L0X_RdByte>
    
    if (Status) {
 8007692:	b948      	cbnz	r0, 80076a8 <VL53L0X_UpdateByte+0x28>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8007694:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007698:	402a      	ands	r2, r5
 800769a:	4322      	orrs	r2, r4
    Status = VL53L0X_WrByte(Dev, index, data);
 800769c:	4639      	mov	r1, r7
 800769e:	4630      	mov	r0, r6
    data = (data & AndData) | OrData;
 80076a0:	f88d 2007 	strb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 80076a4:	f7ff ffca 	bl	800763c <VL53L0X_WrByte>
done:
    return Status;
}
 80076a8:	b003      	add	sp, #12
 80076aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076ac <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80076ac:	b508      	push	{r3, lr}
    VL53L0X_Error status = VL53L0X_ERROR_NONE;

    // do nothing
    VL53L0X_OsDelay();
 80076ae:	2002      	movs	r0, #2
 80076b0:	f7fa f89a 	bl	80017e8 <HAL_Delay>
    return status;
}
 80076b4:	2000      	movs	r0, #0
 80076b6:	bd08      	pop	{r3, pc}

080076b8 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 80076b8:	b084      	sub	sp, #16
 80076ba:	b507      	push	{r0, r1, r2, lr}
 80076bc:	f10d 0e10 	add.w	lr, sp, #16
 80076c0:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint32_t timingBudget = 33000;
	uint8_t preRangeVcselPeriod = 14;
	uint8_t finalRangeVcselPeriod = 10;

                          
  if( Dev.Present){
 80076c4:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d064      	beq.n	8007794 <SetupSingleShot+0xdc>
    status=VL53L0X_StaticInit(&Dev);
 80076ca:	4670      	mov	r0, lr
 80076cc:	f7fe f934 	bl	8005938 <VL53L0X_StaticInit>
    if( status ){
 80076d0:	b110      	cbz	r0, 80076d8 <SetupSingleShot+0x20>
      printf("VL53L0X_StaticInit failed\n");
 80076d2:	4833      	ldr	r0, [pc, #204]	; (80077a0 <SetupSingleShot+0xe8>)
 80076d4:	f000 fd9e 	bl	8008214 <puts>
    }
    
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 80076d8:	f10d 0202 	add.w	r2, sp, #2
 80076dc:	f10d 0101 	add.w	r1, sp, #1
 80076e0:	a804      	add	r0, sp, #16
 80076e2:	f7fd fee9 	bl	80054b8 <VL53L0X_PerformRefCalibration>
    if( status ){
 80076e6:	b110      	cbz	r0, 80076ee <SetupSingleShot+0x36>
      printf("VL53L0X_PerformRefCalibration failed\n");
 80076e8:	482e      	ldr	r0, [pc, #184]	; (80077a4 <SetupSingleShot+0xec>)
 80076ea:	f000 fd93 	bl	8008214 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 80076ee:	f10d 0203 	add.w	r2, sp, #3
 80076f2:	a901      	add	r1, sp, #4
 80076f4:	a804      	add	r0, sp, #16
 80076f6:	f7fe fa24 	bl	8005b42 <VL53L0X_PerformRefSpadManagement>
    if( status ){
 80076fa:	b110      	cbz	r0, 8007702 <SetupSingleShot+0x4a>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 80076fc:	482a      	ldr	r0, [pc, #168]	; (80077a8 <SetupSingleShot+0xf0>)
 80076fe:	f000 fd89 	bl	8008214 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8007702:	2100      	movs	r1, #0
 8007704:	a804      	add	r0, sp, #16
 8007706:	f7fd fc63 	bl	8004fd0 <VL53L0X_SetDeviceMode>
    if( status ){
 800770a:	b110      	cbz	r0, 8007712 <SetupSingleShot+0x5a>
      printf("VL53L0X_SetDeviceMode failed\n");
 800770c:	4827      	ldr	r0, [pc, #156]	; (80077ac <SetupSingleShot+0xf4>)
 800770e:	f000 fd81 	bl	8008214 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8007712:	2201      	movs	r2, #1
 8007714:	2100      	movs	r1, #0
 8007716:	a804      	add	r0, sp, #16
 8007718:	f7fd fd36 	bl	8005188 <VL53L0X_SetLimitCheckEnable>
    if( status ){
 800771c:	b110      	cbz	r0, 8007724 <SetupSingleShot+0x6c>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800771e:	4824      	ldr	r0, [pc, #144]	; (80077b0 <SetupSingleShot+0xf8>)
 8007720:	f000 fd78 	bl	8008214 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8007724:	2201      	movs	r2, #1
 8007726:	4611      	mov	r1, r2
 8007728:	a804      	add	r0, sp, #16
 800772a:	f7fd fd2d 	bl	8005188 <VL53L0X_SetLimitCheckEnable>
    if( status ){
 800772e:	b110      	cbz	r0, 8007736 <SetupSingleShot+0x7e>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8007730:	481f      	ldr	r0, [pc, #124]	; (80077b0 <SetupSingleShot+0xf8>)
 8007732:	f000 fd6f 	bl	8008214 <puts>
    sigmaLimit = (FixPoint1616_t)(60*65536);
    timingBudget = 33000;
    preRangeVcselPeriod = 18;
    finalRangeVcselPeriod = 14;
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8007736:	f641 1299 	movw	r2, #6553	; 0x1999
 800773a:	2101      	movs	r1, #1
 800773c:	a804      	add	r0, sp, #16
 800773e:	f7fd fd70 	bl	8005222 <VL53L0X_SetLimitCheckValue>
    
    if( status ){
 8007742:	b110      	cbz	r0, 800774a <SetupSingleShot+0x92>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8007744:	481b      	ldr	r0, [pc, #108]	; (80077b4 <SetupSingleShot+0xfc>)
 8007746:	f000 fd65 	bl	8008214 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800774a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800774e:	2100      	movs	r1, #0
 8007750:	a804      	add	r0, sp, #16
 8007752:	f7fd fd66 	bl	8005222 <VL53L0X_SetLimitCheckValue>
    if( status ){
 8007756:	b110      	cbz	r0, 800775e <SetupSingleShot+0xa6>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8007758:	4816      	ldr	r0, [pc, #88]	; (80077b4 <SetupSingleShot+0xfc>)
 800775a:	f000 fd5b 	bl	8008214 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 800775e:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8007762:	a804      	add	r0, sp, #16
 8007764:	f7fd fc50 	bl	8005008 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    if( status ){
 8007768:	b110      	cbz	r0, 8007770 <SetupSingleShot+0xb8>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 800776a:	4813      	ldr	r0, [pc, #76]	; (80077b8 <SetupSingleShot+0x100>)
 800776c:	f000 fd52 	bl	8008214 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8007770:	2212      	movs	r2, #18
 8007772:	2100      	movs	r1, #0
 8007774:	a804      	add	r0, sp, #16
 8007776:	f7fd fc49 	bl	800500c <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 800777a:	b110      	cbz	r0, 8007782 <SetupSingleShot+0xca>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800777c:	480f      	ldr	r0, [pc, #60]	; (80077bc <SetupSingleShot+0x104>)
 800777e:	f000 fd49 	bl	8008214 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8007782:	220e      	movs	r2, #14
 8007784:	2101      	movs	r1, #1
 8007786:	a804      	add	r0, sp, #16
 8007788:	f7fd fc40 	bl	800500c <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 800778c:	b110      	cbz	r0, 8007794 <SetupSingleShot+0xdc>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800778e:	480b      	ldr	r0, [pc, #44]	; (80077bc <SetupSingleShot+0x104>)
 8007790:	f000 fd40 	bl	8008214 <puts>
    }
    
    Dev.LeakyFirst=1;
  }
}
 8007794:	b003      	add	sp, #12
 8007796:	f85d eb04 	ldr.w	lr, [sp], #4
 800779a:	b004      	add	sp, #16
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	0800a2fd 	.word	0x0800a2fd
 80077a4:	0800a317 	.word	0x0800a317
 80077a8:	0800a33c 	.word	0x0800a33c
 80077ac:	0800a364 	.word	0x0800a364
 80077b0:	0800a381 	.word	0x0800a381
 80077b4:	0800a3a4 	.word	0x0800a3a4
 80077b8:	0800a3c6 	.word	0x0800a3c6
 80077bc:	0800a3fc 	.word	0x0800a3fc

080077c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80077c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80077f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80077c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80077c6:	e003      	b.n	80077d0 <LoopCopyDataInit>

080077c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80077c8:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80077ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80077cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80077ce:	3104      	adds	r1, #4

080077d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80077d0:	480b      	ldr	r0, [pc, #44]	; (8007800 <LoopForever+0xa>)
	ldr	r3, =_edata
 80077d2:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <LoopForever+0xe>)
	adds	r2, r0, r1
 80077d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80077d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80077d8:	d3f6      	bcc.n	80077c8 <CopyDataInit>
	ldr	r2, =_sbss
 80077da:	4a0b      	ldr	r2, [pc, #44]	; (8007808 <LoopForever+0x12>)
	b	LoopFillZerobss
 80077dc:	e002      	b.n	80077e4 <LoopFillZerobss>

080077de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80077de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80077e0:	f842 3b04 	str.w	r3, [r2], #4

080077e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80077e4:	4b09      	ldr	r3, [pc, #36]	; (800780c <LoopForever+0x16>)
	cmp	r2, r3
 80077e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80077e8:	d3f9      	bcc.n	80077de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80077ea:	f7fd fbcb 	bl	8004f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80077ee:	f000 f811 	bl	8007814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80077f2:	f7fc fe55 	bl	80044a0 <main>

080077f6 <LoopForever>:

LoopForever:
    b LoopForever
 80077f6:	e7fe      	b.n	80077f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80077f8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80077fc:	0800a6f0 	.word	0x0800a6f0
	ldr	r0, =_sdata
 8007800:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007804:	200006dc 	.word	0x200006dc
	ldr	r2, =_sbss
 8007808:	200006dc 	.word	0x200006dc
	ldr	r3, = _ebss
 800780c:	20000f54 	.word	0x20000f54

08007810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007810:	e7fe      	b.n	8007810 <ADC1_2_IRQHandler>
	...

08007814 <__libc_init_array>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	4e0d      	ldr	r6, [pc, #52]	; (800784c <__libc_init_array+0x38>)
 8007818:	4c0d      	ldr	r4, [pc, #52]	; (8007850 <__libc_init_array+0x3c>)
 800781a:	1ba4      	subs	r4, r4, r6
 800781c:	10a4      	asrs	r4, r4, #2
 800781e:	2500      	movs	r5, #0
 8007820:	42a5      	cmp	r5, r4
 8007822:	d109      	bne.n	8007838 <__libc_init_array+0x24>
 8007824:	4e0b      	ldr	r6, [pc, #44]	; (8007854 <__libc_init_array+0x40>)
 8007826:	4c0c      	ldr	r4, [pc, #48]	; (8007858 <__libc_init_array+0x44>)
 8007828:	f002 fc78 	bl	800a11c <_init>
 800782c:	1ba4      	subs	r4, r4, r6
 800782e:	10a4      	asrs	r4, r4, #2
 8007830:	2500      	movs	r5, #0
 8007832:	42a5      	cmp	r5, r4
 8007834:	d105      	bne.n	8007842 <__libc_init_array+0x2e>
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800783c:	4798      	blx	r3
 800783e:	3501      	adds	r5, #1
 8007840:	e7ee      	b.n	8007820 <__libc_init_array+0xc>
 8007842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007846:	4798      	blx	r3
 8007848:	3501      	adds	r5, #1
 800784a:	e7f2      	b.n	8007832 <__libc_init_array+0x1e>
 800784c:	0800a6e8 	.word	0x0800a6e8
 8007850:	0800a6e8 	.word	0x0800a6e8
 8007854:	0800a6e8 	.word	0x0800a6e8
 8007858:	0800a6ec 	.word	0x0800a6ec

0800785c <memcpy>:
 800785c:	b510      	push	{r4, lr}
 800785e:	1e43      	subs	r3, r0, #1
 8007860:	440a      	add	r2, r1
 8007862:	4291      	cmp	r1, r2
 8007864:	d100      	bne.n	8007868 <memcpy+0xc>
 8007866:	bd10      	pop	{r4, pc}
 8007868:	f811 4b01 	ldrb.w	r4, [r1], #1
 800786c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007870:	e7f7      	b.n	8007862 <memcpy+0x6>

08007872 <memset>:
 8007872:	4402      	add	r2, r0
 8007874:	4603      	mov	r3, r0
 8007876:	4293      	cmp	r3, r2
 8007878:	d100      	bne.n	800787c <memset+0xa>
 800787a:	4770      	bx	lr
 800787c:	f803 1b01 	strb.w	r1, [r3], #1
 8007880:	e7f9      	b.n	8007876 <memset+0x4>

08007882 <__cvt>:
 8007882:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007886:	ec55 4b10 	vmov	r4, r5, d0
 800788a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800788c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007890:	2d00      	cmp	r5, #0
 8007892:	460e      	mov	r6, r1
 8007894:	4691      	mov	r9, r2
 8007896:	4619      	mov	r1, r3
 8007898:	bfb8      	it	lt
 800789a:	4622      	movlt	r2, r4
 800789c:	462b      	mov	r3, r5
 800789e:	f027 0720 	bic.w	r7, r7, #32
 80078a2:	bfbb      	ittet	lt
 80078a4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078a8:	461d      	movlt	r5, r3
 80078aa:	2300      	movge	r3, #0
 80078ac:	232d      	movlt	r3, #45	; 0x2d
 80078ae:	bfb8      	it	lt
 80078b0:	4614      	movlt	r4, r2
 80078b2:	2f46      	cmp	r7, #70	; 0x46
 80078b4:	700b      	strb	r3, [r1, #0]
 80078b6:	d004      	beq.n	80078c2 <__cvt+0x40>
 80078b8:	2f45      	cmp	r7, #69	; 0x45
 80078ba:	d100      	bne.n	80078be <__cvt+0x3c>
 80078bc:	3601      	adds	r6, #1
 80078be:	2102      	movs	r1, #2
 80078c0:	e000      	b.n	80078c4 <__cvt+0x42>
 80078c2:	2103      	movs	r1, #3
 80078c4:	ab03      	add	r3, sp, #12
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	ab02      	add	r3, sp, #8
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	4632      	mov	r2, r6
 80078ce:	4653      	mov	r3, sl
 80078d0:	ec45 4b10 	vmov	d0, r4, r5
 80078d4:	f000 fe20 	bl	8008518 <_dtoa_r>
 80078d8:	2f47      	cmp	r7, #71	; 0x47
 80078da:	4680      	mov	r8, r0
 80078dc:	d102      	bne.n	80078e4 <__cvt+0x62>
 80078de:	f019 0f01 	tst.w	r9, #1
 80078e2:	d026      	beq.n	8007932 <__cvt+0xb0>
 80078e4:	2f46      	cmp	r7, #70	; 0x46
 80078e6:	eb08 0906 	add.w	r9, r8, r6
 80078ea:	d111      	bne.n	8007910 <__cvt+0x8e>
 80078ec:	f898 3000 	ldrb.w	r3, [r8]
 80078f0:	2b30      	cmp	r3, #48	; 0x30
 80078f2:	d10a      	bne.n	800790a <__cvt+0x88>
 80078f4:	2200      	movs	r2, #0
 80078f6:	2300      	movs	r3, #0
 80078f8:	4620      	mov	r0, r4
 80078fa:	4629      	mov	r1, r5
 80078fc:	f7f9 f8e0 	bl	8000ac0 <__aeabi_dcmpeq>
 8007900:	b918      	cbnz	r0, 800790a <__cvt+0x88>
 8007902:	f1c6 0601 	rsb	r6, r6, #1
 8007906:	f8ca 6000 	str.w	r6, [sl]
 800790a:	f8da 3000 	ldr.w	r3, [sl]
 800790e:	4499      	add	r9, r3
 8007910:	2200      	movs	r2, #0
 8007912:	2300      	movs	r3, #0
 8007914:	4620      	mov	r0, r4
 8007916:	4629      	mov	r1, r5
 8007918:	f7f9 f8d2 	bl	8000ac0 <__aeabi_dcmpeq>
 800791c:	b938      	cbnz	r0, 800792e <__cvt+0xac>
 800791e:	2230      	movs	r2, #48	; 0x30
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	4599      	cmp	r9, r3
 8007924:	d905      	bls.n	8007932 <__cvt+0xb0>
 8007926:	1c59      	adds	r1, r3, #1
 8007928:	9103      	str	r1, [sp, #12]
 800792a:	701a      	strb	r2, [r3, #0]
 800792c:	e7f8      	b.n	8007920 <__cvt+0x9e>
 800792e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007932:	9b03      	ldr	r3, [sp, #12]
 8007934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007936:	eba3 0308 	sub.w	r3, r3, r8
 800793a:	4640      	mov	r0, r8
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	b004      	add	sp, #16
 8007940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007944 <__exponent>:
 8007944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007946:	4603      	mov	r3, r0
 8007948:	2900      	cmp	r1, #0
 800794a:	bfb8      	it	lt
 800794c:	4249      	neglt	r1, r1
 800794e:	f803 2b02 	strb.w	r2, [r3], #2
 8007952:	bfb4      	ite	lt
 8007954:	222d      	movlt	r2, #45	; 0x2d
 8007956:	222b      	movge	r2, #43	; 0x2b
 8007958:	2909      	cmp	r1, #9
 800795a:	7042      	strb	r2, [r0, #1]
 800795c:	dd20      	ble.n	80079a0 <__exponent+0x5c>
 800795e:	f10d 0207 	add.w	r2, sp, #7
 8007962:	4617      	mov	r7, r2
 8007964:	260a      	movs	r6, #10
 8007966:	fb91 f5f6 	sdiv	r5, r1, r6
 800796a:	fb06 1115 	mls	r1, r6, r5, r1
 800796e:	3130      	adds	r1, #48	; 0x30
 8007970:	2d09      	cmp	r5, #9
 8007972:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007976:	f102 34ff 	add.w	r4, r2, #4294967295
 800797a:	4629      	mov	r1, r5
 800797c:	dc09      	bgt.n	8007992 <__exponent+0x4e>
 800797e:	3130      	adds	r1, #48	; 0x30
 8007980:	3a02      	subs	r2, #2
 8007982:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007986:	42ba      	cmp	r2, r7
 8007988:	461c      	mov	r4, r3
 800798a:	d304      	bcc.n	8007996 <__exponent+0x52>
 800798c:	1a20      	subs	r0, r4, r0
 800798e:	b003      	add	sp, #12
 8007990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007992:	4622      	mov	r2, r4
 8007994:	e7e7      	b.n	8007966 <__exponent+0x22>
 8007996:	f812 1b01 	ldrb.w	r1, [r2], #1
 800799a:	f803 1b01 	strb.w	r1, [r3], #1
 800799e:	e7f2      	b.n	8007986 <__exponent+0x42>
 80079a0:	2230      	movs	r2, #48	; 0x30
 80079a2:	461c      	mov	r4, r3
 80079a4:	4411      	add	r1, r2
 80079a6:	f804 2b02 	strb.w	r2, [r4], #2
 80079aa:	7059      	strb	r1, [r3, #1]
 80079ac:	e7ee      	b.n	800798c <__exponent+0x48>
	...

080079b0 <_printf_float>:
 80079b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	b08d      	sub	sp, #52	; 0x34
 80079b6:	460c      	mov	r4, r1
 80079b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80079bc:	4616      	mov	r6, r2
 80079be:	461f      	mov	r7, r3
 80079c0:	4605      	mov	r5, r0
 80079c2:	f001 fcf3 	bl	80093ac <_localeconv_r>
 80079c6:	6803      	ldr	r3, [r0, #0]
 80079c8:	9304      	str	r3, [sp, #16]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7f8 fc00 	bl	80001d0 <strlen>
 80079d0:	2300      	movs	r3, #0
 80079d2:	930a      	str	r3, [sp, #40]	; 0x28
 80079d4:	f8d8 3000 	ldr.w	r3, [r8]
 80079d8:	9005      	str	r0, [sp, #20]
 80079da:	3307      	adds	r3, #7
 80079dc:	f023 0307 	bic.w	r3, r3, #7
 80079e0:	f103 0208 	add.w	r2, r3, #8
 80079e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80079e8:	f8d4 b000 	ldr.w	fp, [r4]
 80079ec:	f8c8 2000 	str.w	r2, [r8]
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079f8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80079fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a00:	9307      	str	r3, [sp, #28]
 8007a02:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a06:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0a:	4ba5      	ldr	r3, [pc, #660]	; (8007ca0 <_printf_float+0x2f0>)
 8007a0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a10:	f7f9 f888 	bl	8000b24 <__aeabi_dcmpun>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	f040 81fb 	bne.w	8007e10 <_printf_float+0x460>
 8007a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a1e:	4ba0      	ldr	r3, [pc, #640]	; (8007ca0 <_printf_float+0x2f0>)
 8007a20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a24:	f7f9 f860 	bl	8000ae8 <__aeabi_dcmple>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	f040 81f1 	bne.w	8007e10 <_printf_float+0x460>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2300      	movs	r3, #0
 8007a32:	4640      	mov	r0, r8
 8007a34:	4649      	mov	r1, r9
 8007a36:	f7f9 f84d 	bl	8000ad4 <__aeabi_dcmplt>
 8007a3a:	b110      	cbz	r0, 8007a42 <_printf_float+0x92>
 8007a3c:	232d      	movs	r3, #45	; 0x2d
 8007a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a42:	4b98      	ldr	r3, [pc, #608]	; (8007ca4 <_printf_float+0x2f4>)
 8007a44:	4a98      	ldr	r2, [pc, #608]	; (8007ca8 <_printf_float+0x2f8>)
 8007a46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007a4a:	bf8c      	ite	hi
 8007a4c:	4690      	movhi	r8, r2
 8007a4e:	4698      	movls	r8, r3
 8007a50:	2303      	movs	r3, #3
 8007a52:	f02b 0204 	bic.w	r2, fp, #4
 8007a56:	6123      	str	r3, [r4, #16]
 8007a58:	6022      	str	r2, [r4, #0]
 8007a5a:	f04f 0900 	mov.w	r9, #0
 8007a5e:	9700      	str	r7, [sp, #0]
 8007a60:	4633      	mov	r3, r6
 8007a62:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a64:	4621      	mov	r1, r4
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 f9e2 	bl	8007e30 <_printf_common>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	f040 8093 	bne.w	8007b98 <_printf_float+0x1e8>
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295
 8007a76:	b00d      	add	sp, #52	; 0x34
 8007a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	1c4b      	adds	r3, r1, #1
 8007a80:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007a84:	d13f      	bne.n	8007b06 <_printf_float+0x156>
 8007a86:	2306      	movs	r3, #6
 8007a88:	6063      	str	r3, [r4, #4]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9303      	str	r3, [sp, #12]
 8007a8e:	ab0a      	add	r3, sp, #40	; 0x28
 8007a90:	9302      	str	r3, [sp, #8]
 8007a92:	ab09      	add	r3, sp, #36	; 0x24
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	ec49 8b10 	vmov	d0, r8, r9
 8007a9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a9e:	6022      	str	r2, [r4, #0]
 8007aa0:	f8cd a004 	str.w	sl, [sp, #4]
 8007aa4:	6861      	ldr	r1, [r4, #4]
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f7ff feeb 	bl	8007882 <__cvt>
 8007aac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007ab0:	2b47      	cmp	r3, #71	; 0x47
 8007ab2:	4680      	mov	r8, r0
 8007ab4:	d109      	bne.n	8007aca <_printf_float+0x11a>
 8007ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab8:	1cd8      	adds	r0, r3, #3
 8007aba:	db02      	blt.n	8007ac2 <_printf_float+0x112>
 8007abc:	6862      	ldr	r2, [r4, #4]
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	dd57      	ble.n	8007b72 <_printf_float+0x1c2>
 8007ac2:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ac6:	fa5f fa8a 	uxtb.w	sl, sl
 8007aca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007ace:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ad0:	d834      	bhi.n	8007b3c <_printf_float+0x18c>
 8007ad2:	3901      	subs	r1, #1
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ada:	9109      	str	r1, [sp, #36]	; 0x24
 8007adc:	f7ff ff32 	bl	8007944 <__exponent>
 8007ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ae2:	1883      	adds	r3, r0, r2
 8007ae4:	2a01      	cmp	r2, #1
 8007ae6:	4681      	mov	r9, r0
 8007ae8:	6123      	str	r3, [r4, #16]
 8007aea:	dc02      	bgt.n	8007af2 <_printf_float+0x142>
 8007aec:	6822      	ldr	r2, [r4, #0]
 8007aee:	07d1      	lsls	r1, r2, #31
 8007af0:	d501      	bpl.n	8007af6 <_printf_float+0x146>
 8007af2:	3301      	adds	r3, #1
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0af      	beq.n	8007a5e <_printf_float+0xae>
 8007afe:	232d      	movs	r3, #45	; 0x2d
 8007b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b04:	e7ab      	b.n	8007a5e <_printf_float+0xae>
 8007b06:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007b0a:	d002      	beq.n	8007b12 <_printf_float+0x162>
 8007b0c:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007b10:	d1bb      	bne.n	8007a8a <_printf_float+0xda>
 8007b12:	b189      	cbz	r1, 8007b38 <_printf_float+0x188>
 8007b14:	2300      	movs	r3, #0
 8007b16:	9303      	str	r3, [sp, #12]
 8007b18:	ab0a      	add	r3, sp, #40	; 0x28
 8007b1a:	9302      	str	r3, [sp, #8]
 8007b1c:	ab09      	add	r3, sp, #36	; 0x24
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	ec49 8b10 	vmov	d0, r8, r9
 8007b24:	6022      	str	r2, [r4, #0]
 8007b26:	f8cd a004 	str.w	sl, [sp, #4]
 8007b2a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f7ff fea7 	bl	8007882 <__cvt>
 8007b34:	4680      	mov	r8, r0
 8007b36:	e7be      	b.n	8007ab6 <_printf_float+0x106>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e7a5      	b.n	8007a88 <_printf_float+0xd8>
 8007b3c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007b40:	d119      	bne.n	8007b76 <_printf_float+0x1c6>
 8007b42:	2900      	cmp	r1, #0
 8007b44:	6863      	ldr	r3, [r4, #4]
 8007b46:	dd0c      	ble.n	8007b62 <_printf_float+0x1b2>
 8007b48:	6121      	str	r1, [r4, #16]
 8007b4a:	b913      	cbnz	r3, 8007b52 <_printf_float+0x1a2>
 8007b4c:	6822      	ldr	r2, [r4, #0]
 8007b4e:	07d2      	lsls	r2, r2, #31
 8007b50:	d502      	bpl.n	8007b58 <_printf_float+0x1a8>
 8007b52:	3301      	adds	r3, #1
 8007b54:	440b      	add	r3, r1
 8007b56:	6123      	str	r3, [r4, #16]
 8007b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007b5c:	f04f 0900 	mov.w	r9, #0
 8007b60:	e7c9      	b.n	8007af6 <_printf_float+0x146>
 8007b62:	b913      	cbnz	r3, 8007b6a <_printf_float+0x1ba>
 8007b64:	6822      	ldr	r2, [r4, #0]
 8007b66:	07d0      	lsls	r0, r2, #31
 8007b68:	d501      	bpl.n	8007b6e <_printf_float+0x1be>
 8007b6a:	3302      	adds	r3, #2
 8007b6c:	e7f3      	b.n	8007b56 <_printf_float+0x1a6>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e7f1      	b.n	8007b56 <_printf_float+0x1a6>
 8007b72:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	db05      	blt.n	8007b8a <_printf_float+0x1da>
 8007b7e:	6822      	ldr	r2, [r4, #0]
 8007b80:	6123      	str	r3, [r4, #16]
 8007b82:	07d1      	lsls	r1, r2, #31
 8007b84:	d5e8      	bpl.n	8007b58 <_printf_float+0x1a8>
 8007b86:	3301      	adds	r3, #1
 8007b88:	e7e5      	b.n	8007b56 <_printf_float+0x1a6>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bfd4      	ite	le
 8007b8e:	f1c3 0302 	rsble	r3, r3, #2
 8007b92:	2301      	movgt	r3, #1
 8007b94:	4413      	add	r3, r2
 8007b96:	e7de      	b.n	8007b56 <_printf_float+0x1a6>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	055a      	lsls	r2, r3, #21
 8007b9c:	d407      	bmi.n	8007bae <_printf_float+0x1fe>
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	47b8      	blx	r7
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d12b      	bne.n	8007c04 <_printf_float+0x254>
 8007bac:	e761      	b.n	8007a72 <_printf_float+0xc2>
 8007bae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007bb2:	f240 80e2 	bls.w	8007d7a <_printf_float+0x3ca>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2300      	movs	r3, #0
 8007bba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bbe:	f7f8 ff7f 	bl	8000ac0 <__aeabi_dcmpeq>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d03c      	beq.n	8007c40 <_printf_float+0x290>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4a38      	ldr	r2, [pc, #224]	; (8007cac <_printf_float+0x2fc>)
 8007bca:	4631      	mov	r1, r6
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b8      	blx	r7
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f43f af4e 	beq.w	8007a72 <_printf_float+0xc2>
 8007bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	db02      	blt.n	8007be4 <_printf_float+0x234>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	07d8      	lsls	r0, r3, #31
 8007be2:	d50f      	bpl.n	8007c04 <_printf_float+0x254>
 8007be4:	9b05      	ldr	r3, [sp, #20]
 8007be6:	9a04      	ldr	r2, [sp, #16]
 8007be8:	4631      	mov	r1, r6
 8007bea:	4628      	mov	r0, r5
 8007bec:	47b8      	blx	r7
 8007bee:	3001      	adds	r0, #1
 8007bf0:	f43f af3f 	beq.w	8007a72 <_printf_float+0xc2>
 8007bf4:	f04f 0800 	mov.w	r8, #0
 8007bf8:	f104 091a 	add.w	r9, r4, #26
 8007bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	4598      	cmp	r8, r3
 8007c02:	db12      	blt.n	8007c2a <_printf_float+0x27a>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	079b      	lsls	r3, r3, #30
 8007c08:	d509      	bpl.n	8007c1e <_printf_float+0x26e>
 8007c0a:	f04f 0800 	mov.w	r8, #0
 8007c0e:	f104 0919 	add.w	r9, r4, #25
 8007c12:	68e3      	ldr	r3, [r4, #12]
 8007c14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c16:	1a9b      	subs	r3, r3, r2
 8007c18:	4598      	cmp	r8, r3
 8007c1a:	f2c0 80ee 	blt.w	8007dfa <_printf_float+0x44a>
 8007c1e:	68e0      	ldr	r0, [r4, #12]
 8007c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c22:	4298      	cmp	r0, r3
 8007c24:	bfb8      	it	lt
 8007c26:	4618      	movlt	r0, r3
 8007c28:	e725      	b.n	8007a76 <_printf_float+0xc6>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	464a      	mov	r2, r9
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b8      	blx	r7
 8007c34:	3001      	adds	r0, #1
 8007c36:	f43f af1c 	beq.w	8007a72 <_printf_float+0xc2>
 8007c3a:	f108 0801 	add.w	r8, r8, #1
 8007c3e:	e7dd      	b.n	8007bfc <_printf_float+0x24c>
 8007c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	dc34      	bgt.n	8007cb0 <_printf_float+0x300>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4a18      	ldr	r2, [pc, #96]	; (8007cac <_printf_float+0x2fc>)
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f af0e 	beq.w	8007a72 <_printf_float+0xc2>
 8007c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c58:	b923      	cbnz	r3, 8007c64 <_printf_float+0x2b4>
 8007c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5c:	b913      	cbnz	r3, 8007c64 <_printf_float+0x2b4>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	07d9      	lsls	r1, r3, #31
 8007c62:	d5cf      	bpl.n	8007c04 <_printf_float+0x254>
 8007c64:	9b05      	ldr	r3, [sp, #20]
 8007c66:	9a04      	ldr	r2, [sp, #16]
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f aeff 	beq.w	8007a72 <_printf_float+0xc2>
 8007c74:	f04f 0900 	mov.w	r9, #0
 8007c78:	f104 0a1a 	add.w	sl, r4, #26
 8007c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7e:	425b      	negs	r3, r3
 8007c80:	4599      	cmp	r9, r3
 8007c82:	db01      	blt.n	8007c88 <_printf_float+0x2d8>
 8007c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c86:	e78b      	b.n	8007ba0 <_printf_float+0x1f0>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	4652      	mov	r2, sl
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b8      	blx	r7
 8007c92:	3001      	adds	r0, #1
 8007c94:	f43f aeed 	beq.w	8007a72 <_printf_float+0xc2>
 8007c98:	f109 0901 	add.w	r9, r9, #1
 8007c9c:	e7ee      	b.n	8007c7c <_printf_float+0x2cc>
 8007c9e:	bf00      	nop
 8007ca0:	7fefffff 	.word	0x7fefffff
 8007ca4:	0800a41f 	.word	0x0800a41f
 8007ca8:	0800a423 	.word	0x0800a423
 8007cac:	0800a2c6 	.word	0x0800a2c6
 8007cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	bfa8      	it	ge
 8007cb8:	461a      	movge	r2, r3
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	4691      	mov	r9, r2
 8007cbe:	dc38      	bgt.n	8007d32 <_printf_float+0x382>
 8007cc0:	f104 031a 	add.w	r3, r4, #26
 8007cc4:	f04f 0b00 	mov.w	fp, #0
 8007cc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ccc:	9306      	str	r3, [sp, #24]
 8007cce:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007cd2:	ebaa 0309 	sub.w	r3, sl, r9
 8007cd6:	459b      	cmp	fp, r3
 8007cd8:	db33      	blt.n	8007d42 <_printf_float+0x392>
 8007cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	db3a      	blt.n	8007d58 <_printf_float+0x3a8>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	07da      	lsls	r2, r3, #31
 8007ce6:	d437      	bmi.n	8007d58 <_printf_float+0x3a8>
 8007ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cec:	eba3 020a 	sub.w	r2, r3, sl
 8007cf0:	eba3 0901 	sub.w	r9, r3, r1
 8007cf4:	4591      	cmp	r9, r2
 8007cf6:	bfa8      	it	ge
 8007cf8:	4691      	movge	r9, r2
 8007cfa:	f1b9 0f00 	cmp.w	r9, #0
 8007cfe:	dc33      	bgt.n	8007d68 <_printf_float+0x3b8>
 8007d00:	f04f 0800 	mov.w	r8, #0
 8007d04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d08:	f104 0a1a 	add.w	sl, r4, #26
 8007d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d10:	1a9b      	subs	r3, r3, r2
 8007d12:	eba3 0309 	sub.w	r3, r3, r9
 8007d16:	4598      	cmp	r8, r3
 8007d18:	f6bf af74 	bge.w	8007c04 <_printf_float+0x254>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	4652      	mov	r2, sl
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	f43f aea3 	beq.w	8007a72 <_printf_float+0xc2>
 8007d2c:	f108 0801 	add.w	r8, r8, #1
 8007d30:	e7ec      	b.n	8007d0c <_printf_float+0x35c>
 8007d32:	4613      	mov	r3, r2
 8007d34:	4631      	mov	r1, r6
 8007d36:	4642      	mov	r2, r8
 8007d38:	4628      	mov	r0, r5
 8007d3a:	47b8      	blx	r7
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d1bf      	bne.n	8007cc0 <_printf_float+0x310>
 8007d40:	e697      	b.n	8007a72 <_printf_float+0xc2>
 8007d42:	2301      	movs	r3, #1
 8007d44:	9a06      	ldr	r2, [sp, #24]
 8007d46:	4631      	mov	r1, r6
 8007d48:	4628      	mov	r0, r5
 8007d4a:	47b8      	blx	r7
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	f43f ae90 	beq.w	8007a72 <_printf_float+0xc2>
 8007d52:	f10b 0b01 	add.w	fp, fp, #1
 8007d56:	e7ba      	b.n	8007cce <_printf_float+0x31e>
 8007d58:	9b05      	ldr	r3, [sp, #20]
 8007d5a:	9a04      	ldr	r2, [sp, #16]
 8007d5c:	4631      	mov	r1, r6
 8007d5e:	4628      	mov	r0, r5
 8007d60:	47b8      	blx	r7
 8007d62:	3001      	adds	r0, #1
 8007d64:	d1c0      	bne.n	8007ce8 <_printf_float+0x338>
 8007d66:	e684      	b.n	8007a72 <_printf_float+0xc2>
 8007d68:	464b      	mov	r3, r9
 8007d6a:	eb08 020a 	add.w	r2, r8, sl
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4628      	mov	r0, r5
 8007d72:	47b8      	blx	r7
 8007d74:	3001      	adds	r0, #1
 8007d76:	d1c3      	bne.n	8007d00 <_printf_float+0x350>
 8007d78:	e67b      	b.n	8007a72 <_printf_float+0xc2>
 8007d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d7c:	2a01      	cmp	r2, #1
 8007d7e:	dc01      	bgt.n	8007d84 <_printf_float+0x3d4>
 8007d80:	07db      	lsls	r3, r3, #31
 8007d82:	d537      	bpl.n	8007df4 <_printf_float+0x444>
 8007d84:	2301      	movs	r3, #1
 8007d86:	4642      	mov	r2, r8
 8007d88:	4631      	mov	r1, r6
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b8      	blx	r7
 8007d8e:	3001      	adds	r0, #1
 8007d90:	f43f ae6f 	beq.w	8007a72 <_printf_float+0xc2>
 8007d94:	9b05      	ldr	r3, [sp, #20]
 8007d96:	9a04      	ldr	r2, [sp, #16]
 8007d98:	4631      	mov	r1, r6
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	47b8      	blx	r7
 8007d9e:	3001      	adds	r0, #1
 8007da0:	f43f ae67 	beq.w	8007a72 <_printf_float+0xc2>
 8007da4:	2200      	movs	r2, #0
 8007da6:	2300      	movs	r3, #0
 8007da8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007dac:	f7f8 fe88 	bl	8000ac0 <__aeabi_dcmpeq>
 8007db0:	b158      	cbz	r0, 8007dca <_printf_float+0x41a>
 8007db2:	f04f 0800 	mov.w	r8, #0
 8007db6:	f104 0a1a 	add.w	sl, r4, #26
 8007dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	4598      	cmp	r8, r3
 8007dc0:	db0d      	blt.n	8007dde <_printf_float+0x42e>
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007dc8:	e6eb      	b.n	8007ba2 <_printf_float+0x1f2>
 8007dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dcc:	f108 0201 	add.w	r2, r8, #1
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	4631      	mov	r1, r6
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	47b8      	blx	r7
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d1f2      	bne.n	8007dc2 <_printf_float+0x412>
 8007ddc:	e649      	b.n	8007a72 <_printf_float+0xc2>
 8007dde:	2301      	movs	r3, #1
 8007de0:	4652      	mov	r2, sl
 8007de2:	4631      	mov	r1, r6
 8007de4:	4628      	mov	r0, r5
 8007de6:	47b8      	blx	r7
 8007de8:	3001      	adds	r0, #1
 8007dea:	f43f ae42 	beq.w	8007a72 <_printf_float+0xc2>
 8007dee:	f108 0801 	add.w	r8, r8, #1
 8007df2:	e7e2      	b.n	8007dba <_printf_float+0x40a>
 8007df4:	2301      	movs	r3, #1
 8007df6:	4642      	mov	r2, r8
 8007df8:	e7eb      	b.n	8007dd2 <_printf_float+0x422>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	464a      	mov	r2, r9
 8007dfe:	4631      	mov	r1, r6
 8007e00:	4628      	mov	r0, r5
 8007e02:	47b8      	blx	r7
 8007e04:	3001      	adds	r0, #1
 8007e06:	f43f ae34 	beq.w	8007a72 <_printf_float+0xc2>
 8007e0a:	f108 0801 	add.w	r8, r8, #1
 8007e0e:	e700      	b.n	8007c12 <_printf_float+0x262>
 8007e10:	4642      	mov	r2, r8
 8007e12:	464b      	mov	r3, r9
 8007e14:	4640      	mov	r0, r8
 8007e16:	4649      	mov	r1, r9
 8007e18:	f7f8 fe84 	bl	8000b24 <__aeabi_dcmpun>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	f43f ae2d 	beq.w	8007a7c <_printf_float+0xcc>
 8007e22:	4b01      	ldr	r3, [pc, #4]	; (8007e28 <_printf_float+0x478>)
 8007e24:	4a01      	ldr	r2, [pc, #4]	; (8007e2c <_printf_float+0x47c>)
 8007e26:	e60e      	b.n	8007a46 <_printf_float+0x96>
 8007e28:	0800a427 	.word	0x0800a427
 8007e2c:	0800a42b 	.word	0x0800a42b

08007e30 <_printf_common>:
 8007e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e34:	4691      	mov	r9, r2
 8007e36:	461f      	mov	r7, r3
 8007e38:	688a      	ldr	r2, [r1, #8]
 8007e3a:	690b      	ldr	r3, [r1, #16]
 8007e3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e40:	4293      	cmp	r3, r2
 8007e42:	bfb8      	it	lt
 8007e44:	4613      	movlt	r3, r2
 8007e46:	f8c9 3000 	str.w	r3, [r9]
 8007e4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	b112      	cbz	r2, 8007e5a <_printf_common+0x2a>
 8007e54:	3301      	adds	r3, #1
 8007e56:	f8c9 3000 	str.w	r3, [r9]
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	0699      	lsls	r1, r3, #26
 8007e5e:	bf42      	ittt	mi
 8007e60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007e64:	3302      	addmi	r3, #2
 8007e66:	f8c9 3000 	strmi.w	r3, [r9]
 8007e6a:	6825      	ldr	r5, [r4, #0]
 8007e6c:	f015 0506 	ands.w	r5, r5, #6
 8007e70:	d107      	bne.n	8007e82 <_printf_common+0x52>
 8007e72:	f104 0a19 	add.w	sl, r4, #25
 8007e76:	68e3      	ldr	r3, [r4, #12]
 8007e78:	f8d9 2000 	ldr.w	r2, [r9]
 8007e7c:	1a9b      	subs	r3, r3, r2
 8007e7e:	429d      	cmp	r5, r3
 8007e80:	db29      	blt.n	8007ed6 <_printf_common+0xa6>
 8007e82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007e86:	6822      	ldr	r2, [r4, #0]
 8007e88:	3300      	adds	r3, #0
 8007e8a:	bf18      	it	ne
 8007e8c:	2301      	movne	r3, #1
 8007e8e:	0692      	lsls	r2, r2, #26
 8007e90:	d42e      	bmi.n	8007ef0 <_printf_common+0xc0>
 8007e92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e96:	4639      	mov	r1, r7
 8007e98:	4630      	mov	r0, r6
 8007e9a:	47c0      	blx	r8
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d021      	beq.n	8007ee4 <_printf_common+0xb4>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	68e5      	ldr	r5, [r4, #12]
 8007ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ea8:	f003 0306 	and.w	r3, r3, #6
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	bf08      	it	eq
 8007eb0:	1aad      	subeq	r5, r5, r2
 8007eb2:	68a3      	ldr	r3, [r4, #8]
 8007eb4:	6922      	ldr	r2, [r4, #16]
 8007eb6:	bf0c      	ite	eq
 8007eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ebc:	2500      	movne	r5, #0
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	bfc4      	itt	gt
 8007ec2:	1a9b      	subgt	r3, r3, r2
 8007ec4:	18ed      	addgt	r5, r5, r3
 8007ec6:	f04f 0900 	mov.w	r9, #0
 8007eca:	341a      	adds	r4, #26
 8007ecc:	454d      	cmp	r5, r9
 8007ece:	d11b      	bne.n	8007f08 <_printf_common+0xd8>
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4652      	mov	r2, sl
 8007eda:	4639      	mov	r1, r7
 8007edc:	4630      	mov	r0, r6
 8007ede:	47c0      	blx	r8
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d103      	bne.n	8007eec <_printf_common+0xbc>
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eec:	3501      	adds	r5, #1
 8007eee:	e7c2      	b.n	8007e76 <_printf_common+0x46>
 8007ef0:	18e1      	adds	r1, r4, r3
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	2030      	movs	r0, #48	; 0x30
 8007ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007efa:	4422      	add	r2, r4
 8007efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f04:	3302      	adds	r3, #2
 8007f06:	e7c4      	b.n	8007e92 <_printf_common+0x62>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	4639      	mov	r1, r7
 8007f0e:	4630      	mov	r0, r6
 8007f10:	47c0      	blx	r8
 8007f12:	3001      	adds	r0, #1
 8007f14:	d0e6      	beq.n	8007ee4 <_printf_common+0xb4>
 8007f16:	f109 0901 	add.w	r9, r9, #1
 8007f1a:	e7d7      	b.n	8007ecc <_printf_common+0x9c>

08007f1c <_printf_i>:
 8007f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f20:	4617      	mov	r7, r2
 8007f22:	7e0a      	ldrb	r2, [r1, #24]
 8007f24:	b085      	sub	sp, #20
 8007f26:	2a6e      	cmp	r2, #110	; 0x6e
 8007f28:	4698      	mov	r8, r3
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f30:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007f34:	f000 80bc 	beq.w	80080b0 <_printf_i+0x194>
 8007f38:	d81a      	bhi.n	8007f70 <_printf_i+0x54>
 8007f3a:	2a63      	cmp	r2, #99	; 0x63
 8007f3c:	d02e      	beq.n	8007f9c <_printf_i+0x80>
 8007f3e:	d80a      	bhi.n	8007f56 <_printf_i+0x3a>
 8007f40:	2a00      	cmp	r2, #0
 8007f42:	f000 80c8 	beq.w	80080d6 <_printf_i+0x1ba>
 8007f46:	2a58      	cmp	r2, #88	; 0x58
 8007f48:	f000 808a 	beq.w	8008060 <_printf_i+0x144>
 8007f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f50:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8007f54:	e02a      	b.n	8007fac <_printf_i+0x90>
 8007f56:	2a64      	cmp	r2, #100	; 0x64
 8007f58:	d001      	beq.n	8007f5e <_printf_i+0x42>
 8007f5a:	2a69      	cmp	r2, #105	; 0x69
 8007f5c:	d1f6      	bne.n	8007f4c <_printf_i+0x30>
 8007f5e:	6821      	ldr	r1, [r4, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007f66:	d023      	beq.n	8007fb0 <_printf_i+0x94>
 8007f68:	1d11      	adds	r1, r2, #4
 8007f6a:	6019      	str	r1, [r3, #0]
 8007f6c:	6813      	ldr	r3, [r2, #0]
 8007f6e:	e027      	b.n	8007fc0 <_printf_i+0xa4>
 8007f70:	2a73      	cmp	r2, #115	; 0x73
 8007f72:	f000 80b4 	beq.w	80080de <_printf_i+0x1c2>
 8007f76:	d808      	bhi.n	8007f8a <_printf_i+0x6e>
 8007f78:	2a6f      	cmp	r2, #111	; 0x6f
 8007f7a:	d02a      	beq.n	8007fd2 <_printf_i+0xb6>
 8007f7c:	2a70      	cmp	r2, #112	; 0x70
 8007f7e:	d1e5      	bne.n	8007f4c <_printf_i+0x30>
 8007f80:	680a      	ldr	r2, [r1, #0]
 8007f82:	f042 0220 	orr.w	r2, r2, #32
 8007f86:	600a      	str	r2, [r1, #0]
 8007f88:	e003      	b.n	8007f92 <_printf_i+0x76>
 8007f8a:	2a75      	cmp	r2, #117	; 0x75
 8007f8c:	d021      	beq.n	8007fd2 <_printf_i+0xb6>
 8007f8e:	2a78      	cmp	r2, #120	; 0x78
 8007f90:	d1dc      	bne.n	8007f4c <_printf_i+0x30>
 8007f92:	2278      	movs	r2, #120	; 0x78
 8007f94:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007f98:	496e      	ldr	r1, [pc, #440]	; (8008154 <_printf_i+0x238>)
 8007f9a:	e064      	b.n	8008066 <_printf_i+0x14a>
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8007fa2:	1d11      	adds	r1, r2, #4
 8007fa4:	6019      	str	r1, [r3, #0]
 8007fa6:	6813      	ldr	r3, [r2, #0]
 8007fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fac:	2301      	movs	r3, #1
 8007fae:	e0a3      	b.n	80080f8 <_printf_i+0x1dc>
 8007fb0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007fb4:	f102 0104 	add.w	r1, r2, #4
 8007fb8:	6019      	str	r1, [r3, #0]
 8007fba:	d0d7      	beq.n	8007f6c <_printf_i+0x50>
 8007fbc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	da03      	bge.n	8007fcc <_printf_i+0xb0>
 8007fc4:	222d      	movs	r2, #45	; 0x2d
 8007fc6:	425b      	negs	r3, r3
 8007fc8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007fcc:	4962      	ldr	r1, [pc, #392]	; (8008158 <_printf_i+0x23c>)
 8007fce:	220a      	movs	r2, #10
 8007fd0:	e017      	b.n	8008002 <_printf_i+0xe6>
 8007fd2:	6820      	ldr	r0, [r4, #0]
 8007fd4:	6819      	ldr	r1, [r3, #0]
 8007fd6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007fda:	d003      	beq.n	8007fe4 <_printf_i+0xc8>
 8007fdc:	1d08      	adds	r0, r1, #4
 8007fde:	6018      	str	r0, [r3, #0]
 8007fe0:	680b      	ldr	r3, [r1, #0]
 8007fe2:	e006      	b.n	8007ff2 <_printf_i+0xd6>
 8007fe4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fe8:	f101 0004 	add.w	r0, r1, #4
 8007fec:	6018      	str	r0, [r3, #0]
 8007fee:	d0f7      	beq.n	8007fe0 <_printf_i+0xc4>
 8007ff0:	880b      	ldrh	r3, [r1, #0]
 8007ff2:	4959      	ldr	r1, [pc, #356]	; (8008158 <_printf_i+0x23c>)
 8007ff4:	2a6f      	cmp	r2, #111	; 0x6f
 8007ff6:	bf14      	ite	ne
 8007ff8:	220a      	movne	r2, #10
 8007ffa:	2208      	moveq	r2, #8
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8008002:	6865      	ldr	r5, [r4, #4]
 8008004:	60a5      	str	r5, [r4, #8]
 8008006:	2d00      	cmp	r5, #0
 8008008:	f2c0 809c 	blt.w	8008144 <_printf_i+0x228>
 800800c:	6820      	ldr	r0, [r4, #0]
 800800e:	f020 0004 	bic.w	r0, r0, #4
 8008012:	6020      	str	r0, [r4, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d13f      	bne.n	8008098 <_printf_i+0x17c>
 8008018:	2d00      	cmp	r5, #0
 800801a:	f040 8095 	bne.w	8008148 <_printf_i+0x22c>
 800801e:	4675      	mov	r5, lr
 8008020:	2a08      	cmp	r2, #8
 8008022:	d10b      	bne.n	800803c <_printf_i+0x120>
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	07da      	lsls	r2, r3, #31
 8008028:	d508      	bpl.n	800803c <_printf_i+0x120>
 800802a:	6923      	ldr	r3, [r4, #16]
 800802c:	6862      	ldr	r2, [r4, #4]
 800802e:	429a      	cmp	r2, r3
 8008030:	bfde      	ittt	le
 8008032:	2330      	movle	r3, #48	; 0x30
 8008034:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008038:	f105 35ff 	addle.w	r5, r5, #4294967295
 800803c:	ebae 0305 	sub.w	r3, lr, r5
 8008040:	6123      	str	r3, [r4, #16]
 8008042:	f8cd 8000 	str.w	r8, [sp]
 8008046:	463b      	mov	r3, r7
 8008048:	aa03      	add	r2, sp, #12
 800804a:	4621      	mov	r1, r4
 800804c:	4630      	mov	r0, r6
 800804e:	f7ff feef 	bl	8007e30 <_printf_common>
 8008052:	3001      	adds	r0, #1
 8008054:	d155      	bne.n	8008102 <_printf_i+0x1e6>
 8008056:	f04f 30ff 	mov.w	r0, #4294967295
 800805a:	b005      	add	sp, #20
 800805c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008060:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008064:	493c      	ldr	r1, [pc, #240]	; (8008158 <_printf_i+0x23c>)
 8008066:	6822      	ldr	r2, [r4, #0]
 8008068:	6818      	ldr	r0, [r3, #0]
 800806a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800806e:	f100 0504 	add.w	r5, r0, #4
 8008072:	601d      	str	r5, [r3, #0]
 8008074:	d001      	beq.n	800807a <_printf_i+0x15e>
 8008076:	6803      	ldr	r3, [r0, #0]
 8008078:	e002      	b.n	8008080 <_printf_i+0x164>
 800807a:	0655      	lsls	r5, r2, #25
 800807c:	d5fb      	bpl.n	8008076 <_printf_i+0x15a>
 800807e:	8803      	ldrh	r3, [r0, #0]
 8008080:	07d0      	lsls	r0, r2, #31
 8008082:	bf44      	itt	mi
 8008084:	f042 0220 	orrmi.w	r2, r2, #32
 8008088:	6022      	strmi	r2, [r4, #0]
 800808a:	b91b      	cbnz	r3, 8008094 <_printf_i+0x178>
 800808c:	6822      	ldr	r2, [r4, #0]
 800808e:	f022 0220 	bic.w	r2, r2, #32
 8008092:	6022      	str	r2, [r4, #0]
 8008094:	2210      	movs	r2, #16
 8008096:	e7b1      	b.n	8007ffc <_printf_i+0xe0>
 8008098:	4675      	mov	r5, lr
 800809a:	fbb3 f0f2 	udiv	r0, r3, r2
 800809e:	fb02 3310 	mls	r3, r2, r0, r3
 80080a2:	5ccb      	ldrb	r3, [r1, r3]
 80080a4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80080a8:	4603      	mov	r3, r0
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d1f5      	bne.n	800809a <_printf_i+0x17e>
 80080ae:	e7b7      	b.n	8008020 <_printf_i+0x104>
 80080b0:	6808      	ldr	r0, [r1, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	6949      	ldr	r1, [r1, #20]
 80080b6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80080ba:	d004      	beq.n	80080c6 <_printf_i+0x1aa>
 80080bc:	1d10      	adds	r0, r2, #4
 80080be:	6018      	str	r0, [r3, #0]
 80080c0:	6813      	ldr	r3, [r2, #0]
 80080c2:	6019      	str	r1, [r3, #0]
 80080c4:	e007      	b.n	80080d6 <_printf_i+0x1ba>
 80080c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080ca:	f102 0004 	add.w	r0, r2, #4
 80080ce:	6018      	str	r0, [r3, #0]
 80080d0:	6813      	ldr	r3, [r2, #0]
 80080d2:	d0f6      	beq.n	80080c2 <_printf_i+0x1a6>
 80080d4:	8019      	strh	r1, [r3, #0]
 80080d6:	2300      	movs	r3, #0
 80080d8:	6123      	str	r3, [r4, #16]
 80080da:	4675      	mov	r5, lr
 80080dc:	e7b1      	b.n	8008042 <_printf_i+0x126>
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	1d11      	adds	r1, r2, #4
 80080e2:	6019      	str	r1, [r3, #0]
 80080e4:	6815      	ldr	r5, [r2, #0]
 80080e6:	6862      	ldr	r2, [r4, #4]
 80080e8:	2100      	movs	r1, #0
 80080ea:	4628      	mov	r0, r5
 80080ec:	f7f8 f878 	bl	80001e0 <memchr>
 80080f0:	b108      	cbz	r0, 80080f6 <_printf_i+0x1da>
 80080f2:	1b40      	subs	r0, r0, r5
 80080f4:	6060      	str	r0, [r4, #4]
 80080f6:	6863      	ldr	r3, [r4, #4]
 80080f8:	6123      	str	r3, [r4, #16]
 80080fa:	2300      	movs	r3, #0
 80080fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008100:	e79f      	b.n	8008042 <_printf_i+0x126>
 8008102:	6923      	ldr	r3, [r4, #16]
 8008104:	462a      	mov	r2, r5
 8008106:	4639      	mov	r1, r7
 8008108:	4630      	mov	r0, r6
 800810a:	47c0      	blx	r8
 800810c:	3001      	adds	r0, #1
 800810e:	d0a2      	beq.n	8008056 <_printf_i+0x13a>
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	079b      	lsls	r3, r3, #30
 8008114:	d507      	bpl.n	8008126 <_printf_i+0x20a>
 8008116:	2500      	movs	r5, #0
 8008118:	f104 0919 	add.w	r9, r4, #25
 800811c:	68e3      	ldr	r3, [r4, #12]
 800811e:	9a03      	ldr	r2, [sp, #12]
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	429d      	cmp	r5, r3
 8008124:	db05      	blt.n	8008132 <_printf_i+0x216>
 8008126:	68e0      	ldr	r0, [r4, #12]
 8008128:	9b03      	ldr	r3, [sp, #12]
 800812a:	4298      	cmp	r0, r3
 800812c:	bfb8      	it	lt
 800812e:	4618      	movlt	r0, r3
 8008130:	e793      	b.n	800805a <_printf_i+0x13e>
 8008132:	2301      	movs	r3, #1
 8008134:	464a      	mov	r2, r9
 8008136:	4639      	mov	r1, r7
 8008138:	4630      	mov	r0, r6
 800813a:	47c0      	blx	r8
 800813c:	3001      	adds	r0, #1
 800813e:	d08a      	beq.n	8008056 <_printf_i+0x13a>
 8008140:	3501      	adds	r5, #1
 8008142:	e7eb      	b.n	800811c <_printf_i+0x200>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1a7      	bne.n	8008098 <_printf_i+0x17c>
 8008148:	780b      	ldrb	r3, [r1, #0]
 800814a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800814e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008152:	e765      	b.n	8008020 <_printf_i+0x104>
 8008154:	0800a440 	.word	0x0800a440
 8008158:	0800a42f 	.word	0x0800a42f

0800815c <_puts_r>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	460e      	mov	r6, r1
 8008160:	4605      	mov	r5, r0
 8008162:	b118      	cbz	r0, 800816c <_puts_r+0x10>
 8008164:	6983      	ldr	r3, [r0, #24]
 8008166:	b90b      	cbnz	r3, 800816c <_puts_r+0x10>
 8008168:	f001 f896 	bl	8009298 <__sinit>
 800816c:	69ab      	ldr	r3, [r5, #24]
 800816e:	68ac      	ldr	r4, [r5, #8]
 8008170:	b913      	cbnz	r3, 8008178 <_puts_r+0x1c>
 8008172:	4628      	mov	r0, r5
 8008174:	f001 f890 	bl	8009298 <__sinit>
 8008178:	4b23      	ldr	r3, [pc, #140]	; (8008208 <_puts_r+0xac>)
 800817a:	429c      	cmp	r4, r3
 800817c:	d117      	bne.n	80081ae <_puts_r+0x52>
 800817e:	686c      	ldr	r4, [r5, #4]
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	071b      	lsls	r3, r3, #28
 8008184:	d51d      	bpl.n	80081c2 <_puts_r+0x66>
 8008186:	6923      	ldr	r3, [r4, #16]
 8008188:	b1db      	cbz	r3, 80081c2 <_puts_r+0x66>
 800818a:	3e01      	subs	r6, #1
 800818c:	68a3      	ldr	r3, [r4, #8]
 800818e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008192:	3b01      	subs	r3, #1
 8008194:	60a3      	str	r3, [r4, #8]
 8008196:	b9e9      	cbnz	r1, 80081d4 <_puts_r+0x78>
 8008198:	2b00      	cmp	r3, #0
 800819a:	da2e      	bge.n	80081fa <_puts_r+0x9e>
 800819c:	4622      	mov	r2, r4
 800819e:	210a      	movs	r1, #10
 80081a0:	4628      	mov	r0, r5
 80081a2:	f000 f86b 	bl	800827c <__swbuf_r>
 80081a6:	3001      	adds	r0, #1
 80081a8:	d011      	beq.n	80081ce <_puts_r+0x72>
 80081aa:	200a      	movs	r0, #10
 80081ac:	bd70      	pop	{r4, r5, r6, pc}
 80081ae:	4b17      	ldr	r3, [pc, #92]	; (800820c <_puts_r+0xb0>)
 80081b0:	429c      	cmp	r4, r3
 80081b2:	d101      	bne.n	80081b8 <_puts_r+0x5c>
 80081b4:	68ac      	ldr	r4, [r5, #8]
 80081b6:	e7e3      	b.n	8008180 <_puts_r+0x24>
 80081b8:	4b15      	ldr	r3, [pc, #84]	; (8008210 <_puts_r+0xb4>)
 80081ba:	429c      	cmp	r4, r3
 80081bc:	bf08      	it	eq
 80081be:	68ec      	ldreq	r4, [r5, #12]
 80081c0:	e7de      	b.n	8008180 <_puts_r+0x24>
 80081c2:	4621      	mov	r1, r4
 80081c4:	4628      	mov	r0, r5
 80081c6:	f000 f8ab 	bl	8008320 <__swsetup_r>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d0dd      	beq.n	800818a <_puts_r+0x2e>
 80081ce:	f04f 30ff 	mov.w	r0, #4294967295
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	da04      	bge.n	80081e2 <_puts_r+0x86>
 80081d8:	69a2      	ldr	r2, [r4, #24]
 80081da:	4293      	cmp	r3, r2
 80081dc:	db06      	blt.n	80081ec <_puts_r+0x90>
 80081de:	290a      	cmp	r1, #10
 80081e0:	d004      	beq.n	80081ec <_puts_r+0x90>
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	6022      	str	r2, [r4, #0]
 80081e8:	7019      	strb	r1, [r3, #0]
 80081ea:	e7cf      	b.n	800818c <_puts_r+0x30>
 80081ec:	4622      	mov	r2, r4
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 f844 	bl	800827c <__swbuf_r>
 80081f4:	3001      	adds	r0, #1
 80081f6:	d1c9      	bne.n	800818c <_puts_r+0x30>
 80081f8:	e7e9      	b.n	80081ce <_puts_r+0x72>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	200a      	movs	r0, #10
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	6022      	str	r2, [r4, #0]
 8008202:	7018      	strb	r0, [r3, #0]
 8008204:	bd70      	pop	{r4, r5, r6, pc}
 8008206:	bf00      	nop
 8008208:	0800a480 	.word	0x0800a480
 800820c:	0800a4a0 	.word	0x0800a4a0
 8008210:	0800a460 	.word	0x0800a460

08008214 <puts>:
 8008214:	4b02      	ldr	r3, [pc, #8]	; (8008220 <puts+0xc>)
 8008216:	4601      	mov	r1, r0
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	f7ff bf9f 	b.w	800815c <_puts_r>
 800821e:	bf00      	nop
 8008220:	2000050c 	.word	0x2000050c

08008224 <siprintf>:
 8008224:	b40e      	push	{r1, r2, r3}
 8008226:	b500      	push	{lr}
 8008228:	b09c      	sub	sp, #112	; 0x70
 800822a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800822e:	ab1d      	add	r3, sp, #116	; 0x74
 8008230:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008234:	9002      	str	r0, [sp, #8]
 8008236:	9006      	str	r0, [sp, #24]
 8008238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800823c:	480a      	ldr	r0, [pc, #40]	; (8008268 <siprintf+0x44>)
 800823e:	9104      	str	r1, [sp, #16]
 8008240:	9107      	str	r1, [sp, #28]
 8008242:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008246:	f853 2b04 	ldr.w	r2, [r3], #4
 800824a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800824e:	6800      	ldr	r0, [r0, #0]
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	a902      	add	r1, sp, #8
 8008254:	f001 fd0a 	bl	8009c6c <_svfiprintf_r>
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	b01c      	add	sp, #112	; 0x70
 8008260:	f85d eb04 	ldr.w	lr, [sp], #4
 8008264:	b003      	add	sp, #12
 8008266:	4770      	bx	lr
 8008268:	2000050c 	.word	0x2000050c

0800826c <strcpy>:
 800826c:	4603      	mov	r3, r0
 800826e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008272:	f803 2b01 	strb.w	r2, [r3], #1
 8008276:	2a00      	cmp	r2, #0
 8008278:	d1f9      	bne.n	800826e <strcpy+0x2>
 800827a:	4770      	bx	lr

0800827c <__swbuf_r>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	460e      	mov	r6, r1
 8008280:	4614      	mov	r4, r2
 8008282:	4605      	mov	r5, r0
 8008284:	b118      	cbz	r0, 800828e <__swbuf_r+0x12>
 8008286:	6983      	ldr	r3, [r0, #24]
 8008288:	b90b      	cbnz	r3, 800828e <__swbuf_r+0x12>
 800828a:	f001 f805 	bl	8009298 <__sinit>
 800828e:	4b21      	ldr	r3, [pc, #132]	; (8008314 <__swbuf_r+0x98>)
 8008290:	429c      	cmp	r4, r3
 8008292:	d12a      	bne.n	80082ea <__swbuf_r+0x6e>
 8008294:	686c      	ldr	r4, [r5, #4]
 8008296:	69a3      	ldr	r3, [r4, #24]
 8008298:	60a3      	str	r3, [r4, #8]
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	071a      	lsls	r2, r3, #28
 800829e:	d52e      	bpl.n	80082fe <__swbuf_r+0x82>
 80082a0:	6923      	ldr	r3, [r4, #16]
 80082a2:	b363      	cbz	r3, 80082fe <__swbuf_r+0x82>
 80082a4:	6923      	ldr	r3, [r4, #16]
 80082a6:	6820      	ldr	r0, [r4, #0]
 80082a8:	1ac0      	subs	r0, r0, r3
 80082aa:	6963      	ldr	r3, [r4, #20]
 80082ac:	b2f6      	uxtb	r6, r6
 80082ae:	4298      	cmp	r0, r3
 80082b0:	4637      	mov	r7, r6
 80082b2:	db04      	blt.n	80082be <__swbuf_r+0x42>
 80082b4:	4621      	mov	r1, r4
 80082b6:	4628      	mov	r0, r5
 80082b8:	f000 ff84 	bl	80091c4 <_fflush_r>
 80082bc:	bb28      	cbnz	r0, 800830a <__swbuf_r+0x8e>
 80082be:	68a3      	ldr	r3, [r4, #8]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	60a3      	str	r3, [r4, #8]
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	6022      	str	r2, [r4, #0]
 80082ca:	701e      	strb	r6, [r3, #0]
 80082cc:	6963      	ldr	r3, [r4, #20]
 80082ce:	3001      	adds	r0, #1
 80082d0:	4298      	cmp	r0, r3
 80082d2:	d004      	beq.n	80082de <__swbuf_r+0x62>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	07db      	lsls	r3, r3, #31
 80082d8:	d519      	bpl.n	800830e <__swbuf_r+0x92>
 80082da:	2e0a      	cmp	r6, #10
 80082dc:	d117      	bne.n	800830e <__swbuf_r+0x92>
 80082de:	4621      	mov	r1, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	f000 ff6f 	bl	80091c4 <_fflush_r>
 80082e6:	b190      	cbz	r0, 800830e <__swbuf_r+0x92>
 80082e8:	e00f      	b.n	800830a <__swbuf_r+0x8e>
 80082ea:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <__swbuf_r+0x9c>)
 80082ec:	429c      	cmp	r4, r3
 80082ee:	d101      	bne.n	80082f4 <__swbuf_r+0x78>
 80082f0:	68ac      	ldr	r4, [r5, #8]
 80082f2:	e7d0      	b.n	8008296 <__swbuf_r+0x1a>
 80082f4:	4b09      	ldr	r3, [pc, #36]	; (800831c <__swbuf_r+0xa0>)
 80082f6:	429c      	cmp	r4, r3
 80082f8:	bf08      	it	eq
 80082fa:	68ec      	ldreq	r4, [r5, #12]
 80082fc:	e7cb      	b.n	8008296 <__swbuf_r+0x1a>
 80082fe:	4621      	mov	r1, r4
 8008300:	4628      	mov	r0, r5
 8008302:	f000 f80d 	bl	8008320 <__swsetup_r>
 8008306:	2800      	cmp	r0, #0
 8008308:	d0cc      	beq.n	80082a4 <__swbuf_r+0x28>
 800830a:	f04f 37ff 	mov.w	r7, #4294967295
 800830e:	4638      	mov	r0, r7
 8008310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008312:	bf00      	nop
 8008314:	0800a480 	.word	0x0800a480
 8008318:	0800a4a0 	.word	0x0800a4a0
 800831c:	0800a460 	.word	0x0800a460

08008320 <__swsetup_r>:
 8008320:	4b32      	ldr	r3, [pc, #200]	; (80083ec <__swsetup_r+0xcc>)
 8008322:	b570      	push	{r4, r5, r6, lr}
 8008324:	681d      	ldr	r5, [r3, #0]
 8008326:	4606      	mov	r6, r0
 8008328:	460c      	mov	r4, r1
 800832a:	b125      	cbz	r5, 8008336 <__swsetup_r+0x16>
 800832c:	69ab      	ldr	r3, [r5, #24]
 800832e:	b913      	cbnz	r3, 8008336 <__swsetup_r+0x16>
 8008330:	4628      	mov	r0, r5
 8008332:	f000 ffb1 	bl	8009298 <__sinit>
 8008336:	4b2e      	ldr	r3, [pc, #184]	; (80083f0 <__swsetup_r+0xd0>)
 8008338:	429c      	cmp	r4, r3
 800833a:	d10f      	bne.n	800835c <__swsetup_r+0x3c>
 800833c:	686c      	ldr	r4, [r5, #4]
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	b29a      	uxth	r2, r3
 8008344:	0715      	lsls	r5, r2, #28
 8008346:	d42c      	bmi.n	80083a2 <__swsetup_r+0x82>
 8008348:	06d0      	lsls	r0, r2, #27
 800834a:	d411      	bmi.n	8008370 <__swsetup_r+0x50>
 800834c:	2209      	movs	r2, #9
 800834e:	6032      	str	r2, [r6, #0]
 8008350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008354:	81a3      	strh	r3, [r4, #12]
 8008356:	f04f 30ff 	mov.w	r0, #4294967295
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	4b25      	ldr	r3, [pc, #148]	; (80083f4 <__swsetup_r+0xd4>)
 800835e:	429c      	cmp	r4, r3
 8008360:	d101      	bne.n	8008366 <__swsetup_r+0x46>
 8008362:	68ac      	ldr	r4, [r5, #8]
 8008364:	e7eb      	b.n	800833e <__swsetup_r+0x1e>
 8008366:	4b24      	ldr	r3, [pc, #144]	; (80083f8 <__swsetup_r+0xd8>)
 8008368:	429c      	cmp	r4, r3
 800836a:	bf08      	it	eq
 800836c:	68ec      	ldreq	r4, [r5, #12]
 800836e:	e7e6      	b.n	800833e <__swsetup_r+0x1e>
 8008370:	0751      	lsls	r1, r2, #29
 8008372:	d512      	bpl.n	800839a <__swsetup_r+0x7a>
 8008374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008376:	b141      	cbz	r1, 800838a <__swsetup_r+0x6a>
 8008378:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800837c:	4299      	cmp	r1, r3
 800837e:	d002      	beq.n	8008386 <__swsetup_r+0x66>
 8008380:	4630      	mov	r0, r6
 8008382:	f001 fb6b 	bl	8009a5c <_free_r>
 8008386:	2300      	movs	r3, #0
 8008388:	6363      	str	r3, [r4, #52]	; 0x34
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	2300      	movs	r3, #0
 8008394:	6063      	str	r3, [r4, #4]
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f043 0308 	orr.w	r3, r3, #8
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	b94b      	cbnz	r3, 80083ba <__swsetup_r+0x9a>
 80083a6:	89a3      	ldrh	r3, [r4, #12]
 80083a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b0:	d003      	beq.n	80083ba <__swsetup_r+0x9a>
 80083b2:	4621      	mov	r1, r4
 80083b4:	4630      	mov	r0, r6
 80083b6:	f001 f82b 	bl	8009410 <__smakebuf_r>
 80083ba:	89a2      	ldrh	r2, [r4, #12]
 80083bc:	f012 0301 	ands.w	r3, r2, #1
 80083c0:	d00c      	beq.n	80083dc <__swsetup_r+0xbc>
 80083c2:	2300      	movs	r3, #0
 80083c4:	60a3      	str	r3, [r4, #8]
 80083c6:	6963      	ldr	r3, [r4, #20]
 80083c8:	425b      	negs	r3, r3
 80083ca:	61a3      	str	r3, [r4, #24]
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	b953      	cbnz	r3, 80083e6 <__swsetup_r+0xc6>
 80083d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80083d8:	d1ba      	bne.n	8008350 <__swsetup_r+0x30>
 80083da:	bd70      	pop	{r4, r5, r6, pc}
 80083dc:	0792      	lsls	r2, r2, #30
 80083de:	bf58      	it	pl
 80083e0:	6963      	ldrpl	r3, [r4, #20]
 80083e2:	60a3      	str	r3, [r4, #8]
 80083e4:	e7f2      	b.n	80083cc <__swsetup_r+0xac>
 80083e6:	2000      	movs	r0, #0
 80083e8:	e7f7      	b.n	80083da <__swsetup_r+0xba>
 80083ea:	bf00      	nop
 80083ec:	2000050c 	.word	0x2000050c
 80083f0:	0800a480 	.word	0x0800a480
 80083f4:	0800a4a0 	.word	0x0800a4a0
 80083f8:	0800a460 	.word	0x0800a460

080083fc <quorem>:
 80083fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	6903      	ldr	r3, [r0, #16]
 8008402:	690c      	ldr	r4, [r1, #16]
 8008404:	429c      	cmp	r4, r3
 8008406:	4680      	mov	r8, r0
 8008408:	f300 8082 	bgt.w	8008510 <quorem+0x114>
 800840c:	3c01      	subs	r4, #1
 800840e:	f101 0714 	add.w	r7, r1, #20
 8008412:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8008416:	f100 0614 	add.w	r6, r0, #20
 800841a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800841e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008422:	eb06 030e 	add.w	r3, r6, lr
 8008426:	3501      	adds	r5, #1
 8008428:	eb07 090e 	add.w	r9, r7, lr
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	fbb0 f5f5 	udiv	r5, r0, r5
 8008432:	b395      	cbz	r5, 800849a <quorem+0x9e>
 8008434:	f04f 0a00 	mov.w	sl, #0
 8008438:	4638      	mov	r0, r7
 800843a:	46b4      	mov	ip, r6
 800843c:	46d3      	mov	fp, sl
 800843e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008442:	b293      	uxth	r3, r2
 8008444:	fb05 a303 	mla	r3, r5, r3, sl
 8008448:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800844c:	b29b      	uxth	r3, r3
 800844e:	ebab 0303 	sub.w	r3, fp, r3
 8008452:	0c12      	lsrs	r2, r2, #16
 8008454:	f8bc b000 	ldrh.w	fp, [ip]
 8008458:	fb05 a202 	mla	r2, r5, r2, sl
 800845c:	fa13 f38b 	uxtah	r3, r3, fp
 8008460:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008464:	fa1f fb82 	uxth.w	fp, r2
 8008468:	f8dc 2000 	ldr.w	r2, [ip]
 800846c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008474:	b29b      	uxth	r3, r3
 8008476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800847a:	4581      	cmp	r9, r0
 800847c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008480:	f84c 3b04 	str.w	r3, [ip], #4
 8008484:	d2db      	bcs.n	800843e <quorem+0x42>
 8008486:	f856 300e 	ldr.w	r3, [r6, lr]
 800848a:	b933      	cbnz	r3, 800849a <quorem+0x9e>
 800848c:	9b01      	ldr	r3, [sp, #4]
 800848e:	3b04      	subs	r3, #4
 8008490:	429e      	cmp	r6, r3
 8008492:	461a      	mov	r2, r3
 8008494:	d330      	bcc.n	80084f8 <quorem+0xfc>
 8008496:	f8c8 4010 	str.w	r4, [r8, #16]
 800849a:	4640      	mov	r0, r8
 800849c:	f001 fa09 	bl	80098b2 <__mcmp>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	db25      	blt.n	80084f0 <quorem+0xf4>
 80084a4:	3501      	adds	r5, #1
 80084a6:	4630      	mov	r0, r6
 80084a8:	f04f 0e00 	mov.w	lr, #0
 80084ac:	f857 2b04 	ldr.w	r2, [r7], #4
 80084b0:	f8d0 c000 	ldr.w	ip, [r0]
 80084b4:	b293      	uxth	r3, r2
 80084b6:	ebae 0303 	sub.w	r3, lr, r3
 80084ba:	0c12      	lsrs	r2, r2, #16
 80084bc:	fa13 f38c 	uxtah	r3, r3, ip
 80084c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80084c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084ce:	45b9      	cmp	r9, r7
 80084d0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80084d4:	f840 3b04 	str.w	r3, [r0], #4
 80084d8:	d2e8      	bcs.n	80084ac <quorem+0xb0>
 80084da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80084de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80084e2:	b92a      	cbnz	r2, 80084f0 <quorem+0xf4>
 80084e4:	3b04      	subs	r3, #4
 80084e6:	429e      	cmp	r6, r3
 80084e8:	461a      	mov	r2, r3
 80084ea:	d30b      	bcc.n	8008504 <quorem+0x108>
 80084ec:	f8c8 4010 	str.w	r4, [r8, #16]
 80084f0:	4628      	mov	r0, r5
 80084f2:	b003      	add	sp, #12
 80084f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f8:	6812      	ldr	r2, [r2, #0]
 80084fa:	3b04      	subs	r3, #4
 80084fc:	2a00      	cmp	r2, #0
 80084fe:	d1ca      	bne.n	8008496 <quorem+0x9a>
 8008500:	3c01      	subs	r4, #1
 8008502:	e7c5      	b.n	8008490 <quorem+0x94>
 8008504:	6812      	ldr	r2, [r2, #0]
 8008506:	3b04      	subs	r3, #4
 8008508:	2a00      	cmp	r2, #0
 800850a:	d1ef      	bne.n	80084ec <quorem+0xf0>
 800850c:	3c01      	subs	r4, #1
 800850e:	e7ea      	b.n	80084e6 <quorem+0xea>
 8008510:	2000      	movs	r0, #0
 8008512:	e7ee      	b.n	80084f2 <quorem+0xf6>
 8008514:	0000      	movs	r0, r0
	...

08008518 <_dtoa_r>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	ec57 6b10 	vmov	r6, r7, d0
 8008520:	b097      	sub	sp, #92	; 0x5c
 8008522:	e9cd 6700 	strd	r6, r7, [sp]
 8008526:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008528:	9107      	str	r1, [sp, #28]
 800852a:	4604      	mov	r4, r0
 800852c:	920a      	str	r2, [sp, #40]	; 0x28
 800852e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008530:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008532:	b93e      	cbnz	r6, 8008544 <_dtoa_r+0x2c>
 8008534:	2010      	movs	r0, #16
 8008536:	f000 ffab 	bl	8009490 <malloc>
 800853a:	6260      	str	r0, [r4, #36]	; 0x24
 800853c:	6046      	str	r6, [r0, #4]
 800853e:	6086      	str	r6, [r0, #8]
 8008540:	6006      	str	r6, [r0, #0]
 8008542:	60c6      	str	r6, [r0, #12]
 8008544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008546:	6819      	ldr	r1, [r3, #0]
 8008548:	b151      	cbz	r1, 8008560 <_dtoa_r+0x48>
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	604a      	str	r2, [r1, #4]
 800854e:	2301      	movs	r3, #1
 8008550:	4093      	lsls	r3, r2
 8008552:	608b      	str	r3, [r1, #8]
 8008554:	4620      	mov	r0, r4
 8008556:	f000 ffd7 	bl	8009508 <_Bfree>
 800855a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	9b01      	ldr	r3, [sp, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	bfbf      	itttt	lt
 8008566:	2301      	movlt	r3, #1
 8008568:	602b      	strlt	r3, [r5, #0]
 800856a:	9b01      	ldrlt	r3, [sp, #4]
 800856c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008570:	bfb2      	itee	lt
 8008572:	9301      	strlt	r3, [sp, #4]
 8008574:	2300      	movge	r3, #0
 8008576:	602b      	strge	r3, [r5, #0]
 8008578:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800857c:	4ba8      	ldr	r3, [pc, #672]	; (8008820 <_dtoa_r+0x308>)
 800857e:	ea33 0308 	bics.w	r3, r3, r8
 8008582:	d11b      	bne.n	80085bc <_dtoa_r+0xa4>
 8008584:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008586:	f242 730f 	movw	r3, #9999	; 0x270f
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	9b00      	ldr	r3, [sp, #0]
 800858e:	b923      	cbnz	r3, 800859a <_dtoa_r+0x82>
 8008590:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008594:	2800      	cmp	r0, #0
 8008596:	f000 8578 	beq.w	800908a <_dtoa_r+0xb72>
 800859a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800859c:	b953      	cbnz	r3, 80085b4 <_dtoa_r+0x9c>
 800859e:	4ba1      	ldr	r3, [pc, #644]	; (8008824 <_dtoa_r+0x30c>)
 80085a0:	e021      	b.n	80085e6 <_dtoa_r+0xce>
 80085a2:	4ba1      	ldr	r3, [pc, #644]	; (8008828 <_dtoa_r+0x310>)
 80085a4:	9302      	str	r3, [sp, #8]
 80085a6:	3308      	adds	r3, #8
 80085a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085aa:	6013      	str	r3, [r2, #0]
 80085ac:	9802      	ldr	r0, [sp, #8]
 80085ae:	b017      	add	sp, #92	; 0x5c
 80085b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b4:	4b9b      	ldr	r3, [pc, #620]	; (8008824 <_dtoa_r+0x30c>)
 80085b6:	9302      	str	r3, [sp, #8]
 80085b8:	3303      	adds	r3, #3
 80085ba:	e7f5      	b.n	80085a8 <_dtoa_r+0x90>
 80085bc:	e9dd 6700 	ldrd	r6, r7, [sp]
 80085c0:	2200      	movs	r2, #0
 80085c2:	2300      	movs	r3, #0
 80085c4:	4630      	mov	r0, r6
 80085c6:	4639      	mov	r1, r7
 80085c8:	f7f8 fa7a 	bl	8000ac0 <__aeabi_dcmpeq>
 80085cc:	4681      	mov	r9, r0
 80085ce:	b160      	cbz	r0, 80085ea <_dtoa_r+0xd2>
 80085d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085d2:	2301      	movs	r3, #1
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8553 	beq.w	8009084 <_dtoa_r+0xb6c>
 80085de:	4b93      	ldr	r3, [pc, #588]	; (800882c <_dtoa_r+0x314>)
 80085e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085e2:	6013      	str	r3, [r2, #0]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	9302      	str	r3, [sp, #8]
 80085e8:	e7e0      	b.n	80085ac <_dtoa_r+0x94>
 80085ea:	aa14      	add	r2, sp, #80	; 0x50
 80085ec:	a915      	add	r1, sp, #84	; 0x54
 80085ee:	ec47 6b10 	vmov	d0, r6, r7
 80085f2:	4620      	mov	r0, r4
 80085f4:	f001 f9d5 	bl	80099a2 <__d2b>
 80085f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80085fc:	4682      	mov	sl, r0
 80085fe:	2d00      	cmp	r5, #0
 8008600:	d07e      	beq.n	8008700 <_dtoa_r+0x1e8>
 8008602:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008606:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800860a:	4630      	mov	r0, r6
 800860c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008610:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008614:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8008618:	2200      	movs	r2, #0
 800861a:	4b85      	ldr	r3, [pc, #532]	; (8008830 <_dtoa_r+0x318>)
 800861c:	f7f7 fe34 	bl	8000288 <__aeabi_dsub>
 8008620:	a379      	add	r3, pc, #484	; (adr r3, 8008808 <_dtoa_r+0x2f0>)
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	f7f7 ffe3 	bl	80005f0 <__aeabi_dmul>
 800862a:	a379      	add	r3, pc, #484	; (adr r3, 8008810 <_dtoa_r+0x2f8>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 fe2c 	bl	800028c <__adddf3>
 8008634:	4606      	mov	r6, r0
 8008636:	4628      	mov	r0, r5
 8008638:	460f      	mov	r7, r1
 800863a:	f7f7 ff73 	bl	8000524 <__aeabi_i2d>
 800863e:	a376      	add	r3, pc, #472	; (adr r3, 8008818 <_dtoa_r+0x300>)
 8008640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008644:	f7f7 ffd4 	bl	80005f0 <__aeabi_dmul>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4630      	mov	r0, r6
 800864e:	4639      	mov	r1, r7
 8008650:	f7f7 fe1c 	bl	800028c <__adddf3>
 8008654:	4606      	mov	r6, r0
 8008656:	460f      	mov	r7, r1
 8008658:	f7f8 fa7a 	bl	8000b50 <__aeabi_d2iz>
 800865c:	2200      	movs	r2, #0
 800865e:	4683      	mov	fp, r0
 8008660:	2300      	movs	r3, #0
 8008662:	4630      	mov	r0, r6
 8008664:	4639      	mov	r1, r7
 8008666:	f7f8 fa35 	bl	8000ad4 <__aeabi_dcmplt>
 800866a:	b158      	cbz	r0, 8008684 <_dtoa_r+0x16c>
 800866c:	4658      	mov	r0, fp
 800866e:	f7f7 ff59 	bl	8000524 <__aeabi_i2d>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4630      	mov	r0, r6
 8008678:	4639      	mov	r1, r7
 800867a:	f7f8 fa21 	bl	8000ac0 <__aeabi_dcmpeq>
 800867e:	b908      	cbnz	r0, 8008684 <_dtoa_r+0x16c>
 8008680:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008684:	f1bb 0f16 	cmp.w	fp, #22
 8008688:	d859      	bhi.n	800873e <_dtoa_r+0x226>
 800868a:	496a      	ldr	r1, [pc, #424]	; (8008834 <_dtoa_r+0x31c>)
 800868c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008694:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008698:	f7f8 fa3a 	bl	8000b10 <__aeabi_dcmpgt>
 800869c:	2800      	cmp	r0, #0
 800869e:	d050      	beq.n	8008742 <_dtoa_r+0x22a>
 80086a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086a4:	2300      	movs	r3, #0
 80086a6:	930e      	str	r3, [sp, #56]	; 0x38
 80086a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086aa:	1b5d      	subs	r5, r3, r5
 80086ac:	1e6b      	subs	r3, r5, #1
 80086ae:	9306      	str	r3, [sp, #24]
 80086b0:	bf45      	ittet	mi
 80086b2:	f1c5 0301 	rsbmi	r3, r5, #1
 80086b6:	9305      	strmi	r3, [sp, #20]
 80086b8:	2300      	movpl	r3, #0
 80086ba:	2300      	movmi	r3, #0
 80086bc:	bf4c      	ite	mi
 80086be:	9306      	strmi	r3, [sp, #24]
 80086c0:	9305      	strpl	r3, [sp, #20]
 80086c2:	f1bb 0f00 	cmp.w	fp, #0
 80086c6:	db3e      	blt.n	8008746 <_dtoa_r+0x22e>
 80086c8:	9b06      	ldr	r3, [sp, #24]
 80086ca:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80086ce:	445b      	add	r3, fp
 80086d0:	9306      	str	r3, [sp, #24]
 80086d2:	2300      	movs	r3, #0
 80086d4:	9308      	str	r3, [sp, #32]
 80086d6:	9b07      	ldr	r3, [sp, #28]
 80086d8:	2b09      	cmp	r3, #9
 80086da:	f200 80af 	bhi.w	800883c <_dtoa_r+0x324>
 80086de:	2b05      	cmp	r3, #5
 80086e0:	bfc4      	itt	gt
 80086e2:	3b04      	subgt	r3, #4
 80086e4:	9307      	strgt	r3, [sp, #28]
 80086e6:	9b07      	ldr	r3, [sp, #28]
 80086e8:	f1a3 0302 	sub.w	r3, r3, #2
 80086ec:	bfcc      	ite	gt
 80086ee:	2600      	movgt	r6, #0
 80086f0:	2601      	movle	r6, #1
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	f200 80ae 	bhi.w	8008854 <_dtoa_r+0x33c>
 80086f8:	e8df f003 	tbb	[pc, r3]
 80086fc:	772f8482 	.word	0x772f8482
 8008700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008702:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008704:	441d      	add	r5, r3
 8008706:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800870a:	2b20      	cmp	r3, #32
 800870c:	dd11      	ble.n	8008732 <_dtoa_r+0x21a>
 800870e:	9a00      	ldr	r2, [sp, #0]
 8008710:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008714:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008718:	fa22 f000 	lsr.w	r0, r2, r0
 800871c:	fa08 f303 	lsl.w	r3, r8, r3
 8008720:	4318      	orrs	r0, r3
 8008722:	f7f7 feef 	bl	8000504 <__aeabi_ui2d>
 8008726:	2301      	movs	r3, #1
 8008728:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800872c:	3d01      	subs	r5, #1
 800872e:	9312      	str	r3, [sp, #72]	; 0x48
 8008730:	e772      	b.n	8008618 <_dtoa_r+0x100>
 8008732:	f1c3 0020 	rsb	r0, r3, #32
 8008736:	9b00      	ldr	r3, [sp, #0]
 8008738:	fa03 f000 	lsl.w	r0, r3, r0
 800873c:	e7f1      	b.n	8008722 <_dtoa_r+0x20a>
 800873e:	2301      	movs	r3, #1
 8008740:	e7b1      	b.n	80086a6 <_dtoa_r+0x18e>
 8008742:	900e      	str	r0, [sp, #56]	; 0x38
 8008744:	e7b0      	b.n	80086a8 <_dtoa_r+0x190>
 8008746:	9b05      	ldr	r3, [sp, #20]
 8008748:	eba3 030b 	sub.w	r3, r3, fp
 800874c:	9305      	str	r3, [sp, #20]
 800874e:	f1cb 0300 	rsb	r3, fp, #0
 8008752:	9308      	str	r3, [sp, #32]
 8008754:	2300      	movs	r3, #0
 8008756:	930b      	str	r3, [sp, #44]	; 0x2c
 8008758:	e7bd      	b.n	80086d6 <_dtoa_r+0x1be>
 800875a:	2301      	movs	r3, #1
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
 800875e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008760:	2b00      	cmp	r3, #0
 8008762:	dd7a      	ble.n	800885a <_dtoa_r+0x342>
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	9303      	str	r3, [sp, #12]
 8008768:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800876a:	2200      	movs	r2, #0
 800876c:	606a      	str	r2, [r5, #4]
 800876e:	2104      	movs	r1, #4
 8008770:	f101 0214 	add.w	r2, r1, #20
 8008774:	429a      	cmp	r2, r3
 8008776:	d975      	bls.n	8008864 <_dtoa_r+0x34c>
 8008778:	6869      	ldr	r1, [r5, #4]
 800877a:	4620      	mov	r0, r4
 800877c:	f000 fe90 	bl	80094a0 <_Balloc>
 8008780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008782:	6028      	str	r0, [r5, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	9302      	str	r3, [sp, #8]
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	2b0e      	cmp	r3, #14
 800878c:	f200 80e5 	bhi.w	800895a <_dtoa_r+0x442>
 8008790:	2e00      	cmp	r6, #0
 8008792:	f000 80e2 	beq.w	800895a <_dtoa_r+0x442>
 8008796:	ed9d 7b00 	vldr	d7, [sp]
 800879a:	f1bb 0f00 	cmp.w	fp, #0
 800879e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80087a2:	dd74      	ble.n	800888e <_dtoa_r+0x376>
 80087a4:	4a23      	ldr	r2, [pc, #140]	; (8008834 <_dtoa_r+0x31c>)
 80087a6:	f00b 030f 	and.w	r3, fp, #15
 80087aa:	ea4f 162b 	mov.w	r6, fp, asr #4
 80087ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087b2:	06f0      	lsls	r0, r6, #27
 80087b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087b8:	d559      	bpl.n	800886e <_dtoa_r+0x356>
 80087ba:	4b1f      	ldr	r3, [pc, #124]	; (8008838 <_dtoa_r+0x320>)
 80087bc:	ec51 0b17 	vmov	r0, r1, d7
 80087c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087c4:	f7f8 f83e 	bl	8000844 <__aeabi_ddiv>
 80087c8:	e9cd 0100 	strd	r0, r1, [sp]
 80087cc:	f006 060f 	and.w	r6, r6, #15
 80087d0:	2503      	movs	r5, #3
 80087d2:	4f19      	ldr	r7, [pc, #100]	; (8008838 <_dtoa_r+0x320>)
 80087d4:	2e00      	cmp	r6, #0
 80087d6:	d14c      	bne.n	8008872 <_dtoa_r+0x35a>
 80087d8:	4642      	mov	r2, r8
 80087da:	464b      	mov	r3, r9
 80087dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087e0:	f7f8 f830 	bl	8000844 <__aeabi_ddiv>
 80087e4:	e9cd 0100 	strd	r0, r1, [sp]
 80087e8:	e06a      	b.n	80088c0 <_dtoa_r+0x3a8>
 80087ea:	2301      	movs	r3, #1
 80087ec:	9309      	str	r3, [sp, #36]	; 0x24
 80087ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f0:	445b      	add	r3, fp
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	3301      	adds	r3, #1
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	9303      	str	r3, [sp, #12]
 80087fa:	bfb8      	it	lt
 80087fc:	2301      	movlt	r3, #1
 80087fe:	e7b3      	b.n	8008768 <_dtoa_r+0x250>
 8008800:	2300      	movs	r3, #0
 8008802:	e7ab      	b.n	800875c <_dtoa_r+0x244>
 8008804:	2300      	movs	r3, #0
 8008806:	e7f1      	b.n	80087ec <_dtoa_r+0x2d4>
 8008808:	636f4361 	.word	0x636f4361
 800880c:	3fd287a7 	.word	0x3fd287a7
 8008810:	8b60c8b3 	.word	0x8b60c8b3
 8008814:	3fc68a28 	.word	0x3fc68a28
 8008818:	509f79fb 	.word	0x509f79fb
 800881c:	3fd34413 	.word	0x3fd34413
 8008820:	7ff00000 	.word	0x7ff00000
 8008824:	0800a45a 	.word	0x0800a45a
 8008828:	0800a451 	.word	0x0800a451
 800882c:	0800a2c7 	.word	0x0800a2c7
 8008830:	3ff80000 	.word	0x3ff80000
 8008834:	0800a4f0 	.word	0x0800a4f0
 8008838:	0800a4c8 	.word	0x0800a4c8
 800883c:	2601      	movs	r6, #1
 800883e:	2300      	movs	r3, #0
 8008840:	9307      	str	r3, [sp, #28]
 8008842:	9609      	str	r6, [sp, #36]	; 0x24
 8008844:	f04f 33ff 	mov.w	r3, #4294967295
 8008848:	9304      	str	r3, [sp, #16]
 800884a:	9303      	str	r3, [sp, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	2312      	movs	r3, #18
 8008850:	920a      	str	r2, [sp, #40]	; 0x28
 8008852:	e789      	b.n	8008768 <_dtoa_r+0x250>
 8008854:	2301      	movs	r3, #1
 8008856:	9309      	str	r3, [sp, #36]	; 0x24
 8008858:	e7f4      	b.n	8008844 <_dtoa_r+0x32c>
 800885a:	2301      	movs	r3, #1
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	9303      	str	r3, [sp, #12]
 8008860:	461a      	mov	r2, r3
 8008862:	e7f5      	b.n	8008850 <_dtoa_r+0x338>
 8008864:	686a      	ldr	r2, [r5, #4]
 8008866:	3201      	adds	r2, #1
 8008868:	606a      	str	r2, [r5, #4]
 800886a:	0049      	lsls	r1, r1, #1
 800886c:	e780      	b.n	8008770 <_dtoa_r+0x258>
 800886e:	2502      	movs	r5, #2
 8008870:	e7af      	b.n	80087d2 <_dtoa_r+0x2ba>
 8008872:	07f1      	lsls	r1, r6, #31
 8008874:	d508      	bpl.n	8008888 <_dtoa_r+0x370>
 8008876:	4640      	mov	r0, r8
 8008878:	4649      	mov	r1, r9
 800887a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800887e:	f7f7 feb7 	bl	80005f0 <__aeabi_dmul>
 8008882:	3501      	adds	r5, #1
 8008884:	4680      	mov	r8, r0
 8008886:	4689      	mov	r9, r1
 8008888:	1076      	asrs	r6, r6, #1
 800888a:	3708      	adds	r7, #8
 800888c:	e7a2      	b.n	80087d4 <_dtoa_r+0x2bc>
 800888e:	f000 809d 	beq.w	80089cc <_dtoa_r+0x4b4>
 8008892:	f1cb 0600 	rsb	r6, fp, #0
 8008896:	4b9f      	ldr	r3, [pc, #636]	; (8008b14 <_dtoa_r+0x5fc>)
 8008898:	4f9f      	ldr	r7, [pc, #636]	; (8008b18 <_dtoa_r+0x600>)
 800889a:	f006 020f 	and.w	r2, r6, #15
 800889e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088aa:	f7f7 fea1 	bl	80005f0 <__aeabi_dmul>
 80088ae:	e9cd 0100 	strd	r0, r1, [sp]
 80088b2:	1136      	asrs	r6, r6, #4
 80088b4:	2300      	movs	r3, #0
 80088b6:	2502      	movs	r5, #2
 80088b8:	2e00      	cmp	r6, #0
 80088ba:	d17c      	bne.n	80089b6 <_dtoa_r+0x49e>
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d191      	bne.n	80087e4 <_dtoa_r+0x2cc>
 80088c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f000 8084 	beq.w	80089d0 <_dtoa_r+0x4b8>
 80088c8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80088cc:	2200      	movs	r2, #0
 80088ce:	4b93      	ldr	r3, [pc, #588]	; (8008b1c <_dtoa_r+0x604>)
 80088d0:	4640      	mov	r0, r8
 80088d2:	4649      	mov	r1, r9
 80088d4:	f7f8 f8fe 	bl	8000ad4 <__aeabi_dcmplt>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d079      	beq.n	80089d0 <_dtoa_r+0x4b8>
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d076      	beq.n	80089d0 <_dtoa_r+0x4b8>
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	dd34      	ble.n	8008952 <_dtoa_r+0x43a>
 80088e8:	2200      	movs	r2, #0
 80088ea:	4b8d      	ldr	r3, [pc, #564]	; (8008b20 <_dtoa_r+0x608>)
 80088ec:	4640      	mov	r0, r8
 80088ee:	4649      	mov	r1, r9
 80088f0:	f7f7 fe7e 	bl	80005f0 <__aeabi_dmul>
 80088f4:	e9cd 0100 	strd	r0, r1, [sp]
 80088f8:	9e04      	ldr	r6, [sp, #16]
 80088fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 80088fe:	3501      	adds	r5, #1
 8008900:	4628      	mov	r0, r5
 8008902:	f7f7 fe0f 	bl	8000524 <__aeabi_i2d>
 8008906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800890a:	f7f7 fe71 	bl	80005f0 <__aeabi_dmul>
 800890e:	2200      	movs	r2, #0
 8008910:	4b84      	ldr	r3, [pc, #528]	; (8008b24 <_dtoa_r+0x60c>)
 8008912:	f7f7 fcbb 	bl	800028c <__adddf3>
 8008916:	4680      	mov	r8, r0
 8008918:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800891c:	2e00      	cmp	r6, #0
 800891e:	d15a      	bne.n	80089d6 <_dtoa_r+0x4be>
 8008920:	2200      	movs	r2, #0
 8008922:	4b81      	ldr	r3, [pc, #516]	; (8008b28 <_dtoa_r+0x610>)
 8008924:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008928:	f7f7 fcae 	bl	8000288 <__aeabi_dsub>
 800892c:	4642      	mov	r2, r8
 800892e:	464b      	mov	r3, r9
 8008930:	e9cd 0100 	strd	r0, r1, [sp]
 8008934:	f7f8 f8ec 	bl	8000b10 <__aeabi_dcmpgt>
 8008938:	2800      	cmp	r0, #0
 800893a:	f040 829b 	bne.w	8008e74 <_dtoa_r+0x95c>
 800893e:	4642      	mov	r2, r8
 8008940:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008944:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008948:	f7f8 f8c4 	bl	8000ad4 <__aeabi_dcmplt>
 800894c:	2800      	cmp	r0, #0
 800894e:	f040 828f 	bne.w	8008e70 <_dtoa_r+0x958>
 8008952:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008956:	e9cd 2300 	strd	r2, r3, [sp]
 800895a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800895c:	2b00      	cmp	r3, #0
 800895e:	f2c0 8150 	blt.w	8008c02 <_dtoa_r+0x6ea>
 8008962:	f1bb 0f0e 	cmp.w	fp, #14
 8008966:	f300 814c 	bgt.w	8008c02 <_dtoa_r+0x6ea>
 800896a:	4b6a      	ldr	r3, [pc, #424]	; (8008b14 <_dtoa_r+0x5fc>)
 800896c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008970:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008976:	2b00      	cmp	r3, #0
 8008978:	f280 80da 	bge.w	8008b30 <_dtoa_r+0x618>
 800897c:	9b03      	ldr	r3, [sp, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f300 80d6 	bgt.w	8008b30 <_dtoa_r+0x618>
 8008984:	f040 8273 	bne.w	8008e6e <_dtoa_r+0x956>
 8008988:	2200      	movs	r2, #0
 800898a:	4b67      	ldr	r3, [pc, #412]	; (8008b28 <_dtoa_r+0x610>)
 800898c:	4640      	mov	r0, r8
 800898e:	4649      	mov	r1, r9
 8008990:	f7f7 fe2e 	bl	80005f0 <__aeabi_dmul>
 8008994:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008998:	f7f8 f8b0 	bl	8000afc <__aeabi_dcmpge>
 800899c:	9e03      	ldr	r6, [sp, #12]
 800899e:	4637      	mov	r7, r6
 80089a0:	2800      	cmp	r0, #0
 80089a2:	f040 824a 	bne.w	8008e3a <_dtoa_r+0x922>
 80089a6:	9b02      	ldr	r3, [sp, #8]
 80089a8:	9a02      	ldr	r2, [sp, #8]
 80089aa:	1c5d      	adds	r5, r3, #1
 80089ac:	2331      	movs	r3, #49	; 0x31
 80089ae:	7013      	strb	r3, [r2, #0]
 80089b0:	f10b 0b01 	add.w	fp, fp, #1
 80089b4:	e245      	b.n	8008e42 <_dtoa_r+0x92a>
 80089b6:	07f2      	lsls	r2, r6, #31
 80089b8:	d505      	bpl.n	80089c6 <_dtoa_r+0x4ae>
 80089ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089be:	f7f7 fe17 	bl	80005f0 <__aeabi_dmul>
 80089c2:	3501      	adds	r5, #1
 80089c4:	2301      	movs	r3, #1
 80089c6:	1076      	asrs	r6, r6, #1
 80089c8:	3708      	adds	r7, #8
 80089ca:	e775      	b.n	80088b8 <_dtoa_r+0x3a0>
 80089cc:	2502      	movs	r5, #2
 80089ce:	e777      	b.n	80088c0 <_dtoa_r+0x3a8>
 80089d0:	465f      	mov	r7, fp
 80089d2:	9e03      	ldr	r6, [sp, #12]
 80089d4:	e794      	b.n	8008900 <_dtoa_r+0x3e8>
 80089d6:	9a02      	ldr	r2, [sp, #8]
 80089d8:	4b4e      	ldr	r3, [pc, #312]	; (8008b14 <_dtoa_r+0x5fc>)
 80089da:	4432      	add	r2, r6
 80089dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80089de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089e0:	1e71      	subs	r1, r6, #1
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	d048      	beq.n	8008a78 <_dtoa_r+0x560>
 80089e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	2000      	movs	r0, #0
 80089f0:	494e      	ldr	r1, [pc, #312]	; (8008b2c <_dtoa_r+0x614>)
 80089f2:	f7f7 ff27 	bl	8000844 <__aeabi_ddiv>
 80089f6:	4642      	mov	r2, r8
 80089f8:	464b      	mov	r3, r9
 80089fa:	f7f7 fc45 	bl	8000288 <__aeabi_dsub>
 80089fe:	9d02      	ldr	r5, [sp, #8]
 8008a00:	4680      	mov	r8, r0
 8008a02:	4689      	mov	r9, r1
 8008a04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a08:	f7f8 f8a2 	bl	8000b50 <__aeabi_d2iz>
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	f7f7 fd89 	bl	8000524 <__aeabi_i2d>
 8008a12:	4602      	mov	r2, r0
 8008a14:	460b      	mov	r3, r1
 8008a16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a1a:	f7f7 fc35 	bl	8000288 <__aeabi_dsub>
 8008a1e:	3630      	adds	r6, #48	; 0x30
 8008a20:	f805 6b01 	strb.w	r6, [r5], #1
 8008a24:	4642      	mov	r2, r8
 8008a26:	464b      	mov	r3, r9
 8008a28:	e9cd 0100 	strd	r0, r1, [sp]
 8008a2c:	f7f8 f852 	bl	8000ad4 <__aeabi_dcmplt>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d165      	bne.n	8008b00 <_dtoa_r+0x5e8>
 8008a34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a38:	2000      	movs	r0, #0
 8008a3a:	4938      	ldr	r1, [pc, #224]	; (8008b1c <_dtoa_r+0x604>)
 8008a3c:	f7f7 fc24 	bl	8000288 <__aeabi_dsub>
 8008a40:	4642      	mov	r2, r8
 8008a42:	464b      	mov	r3, r9
 8008a44:	f7f8 f846 	bl	8000ad4 <__aeabi_dcmplt>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	f040 80ba 	bne.w	8008bc2 <_dtoa_r+0x6aa>
 8008a4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a50:	429d      	cmp	r5, r3
 8008a52:	f43f af7e 	beq.w	8008952 <_dtoa_r+0x43a>
 8008a56:	2200      	movs	r2, #0
 8008a58:	4b31      	ldr	r3, [pc, #196]	; (8008b20 <_dtoa_r+0x608>)
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	f7f7 fdc7 	bl	80005f0 <__aeabi_dmul>
 8008a62:	2200      	movs	r2, #0
 8008a64:	4680      	mov	r8, r0
 8008a66:	4689      	mov	r9, r1
 8008a68:	4b2d      	ldr	r3, [pc, #180]	; (8008b20 <_dtoa_r+0x608>)
 8008a6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a6e:	f7f7 fdbf 	bl	80005f0 <__aeabi_dmul>
 8008a72:	e9cd 0100 	strd	r0, r1, [sp]
 8008a76:	e7c5      	b.n	8008a04 <_dtoa_r+0x4ec>
 8008a78:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8008a7c:	4642      	mov	r2, r8
 8008a7e:	464b      	mov	r3, r9
 8008a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a84:	f7f7 fdb4 	bl	80005f0 <__aeabi_dmul>
 8008a88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a8c:	9d02      	ldr	r5, [sp, #8]
 8008a8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a92:	f7f8 f85d 	bl	8000b50 <__aeabi_d2iz>
 8008a96:	4606      	mov	r6, r0
 8008a98:	f7f7 fd44 	bl	8000524 <__aeabi_i2d>
 8008a9c:	3630      	adds	r6, #48	; 0x30
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008aa6:	f7f7 fbef 	bl	8000288 <__aeabi_dsub>
 8008aaa:	f805 6b01 	strb.w	r6, [r5], #1
 8008aae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ab0:	42ab      	cmp	r3, r5
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	4689      	mov	r9, r1
 8008ab6:	f04f 0200 	mov.w	r2, #0
 8008aba:	d125      	bne.n	8008b08 <_dtoa_r+0x5f0>
 8008abc:	4b1b      	ldr	r3, [pc, #108]	; (8008b2c <_dtoa_r+0x614>)
 8008abe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ac2:	f7f7 fbe3 	bl	800028c <__adddf3>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4640      	mov	r0, r8
 8008acc:	4649      	mov	r1, r9
 8008ace:	f7f8 f81f 	bl	8000b10 <__aeabi_dcmpgt>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d175      	bne.n	8008bc2 <_dtoa_r+0x6aa>
 8008ad6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ada:	2000      	movs	r0, #0
 8008adc:	4913      	ldr	r1, [pc, #76]	; (8008b2c <_dtoa_r+0x614>)
 8008ade:	f7f7 fbd3 	bl	8000288 <__aeabi_dsub>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	4649      	mov	r1, r9
 8008aea:	f7f7 fff3 	bl	8000ad4 <__aeabi_dcmplt>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	f43f af2f 	beq.w	8008952 <_dtoa_r+0x43a>
 8008af4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008af8:	2b30      	cmp	r3, #48	; 0x30
 8008afa:	f105 32ff 	add.w	r2, r5, #4294967295
 8008afe:	d001      	beq.n	8008b04 <_dtoa_r+0x5ec>
 8008b00:	46bb      	mov	fp, r7
 8008b02:	e04d      	b.n	8008ba0 <_dtoa_r+0x688>
 8008b04:	4615      	mov	r5, r2
 8008b06:	e7f5      	b.n	8008af4 <_dtoa_r+0x5dc>
 8008b08:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <_dtoa_r+0x608>)
 8008b0a:	f7f7 fd71 	bl	80005f0 <__aeabi_dmul>
 8008b0e:	e9cd 0100 	strd	r0, r1, [sp]
 8008b12:	e7bc      	b.n	8008a8e <_dtoa_r+0x576>
 8008b14:	0800a4f0 	.word	0x0800a4f0
 8008b18:	0800a4c8 	.word	0x0800a4c8
 8008b1c:	3ff00000 	.word	0x3ff00000
 8008b20:	40240000 	.word	0x40240000
 8008b24:	401c0000 	.word	0x401c0000
 8008b28:	40140000 	.word	0x40140000
 8008b2c:	3fe00000 	.word	0x3fe00000
 8008b30:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b34:	9d02      	ldr	r5, [sp, #8]
 8008b36:	4642      	mov	r2, r8
 8008b38:	464b      	mov	r3, r9
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	f7f7 fe81 	bl	8000844 <__aeabi_ddiv>
 8008b42:	f7f8 f805 	bl	8000b50 <__aeabi_d2iz>
 8008b46:	9000      	str	r0, [sp, #0]
 8008b48:	f7f7 fcec 	bl	8000524 <__aeabi_i2d>
 8008b4c:	4642      	mov	r2, r8
 8008b4e:	464b      	mov	r3, r9
 8008b50:	f7f7 fd4e 	bl	80005f0 <__aeabi_dmul>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	f7f7 fb94 	bl	8000288 <__aeabi_dsub>
 8008b60:	9e00      	ldr	r6, [sp, #0]
 8008b62:	9f03      	ldr	r7, [sp, #12]
 8008b64:	3630      	adds	r6, #48	; 0x30
 8008b66:	f805 6b01 	strb.w	r6, [r5], #1
 8008b6a:	9e02      	ldr	r6, [sp, #8]
 8008b6c:	1bae      	subs	r6, r5, r6
 8008b6e:	42b7      	cmp	r7, r6
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	d138      	bne.n	8008be8 <_dtoa_r+0x6d0>
 8008b76:	f7f7 fb89 	bl	800028c <__adddf3>
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	460f      	mov	r7, r1
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4640      	mov	r0, r8
 8008b84:	4649      	mov	r1, r9
 8008b86:	f7f7 ffa5 	bl	8000ad4 <__aeabi_dcmplt>
 8008b8a:	b9c8      	cbnz	r0, 8008bc0 <_dtoa_r+0x6a8>
 8008b8c:	4632      	mov	r2, r6
 8008b8e:	463b      	mov	r3, r7
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7f7 ff94 	bl	8000ac0 <__aeabi_dcmpeq>
 8008b98:	b110      	cbz	r0, 8008ba0 <_dtoa_r+0x688>
 8008b9a:	9b00      	ldr	r3, [sp, #0]
 8008b9c:	07db      	lsls	r3, r3, #31
 8008b9e:	d40f      	bmi.n	8008bc0 <_dtoa_r+0x6a8>
 8008ba0:	4651      	mov	r1, sl
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 fcb0 	bl	8009508 <_Bfree>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bac:	702b      	strb	r3, [r5, #0]
 8008bae:	f10b 0301 	add.w	r3, fp, #1
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f43f acf8 	beq.w	80085ac <_dtoa_r+0x94>
 8008bbc:	601d      	str	r5, [r3, #0]
 8008bbe:	e4f5      	b.n	80085ac <_dtoa_r+0x94>
 8008bc0:	465f      	mov	r7, fp
 8008bc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bc6:	2a39      	cmp	r2, #57	; 0x39
 8008bc8:	f105 33ff 	add.w	r3, r5, #4294967295
 8008bcc:	d106      	bne.n	8008bdc <_dtoa_r+0x6c4>
 8008bce:	9a02      	ldr	r2, [sp, #8]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d107      	bne.n	8008be4 <_dtoa_r+0x6cc>
 8008bd4:	2330      	movs	r3, #48	; 0x30
 8008bd6:	7013      	strb	r3, [r2, #0]
 8008bd8:	3701      	adds	r7, #1
 8008bda:	4613      	mov	r3, r2
 8008bdc:	781a      	ldrb	r2, [r3, #0]
 8008bde:	3201      	adds	r2, #1
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	e78d      	b.n	8008b00 <_dtoa_r+0x5e8>
 8008be4:	461d      	mov	r5, r3
 8008be6:	e7ec      	b.n	8008bc2 <_dtoa_r+0x6aa>
 8008be8:	2200      	movs	r2, #0
 8008bea:	4ba4      	ldr	r3, [pc, #656]	; (8008e7c <_dtoa_r+0x964>)
 8008bec:	f7f7 fd00 	bl	80005f0 <__aeabi_dmul>
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	460f      	mov	r7, r1
 8008bf8:	f7f7 ff62 	bl	8000ac0 <__aeabi_dcmpeq>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d09a      	beq.n	8008b36 <_dtoa_r+0x61e>
 8008c00:	e7ce      	b.n	8008ba0 <_dtoa_r+0x688>
 8008c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	f000 80cd 	beq.w	8008da4 <_dtoa_r+0x88c>
 8008c0a:	9a07      	ldr	r2, [sp, #28]
 8008c0c:	2a01      	cmp	r2, #1
 8008c0e:	f300 80af 	bgt.w	8008d70 <_dtoa_r+0x858>
 8008c12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	f000 80a7 	beq.w	8008d68 <_dtoa_r+0x850>
 8008c1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c1e:	9e08      	ldr	r6, [sp, #32]
 8008c20:	9d05      	ldr	r5, [sp, #20]
 8008c22:	9a05      	ldr	r2, [sp, #20]
 8008c24:	441a      	add	r2, r3
 8008c26:	9205      	str	r2, [sp, #20]
 8008c28:	9a06      	ldr	r2, [sp, #24]
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	441a      	add	r2, r3
 8008c2e:	4620      	mov	r0, r4
 8008c30:	9206      	str	r2, [sp, #24]
 8008c32:	f000 fd09 	bl	8009648 <__i2b>
 8008c36:	4607      	mov	r7, r0
 8008c38:	2d00      	cmp	r5, #0
 8008c3a:	dd0c      	ble.n	8008c56 <_dtoa_r+0x73e>
 8008c3c:	9b06      	ldr	r3, [sp, #24]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dd09      	ble.n	8008c56 <_dtoa_r+0x73e>
 8008c42:	42ab      	cmp	r3, r5
 8008c44:	9a05      	ldr	r2, [sp, #20]
 8008c46:	bfa8      	it	ge
 8008c48:	462b      	movge	r3, r5
 8008c4a:	1ad2      	subs	r2, r2, r3
 8008c4c:	9205      	str	r2, [sp, #20]
 8008c4e:	9a06      	ldr	r2, [sp, #24]
 8008c50:	1aed      	subs	r5, r5, r3
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	9306      	str	r3, [sp, #24]
 8008c56:	9b08      	ldr	r3, [sp, #32]
 8008c58:	b1f3      	cbz	r3, 8008c98 <_dtoa_r+0x780>
 8008c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 80a5 	beq.w	8008dac <_dtoa_r+0x894>
 8008c62:	2e00      	cmp	r6, #0
 8008c64:	dd10      	ble.n	8008c88 <_dtoa_r+0x770>
 8008c66:	4639      	mov	r1, r7
 8008c68:	4632      	mov	r2, r6
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 fd82 	bl	8009774 <__pow5mult>
 8008c70:	4652      	mov	r2, sl
 8008c72:	4601      	mov	r1, r0
 8008c74:	4607      	mov	r7, r0
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 fcef 	bl	800965a <__multiply>
 8008c7c:	4651      	mov	r1, sl
 8008c7e:	4680      	mov	r8, r0
 8008c80:	4620      	mov	r0, r4
 8008c82:	f000 fc41 	bl	8009508 <_Bfree>
 8008c86:	46c2      	mov	sl, r8
 8008c88:	9b08      	ldr	r3, [sp, #32]
 8008c8a:	1b9a      	subs	r2, r3, r6
 8008c8c:	d004      	beq.n	8008c98 <_dtoa_r+0x780>
 8008c8e:	4651      	mov	r1, sl
 8008c90:	4620      	mov	r0, r4
 8008c92:	f000 fd6f 	bl	8009774 <__pow5mult>
 8008c96:	4682      	mov	sl, r0
 8008c98:	2101      	movs	r1, #1
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 fcd4 	bl	8009648 <__i2b>
 8008ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	f340 8083 	ble.w	8008db0 <_dtoa_r+0x898>
 8008caa:	461a      	mov	r2, r3
 8008cac:	4601      	mov	r1, r0
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f000 fd60 	bl	8009774 <__pow5mult>
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	4606      	mov	r6, r0
 8008cba:	dd7c      	ble.n	8008db6 <_dtoa_r+0x89e>
 8008cbc:	f04f 0800 	mov.w	r8, #0
 8008cc0:	6933      	ldr	r3, [r6, #16]
 8008cc2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008cc6:	6918      	ldr	r0, [r3, #16]
 8008cc8:	f000 fc70 	bl	80095ac <__hi0bits>
 8008ccc:	f1c0 0020 	rsb	r0, r0, #32
 8008cd0:	9b06      	ldr	r3, [sp, #24]
 8008cd2:	4418      	add	r0, r3
 8008cd4:	f010 001f 	ands.w	r0, r0, #31
 8008cd8:	f000 8096 	beq.w	8008e08 <_dtoa_r+0x8f0>
 8008cdc:	f1c0 0320 	rsb	r3, r0, #32
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	f340 8087 	ble.w	8008df4 <_dtoa_r+0x8dc>
 8008ce6:	9b05      	ldr	r3, [sp, #20]
 8008ce8:	f1c0 001c 	rsb	r0, r0, #28
 8008cec:	4403      	add	r3, r0
 8008cee:	9305      	str	r3, [sp, #20]
 8008cf0:	9b06      	ldr	r3, [sp, #24]
 8008cf2:	4405      	add	r5, r0
 8008cf4:	4403      	add	r3, r0
 8008cf6:	9306      	str	r3, [sp, #24]
 8008cf8:	9b05      	ldr	r3, [sp, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	dd05      	ble.n	8008d0a <_dtoa_r+0x7f2>
 8008cfe:	4651      	mov	r1, sl
 8008d00:	461a      	mov	r2, r3
 8008d02:	4620      	mov	r0, r4
 8008d04:	f000 fd84 	bl	8009810 <__lshift>
 8008d08:	4682      	mov	sl, r0
 8008d0a:	9b06      	ldr	r3, [sp, #24]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dd05      	ble.n	8008d1c <_dtoa_r+0x804>
 8008d10:	4631      	mov	r1, r6
 8008d12:	461a      	mov	r2, r3
 8008d14:	4620      	mov	r0, r4
 8008d16:	f000 fd7b 	bl	8009810 <__lshift>
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d074      	beq.n	8008e0c <_dtoa_r+0x8f4>
 8008d22:	4631      	mov	r1, r6
 8008d24:	4650      	mov	r0, sl
 8008d26:	f000 fdc4 	bl	80098b2 <__mcmp>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	da6e      	bge.n	8008e0c <_dtoa_r+0x8f4>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	4651      	mov	r1, sl
 8008d32:	220a      	movs	r2, #10
 8008d34:	4620      	mov	r0, r4
 8008d36:	f000 fbfe 	bl	8009536 <__multadd>
 8008d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d40:	4682      	mov	sl, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 81a8 	beq.w	8009098 <_dtoa_r+0xb80>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	220a      	movs	r2, #10
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 fbf1 	bl	8009536 <__multadd>
 8008d54:	9b04      	ldr	r3, [sp, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	4607      	mov	r7, r0
 8008d5a:	f300 80c8 	bgt.w	8008eee <_dtoa_r+0x9d6>
 8008d5e:	9b07      	ldr	r3, [sp, #28]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	f340 80c4 	ble.w	8008eee <_dtoa_r+0x9d6>
 8008d66:	e059      	b.n	8008e1c <_dtoa_r+0x904>
 8008d68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d6e:	e756      	b.n	8008c1e <_dtoa_r+0x706>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	1e5e      	subs	r6, r3, #1
 8008d74:	9b08      	ldr	r3, [sp, #32]
 8008d76:	42b3      	cmp	r3, r6
 8008d78:	bfbf      	itttt	lt
 8008d7a:	9b08      	ldrlt	r3, [sp, #32]
 8008d7c:	9608      	strlt	r6, [sp, #32]
 8008d7e:	1af2      	sublt	r2, r6, r3
 8008d80:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8008d82:	bfb6      	itet	lt
 8008d84:	189b      	addlt	r3, r3, r2
 8008d86:	1b9e      	subge	r6, r3, r6
 8008d88:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8008d8a:	9b03      	ldr	r3, [sp, #12]
 8008d8c:	bfb8      	it	lt
 8008d8e:	2600      	movlt	r6, #0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bfb9      	ittee	lt
 8008d94:	9b05      	ldrlt	r3, [sp, #20]
 8008d96:	9a03      	ldrlt	r2, [sp, #12]
 8008d98:	9d05      	ldrge	r5, [sp, #20]
 8008d9a:	9b03      	ldrge	r3, [sp, #12]
 8008d9c:	bfbc      	itt	lt
 8008d9e:	1a9d      	sublt	r5, r3, r2
 8008da0:	2300      	movlt	r3, #0
 8008da2:	e73e      	b.n	8008c22 <_dtoa_r+0x70a>
 8008da4:	9e08      	ldr	r6, [sp, #32]
 8008da6:	9d05      	ldr	r5, [sp, #20]
 8008da8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008daa:	e745      	b.n	8008c38 <_dtoa_r+0x720>
 8008dac:	9a08      	ldr	r2, [sp, #32]
 8008dae:	e76e      	b.n	8008c8e <_dtoa_r+0x776>
 8008db0:	9b07      	ldr	r3, [sp, #28]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	dc19      	bgt.n	8008dea <_dtoa_r+0x8d2>
 8008db6:	9b00      	ldr	r3, [sp, #0]
 8008db8:	b9bb      	cbnz	r3, 8008dea <_dtoa_r+0x8d2>
 8008dba:	9b01      	ldr	r3, [sp, #4]
 8008dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dc0:	b99b      	cbnz	r3, 8008dea <_dtoa_r+0x8d2>
 8008dc2:	9b01      	ldr	r3, [sp, #4]
 8008dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008dc8:	0d1b      	lsrs	r3, r3, #20
 8008dca:	051b      	lsls	r3, r3, #20
 8008dcc:	b183      	cbz	r3, 8008df0 <_dtoa_r+0x8d8>
 8008dce:	9b05      	ldr	r3, [sp, #20]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	9305      	str	r3, [sp, #20]
 8008dd4:	9b06      	ldr	r3, [sp, #24]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	9306      	str	r3, [sp, #24]
 8008dda:	f04f 0801 	mov.w	r8, #1
 8008dde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f47f af6d 	bne.w	8008cc0 <_dtoa_r+0x7a8>
 8008de6:	2001      	movs	r0, #1
 8008de8:	e772      	b.n	8008cd0 <_dtoa_r+0x7b8>
 8008dea:	f04f 0800 	mov.w	r8, #0
 8008dee:	e7f6      	b.n	8008dde <_dtoa_r+0x8c6>
 8008df0:	4698      	mov	r8, r3
 8008df2:	e7f4      	b.n	8008dde <_dtoa_r+0x8c6>
 8008df4:	d080      	beq.n	8008cf8 <_dtoa_r+0x7e0>
 8008df6:	9a05      	ldr	r2, [sp, #20]
 8008df8:	331c      	adds	r3, #28
 8008dfa:	441a      	add	r2, r3
 8008dfc:	9205      	str	r2, [sp, #20]
 8008dfe:	9a06      	ldr	r2, [sp, #24]
 8008e00:	441a      	add	r2, r3
 8008e02:	441d      	add	r5, r3
 8008e04:	4613      	mov	r3, r2
 8008e06:	e776      	b.n	8008cf6 <_dtoa_r+0x7de>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	e7f4      	b.n	8008df6 <_dtoa_r+0x8de>
 8008e0c:	9b03      	ldr	r3, [sp, #12]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	dc36      	bgt.n	8008e80 <_dtoa_r+0x968>
 8008e12:	9b07      	ldr	r3, [sp, #28]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	dd33      	ble.n	8008e80 <_dtoa_r+0x968>
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	9304      	str	r3, [sp, #16]
 8008e1c:	9b04      	ldr	r3, [sp, #16]
 8008e1e:	b963      	cbnz	r3, 8008e3a <_dtoa_r+0x922>
 8008e20:	4631      	mov	r1, r6
 8008e22:	2205      	movs	r2, #5
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 fb86 	bl	8009536 <__multadd>
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	4650      	mov	r0, sl
 8008e30:	f000 fd3f 	bl	80098b2 <__mcmp>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	f73f adb6 	bgt.w	80089a6 <_dtoa_r+0x48e>
 8008e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3c:	9d02      	ldr	r5, [sp, #8]
 8008e3e:	ea6f 0b03 	mvn.w	fp, r3
 8008e42:	2300      	movs	r3, #0
 8008e44:	9303      	str	r3, [sp, #12]
 8008e46:	4631      	mov	r1, r6
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 fb5d 	bl	8009508 <_Bfree>
 8008e4e:	2f00      	cmp	r7, #0
 8008e50:	f43f aea6 	beq.w	8008ba0 <_dtoa_r+0x688>
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	b12b      	cbz	r3, 8008e64 <_dtoa_r+0x94c>
 8008e58:	42bb      	cmp	r3, r7
 8008e5a:	d003      	beq.n	8008e64 <_dtoa_r+0x94c>
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f000 fb52 	bl	8009508 <_Bfree>
 8008e64:	4639      	mov	r1, r7
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 fb4e 	bl	8009508 <_Bfree>
 8008e6c:	e698      	b.n	8008ba0 <_dtoa_r+0x688>
 8008e6e:	2600      	movs	r6, #0
 8008e70:	4637      	mov	r7, r6
 8008e72:	e7e2      	b.n	8008e3a <_dtoa_r+0x922>
 8008e74:	46bb      	mov	fp, r7
 8008e76:	4637      	mov	r7, r6
 8008e78:	e595      	b.n	80089a6 <_dtoa_r+0x48e>
 8008e7a:	bf00      	nop
 8008e7c:	40240000 	.word	0x40240000
 8008e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e82:	bb93      	cbnz	r3, 8008eea <_dtoa_r+0x9d2>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	9304      	str	r3, [sp, #16]
 8008e88:	9d02      	ldr	r5, [sp, #8]
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4650      	mov	r0, sl
 8008e8e:	f7ff fab5 	bl	80083fc <quorem>
 8008e92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008e96:	f805 9b01 	strb.w	r9, [r5], #1
 8008e9a:	9b02      	ldr	r3, [sp, #8]
 8008e9c:	9a04      	ldr	r2, [sp, #16]
 8008e9e:	1aeb      	subs	r3, r5, r3
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	f300 80dc 	bgt.w	800905e <_dtoa_r+0xb46>
 8008ea6:	9b02      	ldr	r3, [sp, #8]
 8008ea8:	2a01      	cmp	r2, #1
 8008eaa:	bfac      	ite	ge
 8008eac:	189b      	addge	r3, r3, r2
 8008eae:	3301      	addlt	r3, #1
 8008eb0:	4698      	mov	r8, r3
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	9303      	str	r3, [sp, #12]
 8008eb6:	4651      	mov	r1, sl
 8008eb8:	2201      	movs	r2, #1
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 fca8 	bl	8009810 <__lshift>
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4682      	mov	sl, r0
 8008ec4:	f000 fcf5 	bl	80098b2 <__mcmp>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	f300 808d 	bgt.w	8008fe8 <_dtoa_r+0xad0>
 8008ece:	d103      	bne.n	8008ed8 <_dtoa_r+0x9c0>
 8008ed0:	f019 0f01 	tst.w	r9, #1
 8008ed4:	f040 8088 	bne.w	8008fe8 <_dtoa_r+0xad0>
 8008ed8:	4645      	mov	r5, r8
 8008eda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ede:	2b30      	cmp	r3, #48	; 0x30
 8008ee0:	f105 32ff 	add.w	r2, r5, #4294967295
 8008ee4:	d1af      	bne.n	8008e46 <_dtoa_r+0x92e>
 8008ee6:	4615      	mov	r5, r2
 8008ee8:	e7f7      	b.n	8008eda <_dtoa_r+0x9c2>
 8008eea:	9b03      	ldr	r3, [sp, #12]
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	dd05      	ble.n	8008efe <_dtoa_r+0x9e6>
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	462a      	mov	r2, r5
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 fc8a 	bl	8009810 <__lshift>
 8008efc:	4607      	mov	r7, r0
 8008efe:	f1b8 0f00 	cmp.w	r8, #0
 8008f02:	d04c      	beq.n	8008f9e <_dtoa_r+0xa86>
 8008f04:	6879      	ldr	r1, [r7, #4]
 8008f06:	4620      	mov	r0, r4
 8008f08:	f000 faca 	bl	80094a0 <_Balloc>
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	3202      	adds	r2, #2
 8008f10:	4605      	mov	r5, r0
 8008f12:	0092      	lsls	r2, r2, #2
 8008f14:	f107 010c 	add.w	r1, r7, #12
 8008f18:	300c      	adds	r0, #12
 8008f1a:	f7fe fc9f 	bl	800785c <memcpy>
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4629      	mov	r1, r5
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 fc74 	bl	8009810 <__lshift>
 8008f28:	9b00      	ldr	r3, [sp, #0]
 8008f2a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008f2e:	9703      	str	r7, [sp, #12]
 8008f30:	f003 0301 	and.w	r3, r3, #1
 8008f34:	4607      	mov	r7, r0
 8008f36:	9305      	str	r3, [sp, #20]
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4650      	mov	r0, sl
 8008f3c:	f7ff fa5e 	bl	80083fc <quorem>
 8008f40:	9903      	ldr	r1, [sp, #12]
 8008f42:	4605      	mov	r5, r0
 8008f44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f48:	4650      	mov	r0, sl
 8008f4a:	f000 fcb2 	bl	80098b2 <__mcmp>
 8008f4e:	463a      	mov	r2, r7
 8008f50:	9000      	str	r0, [sp, #0]
 8008f52:	4631      	mov	r1, r6
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 fcc6 	bl	80098e6 <__mdiff>
 8008f5a:	68c3      	ldr	r3, [r0, #12]
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	bb03      	cbnz	r3, 8008fa2 <_dtoa_r+0xa8a>
 8008f60:	4601      	mov	r1, r0
 8008f62:	9006      	str	r0, [sp, #24]
 8008f64:	4650      	mov	r0, sl
 8008f66:	f000 fca4 	bl	80098b2 <__mcmp>
 8008f6a:	9a06      	ldr	r2, [sp, #24]
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4620      	mov	r0, r4
 8008f72:	9306      	str	r3, [sp, #24]
 8008f74:	f000 fac8 	bl	8009508 <_Bfree>
 8008f78:	9b06      	ldr	r3, [sp, #24]
 8008f7a:	b9a3      	cbnz	r3, 8008fa6 <_dtoa_r+0xa8e>
 8008f7c:	9a07      	ldr	r2, [sp, #28]
 8008f7e:	b992      	cbnz	r2, 8008fa6 <_dtoa_r+0xa8e>
 8008f80:	9a05      	ldr	r2, [sp, #20]
 8008f82:	b982      	cbnz	r2, 8008fa6 <_dtoa_r+0xa8e>
 8008f84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008f88:	d029      	beq.n	8008fde <_dtoa_r+0xac6>
 8008f8a:	9b00      	ldr	r3, [sp, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	dd01      	ble.n	8008f94 <_dtoa_r+0xa7c>
 8008f90:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8008f94:	f108 0501 	add.w	r5, r8, #1
 8008f98:	f888 9000 	strb.w	r9, [r8]
 8008f9c:	e753      	b.n	8008e46 <_dtoa_r+0x92e>
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	e7c2      	b.n	8008f28 <_dtoa_r+0xa10>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e7e3      	b.n	8008f6e <_dtoa_r+0xa56>
 8008fa6:	9a00      	ldr	r2, [sp, #0]
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	db04      	blt.n	8008fb6 <_dtoa_r+0xa9e>
 8008fac:	d125      	bne.n	8008ffa <_dtoa_r+0xae2>
 8008fae:	9a07      	ldr	r2, [sp, #28]
 8008fb0:	bb1a      	cbnz	r2, 8008ffa <_dtoa_r+0xae2>
 8008fb2:	9a05      	ldr	r2, [sp, #20]
 8008fb4:	bb0a      	cbnz	r2, 8008ffa <_dtoa_r+0xae2>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	ddec      	ble.n	8008f94 <_dtoa_r+0xa7c>
 8008fba:	4651      	mov	r1, sl
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 fc26 	bl	8009810 <__lshift>
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	4682      	mov	sl, r0
 8008fc8:	f000 fc73 	bl	80098b2 <__mcmp>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	dc03      	bgt.n	8008fd8 <_dtoa_r+0xac0>
 8008fd0:	d1e0      	bne.n	8008f94 <_dtoa_r+0xa7c>
 8008fd2:	f019 0f01 	tst.w	r9, #1
 8008fd6:	d0dd      	beq.n	8008f94 <_dtoa_r+0xa7c>
 8008fd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fdc:	d1d8      	bne.n	8008f90 <_dtoa_r+0xa78>
 8008fde:	2339      	movs	r3, #57	; 0x39
 8008fe0:	f888 3000 	strb.w	r3, [r8]
 8008fe4:	f108 0801 	add.w	r8, r8, #1
 8008fe8:	4645      	mov	r5, r8
 8008fea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fee:	2b39      	cmp	r3, #57	; 0x39
 8008ff0:	f105 32ff 	add.w	r2, r5, #4294967295
 8008ff4:	d03b      	beq.n	800906e <_dtoa_r+0xb56>
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	e040      	b.n	800907c <_dtoa_r+0xb64>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f108 0501 	add.w	r5, r8, #1
 8009000:	dd05      	ble.n	800900e <_dtoa_r+0xaf6>
 8009002:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009006:	d0ea      	beq.n	8008fde <_dtoa_r+0xac6>
 8009008:	f109 0901 	add.w	r9, r9, #1
 800900c:	e7c4      	b.n	8008f98 <_dtoa_r+0xa80>
 800900e:	9b02      	ldr	r3, [sp, #8]
 8009010:	9a04      	ldr	r2, [sp, #16]
 8009012:	f805 9c01 	strb.w	r9, [r5, #-1]
 8009016:	1aeb      	subs	r3, r5, r3
 8009018:	4293      	cmp	r3, r2
 800901a:	46a8      	mov	r8, r5
 800901c:	f43f af4b 	beq.w	8008eb6 <_dtoa_r+0x99e>
 8009020:	4651      	mov	r1, sl
 8009022:	2300      	movs	r3, #0
 8009024:	220a      	movs	r2, #10
 8009026:	4620      	mov	r0, r4
 8009028:	f000 fa85 	bl	8009536 <__multadd>
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	9903      	ldr	r1, [sp, #12]
 8009030:	42bb      	cmp	r3, r7
 8009032:	4682      	mov	sl, r0
 8009034:	f04f 0300 	mov.w	r3, #0
 8009038:	f04f 020a 	mov.w	r2, #10
 800903c:	4620      	mov	r0, r4
 800903e:	d104      	bne.n	800904a <_dtoa_r+0xb32>
 8009040:	f000 fa79 	bl	8009536 <__multadd>
 8009044:	9003      	str	r0, [sp, #12]
 8009046:	4607      	mov	r7, r0
 8009048:	e776      	b.n	8008f38 <_dtoa_r+0xa20>
 800904a:	f000 fa74 	bl	8009536 <__multadd>
 800904e:	2300      	movs	r3, #0
 8009050:	9003      	str	r0, [sp, #12]
 8009052:	220a      	movs	r2, #10
 8009054:	4639      	mov	r1, r7
 8009056:	4620      	mov	r0, r4
 8009058:	f000 fa6d 	bl	8009536 <__multadd>
 800905c:	e7f3      	b.n	8009046 <_dtoa_r+0xb2e>
 800905e:	4651      	mov	r1, sl
 8009060:	2300      	movs	r3, #0
 8009062:	220a      	movs	r2, #10
 8009064:	4620      	mov	r0, r4
 8009066:	f000 fa66 	bl	8009536 <__multadd>
 800906a:	4682      	mov	sl, r0
 800906c:	e70d      	b.n	8008e8a <_dtoa_r+0x972>
 800906e:	9b02      	ldr	r3, [sp, #8]
 8009070:	4293      	cmp	r3, r2
 8009072:	d105      	bne.n	8009080 <_dtoa_r+0xb68>
 8009074:	9a02      	ldr	r2, [sp, #8]
 8009076:	f10b 0b01 	add.w	fp, fp, #1
 800907a:	2331      	movs	r3, #49	; 0x31
 800907c:	7013      	strb	r3, [r2, #0]
 800907e:	e6e2      	b.n	8008e46 <_dtoa_r+0x92e>
 8009080:	4615      	mov	r5, r2
 8009082:	e7b2      	b.n	8008fea <_dtoa_r+0xad2>
 8009084:	4b09      	ldr	r3, [pc, #36]	; (80090ac <_dtoa_r+0xb94>)
 8009086:	f7ff baae 	b.w	80085e6 <_dtoa_r+0xce>
 800908a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800908c:	2b00      	cmp	r3, #0
 800908e:	f47f aa88 	bne.w	80085a2 <_dtoa_r+0x8a>
 8009092:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <_dtoa_r+0xb98>)
 8009094:	f7ff baa7 	b.w	80085e6 <_dtoa_r+0xce>
 8009098:	9b04      	ldr	r3, [sp, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f73f aef4 	bgt.w	8008e88 <_dtoa_r+0x970>
 80090a0:	9b07      	ldr	r3, [sp, #28]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	f77f aef0 	ble.w	8008e88 <_dtoa_r+0x970>
 80090a8:	e6b8      	b.n	8008e1c <_dtoa_r+0x904>
 80090aa:	bf00      	nop
 80090ac:	0800a2c6 	.word	0x0800a2c6
 80090b0:	0800a451 	.word	0x0800a451

080090b4 <__sflush_r>:
 80090b4:	898a      	ldrh	r2, [r1, #12]
 80090b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ba:	4605      	mov	r5, r0
 80090bc:	0710      	lsls	r0, r2, #28
 80090be:	460c      	mov	r4, r1
 80090c0:	d45a      	bmi.n	8009178 <__sflush_r+0xc4>
 80090c2:	684b      	ldr	r3, [r1, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dc05      	bgt.n	80090d4 <__sflush_r+0x20>
 80090c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dc02      	bgt.n	80090d4 <__sflush_r+0x20>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	d0f9      	beq.n	80090ce <__sflush_r+0x1a>
 80090da:	2300      	movs	r3, #0
 80090dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090e0:	682f      	ldr	r7, [r5, #0]
 80090e2:	602b      	str	r3, [r5, #0]
 80090e4:	d033      	beq.n	800914e <__sflush_r+0x9a>
 80090e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	075a      	lsls	r2, r3, #29
 80090ec:	d505      	bpl.n	80090fa <__sflush_r+0x46>
 80090ee:	6863      	ldr	r3, [r4, #4]
 80090f0:	1ac0      	subs	r0, r0, r3
 80090f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090f4:	b10b      	cbz	r3, 80090fa <__sflush_r+0x46>
 80090f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090f8:	1ac0      	subs	r0, r0, r3
 80090fa:	2300      	movs	r3, #0
 80090fc:	4602      	mov	r2, r0
 80090fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009100:	6a21      	ldr	r1, [r4, #32]
 8009102:	4628      	mov	r0, r5
 8009104:	47b0      	blx	r6
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	89a3      	ldrh	r3, [r4, #12]
 800910a:	d106      	bne.n	800911a <__sflush_r+0x66>
 800910c:	6829      	ldr	r1, [r5, #0]
 800910e:	291d      	cmp	r1, #29
 8009110:	d84b      	bhi.n	80091aa <__sflush_r+0xf6>
 8009112:	4a2b      	ldr	r2, [pc, #172]	; (80091c0 <__sflush_r+0x10c>)
 8009114:	40ca      	lsrs	r2, r1
 8009116:	07d6      	lsls	r6, r2, #31
 8009118:	d547      	bpl.n	80091aa <__sflush_r+0xf6>
 800911a:	2200      	movs	r2, #0
 800911c:	6062      	str	r2, [r4, #4]
 800911e:	04d9      	lsls	r1, r3, #19
 8009120:	6922      	ldr	r2, [r4, #16]
 8009122:	6022      	str	r2, [r4, #0]
 8009124:	d504      	bpl.n	8009130 <__sflush_r+0x7c>
 8009126:	1c42      	adds	r2, r0, #1
 8009128:	d101      	bne.n	800912e <__sflush_r+0x7a>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	b903      	cbnz	r3, 8009130 <__sflush_r+0x7c>
 800912e:	6560      	str	r0, [r4, #84]	; 0x54
 8009130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009132:	602f      	str	r7, [r5, #0]
 8009134:	2900      	cmp	r1, #0
 8009136:	d0ca      	beq.n	80090ce <__sflush_r+0x1a>
 8009138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800913c:	4299      	cmp	r1, r3
 800913e:	d002      	beq.n	8009146 <__sflush_r+0x92>
 8009140:	4628      	mov	r0, r5
 8009142:	f000 fc8b 	bl	8009a5c <_free_r>
 8009146:	2000      	movs	r0, #0
 8009148:	6360      	str	r0, [r4, #52]	; 0x34
 800914a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914e:	6a21      	ldr	r1, [r4, #32]
 8009150:	2301      	movs	r3, #1
 8009152:	4628      	mov	r0, r5
 8009154:	47b0      	blx	r6
 8009156:	1c41      	adds	r1, r0, #1
 8009158:	d1c6      	bne.n	80090e8 <__sflush_r+0x34>
 800915a:	682b      	ldr	r3, [r5, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0c3      	beq.n	80090e8 <__sflush_r+0x34>
 8009160:	2b1d      	cmp	r3, #29
 8009162:	d001      	beq.n	8009168 <__sflush_r+0xb4>
 8009164:	2b16      	cmp	r3, #22
 8009166:	d101      	bne.n	800916c <__sflush_r+0xb8>
 8009168:	602f      	str	r7, [r5, #0]
 800916a:	e7b0      	b.n	80090ce <__sflush_r+0x1a>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009172:	81a3      	strh	r3, [r4, #12]
 8009174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009178:	690f      	ldr	r7, [r1, #16]
 800917a:	2f00      	cmp	r7, #0
 800917c:	d0a7      	beq.n	80090ce <__sflush_r+0x1a>
 800917e:	0793      	lsls	r3, r2, #30
 8009180:	680e      	ldr	r6, [r1, #0]
 8009182:	bf08      	it	eq
 8009184:	694b      	ldreq	r3, [r1, #20]
 8009186:	600f      	str	r7, [r1, #0]
 8009188:	bf18      	it	ne
 800918a:	2300      	movne	r3, #0
 800918c:	eba6 0807 	sub.w	r8, r6, r7
 8009190:	608b      	str	r3, [r1, #8]
 8009192:	f1b8 0f00 	cmp.w	r8, #0
 8009196:	dd9a      	ble.n	80090ce <__sflush_r+0x1a>
 8009198:	4643      	mov	r3, r8
 800919a:	463a      	mov	r2, r7
 800919c:	6a21      	ldr	r1, [r4, #32]
 800919e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091a0:	4628      	mov	r0, r5
 80091a2:	47b0      	blx	r6
 80091a4:	2800      	cmp	r0, #0
 80091a6:	dc07      	bgt.n	80091b8 <__sflush_r+0x104>
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ae:	81a3      	strh	r3, [r4, #12]
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295
 80091b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b8:	4407      	add	r7, r0
 80091ba:	eba8 0800 	sub.w	r8, r8, r0
 80091be:	e7e8      	b.n	8009192 <__sflush_r+0xde>
 80091c0:	20400001 	.word	0x20400001

080091c4 <_fflush_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	690b      	ldr	r3, [r1, #16]
 80091c8:	4605      	mov	r5, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	b1db      	cbz	r3, 8009206 <_fflush_r+0x42>
 80091ce:	b118      	cbz	r0, 80091d8 <_fflush_r+0x14>
 80091d0:	6983      	ldr	r3, [r0, #24]
 80091d2:	b90b      	cbnz	r3, 80091d8 <_fflush_r+0x14>
 80091d4:	f000 f860 	bl	8009298 <__sinit>
 80091d8:	4b0c      	ldr	r3, [pc, #48]	; (800920c <_fflush_r+0x48>)
 80091da:	429c      	cmp	r4, r3
 80091dc:	d109      	bne.n	80091f2 <_fflush_r+0x2e>
 80091de:	686c      	ldr	r4, [r5, #4]
 80091e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091e4:	b17b      	cbz	r3, 8009206 <_fflush_r+0x42>
 80091e6:	4621      	mov	r1, r4
 80091e8:	4628      	mov	r0, r5
 80091ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ee:	f7ff bf61 	b.w	80090b4 <__sflush_r>
 80091f2:	4b07      	ldr	r3, [pc, #28]	; (8009210 <_fflush_r+0x4c>)
 80091f4:	429c      	cmp	r4, r3
 80091f6:	d101      	bne.n	80091fc <_fflush_r+0x38>
 80091f8:	68ac      	ldr	r4, [r5, #8]
 80091fa:	e7f1      	b.n	80091e0 <_fflush_r+0x1c>
 80091fc:	4b05      	ldr	r3, [pc, #20]	; (8009214 <_fflush_r+0x50>)
 80091fe:	429c      	cmp	r4, r3
 8009200:	bf08      	it	eq
 8009202:	68ec      	ldreq	r4, [r5, #12]
 8009204:	e7ec      	b.n	80091e0 <_fflush_r+0x1c>
 8009206:	2000      	movs	r0, #0
 8009208:	bd38      	pop	{r3, r4, r5, pc}
 800920a:	bf00      	nop
 800920c:	0800a480 	.word	0x0800a480
 8009210:	0800a4a0 	.word	0x0800a4a0
 8009214:	0800a460 	.word	0x0800a460

08009218 <_cleanup_r>:
 8009218:	4901      	ldr	r1, [pc, #4]	; (8009220 <_cleanup_r+0x8>)
 800921a:	f000 b8a9 	b.w	8009370 <_fwalk_reent>
 800921e:	bf00      	nop
 8009220:	080091c5 	.word	0x080091c5

08009224 <std.isra.0>:
 8009224:	2300      	movs	r3, #0
 8009226:	b510      	push	{r4, lr}
 8009228:	4604      	mov	r4, r0
 800922a:	6003      	str	r3, [r0, #0]
 800922c:	6043      	str	r3, [r0, #4]
 800922e:	6083      	str	r3, [r0, #8]
 8009230:	8181      	strh	r1, [r0, #12]
 8009232:	6643      	str	r3, [r0, #100]	; 0x64
 8009234:	81c2      	strh	r2, [r0, #14]
 8009236:	6103      	str	r3, [r0, #16]
 8009238:	6143      	str	r3, [r0, #20]
 800923a:	6183      	str	r3, [r0, #24]
 800923c:	4619      	mov	r1, r3
 800923e:	2208      	movs	r2, #8
 8009240:	305c      	adds	r0, #92	; 0x5c
 8009242:	f7fe fb16 	bl	8007872 <memset>
 8009246:	4b05      	ldr	r3, [pc, #20]	; (800925c <std.isra.0+0x38>)
 8009248:	6263      	str	r3, [r4, #36]	; 0x24
 800924a:	4b05      	ldr	r3, [pc, #20]	; (8009260 <std.isra.0+0x3c>)
 800924c:	62a3      	str	r3, [r4, #40]	; 0x28
 800924e:	4b05      	ldr	r3, [pc, #20]	; (8009264 <std.isra.0+0x40>)
 8009250:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009252:	4b05      	ldr	r3, [pc, #20]	; (8009268 <std.isra.0+0x44>)
 8009254:	6224      	str	r4, [r4, #32]
 8009256:	6323      	str	r3, [r4, #48]	; 0x30
 8009258:	bd10      	pop	{r4, pc}
 800925a:	bf00      	nop
 800925c:	08009e75 	.word	0x08009e75
 8009260:	08009e97 	.word	0x08009e97
 8009264:	08009ecf 	.word	0x08009ecf
 8009268:	08009ef3 	.word	0x08009ef3

0800926c <__sfmoreglue>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	1e4a      	subs	r2, r1, #1
 8009270:	2568      	movs	r5, #104	; 0x68
 8009272:	4355      	muls	r5, r2
 8009274:	460e      	mov	r6, r1
 8009276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800927a:	f000 fc3d 	bl	8009af8 <_malloc_r>
 800927e:	4604      	mov	r4, r0
 8009280:	b140      	cbz	r0, 8009294 <__sfmoreglue+0x28>
 8009282:	2100      	movs	r1, #0
 8009284:	e880 0042 	stmia.w	r0, {r1, r6}
 8009288:	300c      	adds	r0, #12
 800928a:	60a0      	str	r0, [r4, #8]
 800928c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009290:	f7fe faef 	bl	8007872 <memset>
 8009294:	4620      	mov	r0, r4
 8009296:	bd70      	pop	{r4, r5, r6, pc}

08009298 <__sinit>:
 8009298:	6983      	ldr	r3, [r0, #24]
 800929a:	b510      	push	{r4, lr}
 800929c:	4604      	mov	r4, r0
 800929e:	bb33      	cbnz	r3, 80092ee <__sinit+0x56>
 80092a0:	6483      	str	r3, [r0, #72]	; 0x48
 80092a2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80092a4:	6503      	str	r3, [r0, #80]	; 0x50
 80092a6:	4b12      	ldr	r3, [pc, #72]	; (80092f0 <__sinit+0x58>)
 80092a8:	4a12      	ldr	r2, [pc, #72]	; (80092f4 <__sinit+0x5c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6282      	str	r2, [r0, #40]	; 0x28
 80092ae:	4298      	cmp	r0, r3
 80092b0:	bf04      	itt	eq
 80092b2:	2301      	moveq	r3, #1
 80092b4:	6183      	streq	r3, [r0, #24]
 80092b6:	f000 f81f 	bl	80092f8 <__sfp>
 80092ba:	6060      	str	r0, [r4, #4]
 80092bc:	4620      	mov	r0, r4
 80092be:	f000 f81b 	bl	80092f8 <__sfp>
 80092c2:	60a0      	str	r0, [r4, #8]
 80092c4:	4620      	mov	r0, r4
 80092c6:	f000 f817 	bl	80092f8 <__sfp>
 80092ca:	2200      	movs	r2, #0
 80092cc:	60e0      	str	r0, [r4, #12]
 80092ce:	2104      	movs	r1, #4
 80092d0:	6860      	ldr	r0, [r4, #4]
 80092d2:	f7ff ffa7 	bl	8009224 <std.isra.0>
 80092d6:	2201      	movs	r2, #1
 80092d8:	2109      	movs	r1, #9
 80092da:	68a0      	ldr	r0, [r4, #8]
 80092dc:	f7ff ffa2 	bl	8009224 <std.isra.0>
 80092e0:	2202      	movs	r2, #2
 80092e2:	2112      	movs	r1, #18
 80092e4:	68e0      	ldr	r0, [r4, #12]
 80092e6:	f7ff ff9d 	bl	8009224 <std.isra.0>
 80092ea:	2301      	movs	r3, #1
 80092ec:	61a3      	str	r3, [r4, #24]
 80092ee:	bd10      	pop	{r4, pc}
 80092f0:	0800a4c0 	.word	0x0800a4c0
 80092f4:	08009219 	.word	0x08009219

080092f8 <__sfp>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	4b1c      	ldr	r3, [pc, #112]	; (800936c <__sfp+0x74>)
 80092fc:	681e      	ldr	r6, [r3, #0]
 80092fe:	69b3      	ldr	r3, [r6, #24]
 8009300:	4607      	mov	r7, r0
 8009302:	b913      	cbnz	r3, 800930a <__sfp+0x12>
 8009304:	4630      	mov	r0, r6
 8009306:	f7ff ffc7 	bl	8009298 <__sinit>
 800930a:	3648      	adds	r6, #72	; 0x48
 800930c:	68b4      	ldr	r4, [r6, #8]
 800930e:	6873      	ldr	r3, [r6, #4]
 8009310:	3b01      	subs	r3, #1
 8009312:	d503      	bpl.n	800931c <__sfp+0x24>
 8009314:	6833      	ldr	r3, [r6, #0]
 8009316:	b133      	cbz	r3, 8009326 <__sfp+0x2e>
 8009318:	6836      	ldr	r6, [r6, #0]
 800931a:	e7f7      	b.n	800930c <__sfp+0x14>
 800931c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009320:	b16d      	cbz	r5, 800933e <__sfp+0x46>
 8009322:	3468      	adds	r4, #104	; 0x68
 8009324:	e7f4      	b.n	8009310 <__sfp+0x18>
 8009326:	2104      	movs	r1, #4
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff ff9f 	bl	800926c <__sfmoreglue>
 800932e:	6030      	str	r0, [r6, #0]
 8009330:	2800      	cmp	r0, #0
 8009332:	d1f1      	bne.n	8009318 <__sfp+0x20>
 8009334:	230c      	movs	r3, #12
 8009336:	603b      	str	r3, [r7, #0]
 8009338:	4604      	mov	r4, r0
 800933a:	4620      	mov	r0, r4
 800933c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800933e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009342:	81e3      	strh	r3, [r4, #14]
 8009344:	2301      	movs	r3, #1
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	6665      	str	r5, [r4, #100]	; 0x64
 800934a:	6025      	str	r5, [r4, #0]
 800934c:	60a5      	str	r5, [r4, #8]
 800934e:	6065      	str	r5, [r4, #4]
 8009350:	6125      	str	r5, [r4, #16]
 8009352:	6165      	str	r5, [r4, #20]
 8009354:	61a5      	str	r5, [r4, #24]
 8009356:	2208      	movs	r2, #8
 8009358:	4629      	mov	r1, r5
 800935a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800935e:	f7fe fa88 	bl	8007872 <memset>
 8009362:	6365      	str	r5, [r4, #52]	; 0x34
 8009364:	63a5      	str	r5, [r4, #56]	; 0x38
 8009366:	64a5      	str	r5, [r4, #72]	; 0x48
 8009368:	64e5      	str	r5, [r4, #76]	; 0x4c
 800936a:	e7e6      	b.n	800933a <__sfp+0x42>
 800936c:	0800a4c0 	.word	0x0800a4c0

08009370 <_fwalk_reent>:
 8009370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009374:	4680      	mov	r8, r0
 8009376:	4689      	mov	r9, r1
 8009378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800937c:	2600      	movs	r6, #0
 800937e:	b914      	cbnz	r4, 8009386 <_fwalk_reent+0x16>
 8009380:	4630      	mov	r0, r6
 8009382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009386:	68a5      	ldr	r5, [r4, #8]
 8009388:	6867      	ldr	r7, [r4, #4]
 800938a:	3f01      	subs	r7, #1
 800938c:	d501      	bpl.n	8009392 <_fwalk_reent+0x22>
 800938e:	6824      	ldr	r4, [r4, #0]
 8009390:	e7f5      	b.n	800937e <_fwalk_reent+0xe>
 8009392:	89ab      	ldrh	r3, [r5, #12]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d907      	bls.n	80093a8 <_fwalk_reent+0x38>
 8009398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800939c:	3301      	adds	r3, #1
 800939e:	d003      	beq.n	80093a8 <_fwalk_reent+0x38>
 80093a0:	4629      	mov	r1, r5
 80093a2:	4640      	mov	r0, r8
 80093a4:	47c8      	blx	r9
 80093a6:	4306      	orrs	r6, r0
 80093a8:	3568      	adds	r5, #104	; 0x68
 80093aa:	e7ee      	b.n	800938a <_fwalk_reent+0x1a>

080093ac <_localeconv_r>:
 80093ac:	4b04      	ldr	r3, [pc, #16]	; (80093c0 <_localeconv_r+0x14>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6a18      	ldr	r0, [r3, #32]
 80093b2:	4b04      	ldr	r3, [pc, #16]	; (80093c4 <_localeconv_r+0x18>)
 80093b4:	2800      	cmp	r0, #0
 80093b6:	bf08      	it	eq
 80093b8:	4618      	moveq	r0, r3
 80093ba:	30f0      	adds	r0, #240	; 0xf0
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	2000050c 	.word	0x2000050c
 80093c4:	20000570 	.word	0x20000570

080093c8 <__swhatbuf_r>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	460e      	mov	r6, r1
 80093cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d0:	2900      	cmp	r1, #0
 80093d2:	b090      	sub	sp, #64	; 0x40
 80093d4:	4614      	mov	r4, r2
 80093d6:	461d      	mov	r5, r3
 80093d8:	da07      	bge.n	80093ea <__swhatbuf_r+0x22>
 80093da:	2300      	movs	r3, #0
 80093dc:	602b      	str	r3, [r5, #0]
 80093de:	89b3      	ldrh	r3, [r6, #12]
 80093e0:	061a      	lsls	r2, r3, #24
 80093e2:	d410      	bmi.n	8009406 <__swhatbuf_r+0x3e>
 80093e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093e8:	e00e      	b.n	8009408 <__swhatbuf_r+0x40>
 80093ea:	aa01      	add	r2, sp, #4
 80093ec:	f000 fda8 	bl	8009f40 <_fstat_r>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	dbf2      	blt.n	80093da <__swhatbuf_r+0x12>
 80093f4:	9a02      	ldr	r2, [sp, #8]
 80093f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093fe:	425a      	negs	r2, r3
 8009400:	415a      	adcs	r2, r3
 8009402:	602a      	str	r2, [r5, #0]
 8009404:	e7ee      	b.n	80093e4 <__swhatbuf_r+0x1c>
 8009406:	2340      	movs	r3, #64	; 0x40
 8009408:	2000      	movs	r0, #0
 800940a:	6023      	str	r3, [r4, #0]
 800940c:	b010      	add	sp, #64	; 0x40
 800940e:	bd70      	pop	{r4, r5, r6, pc}

08009410 <__smakebuf_r>:
 8009410:	898b      	ldrh	r3, [r1, #12]
 8009412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009414:	079d      	lsls	r5, r3, #30
 8009416:	4606      	mov	r6, r0
 8009418:	460c      	mov	r4, r1
 800941a:	d507      	bpl.n	800942c <__smakebuf_r+0x1c>
 800941c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	2301      	movs	r3, #1
 8009426:	6163      	str	r3, [r4, #20]
 8009428:	b002      	add	sp, #8
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	ab01      	add	r3, sp, #4
 800942e:	466a      	mov	r2, sp
 8009430:	f7ff ffca 	bl	80093c8 <__swhatbuf_r>
 8009434:	9900      	ldr	r1, [sp, #0]
 8009436:	4605      	mov	r5, r0
 8009438:	4630      	mov	r0, r6
 800943a:	f000 fb5d 	bl	8009af8 <_malloc_r>
 800943e:	b948      	cbnz	r0, 8009454 <__smakebuf_r+0x44>
 8009440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009444:	059a      	lsls	r2, r3, #22
 8009446:	d4ef      	bmi.n	8009428 <__smakebuf_r+0x18>
 8009448:	f023 0303 	bic.w	r3, r3, #3
 800944c:	f043 0302 	orr.w	r3, r3, #2
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	e7e3      	b.n	800941c <__smakebuf_r+0xc>
 8009454:	4b0d      	ldr	r3, [pc, #52]	; (800948c <__smakebuf_r+0x7c>)
 8009456:	62b3      	str	r3, [r6, #40]	; 0x28
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	6020      	str	r0, [r4, #0]
 800945c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009460:	81a3      	strh	r3, [r4, #12]
 8009462:	9b00      	ldr	r3, [sp, #0]
 8009464:	6163      	str	r3, [r4, #20]
 8009466:	9b01      	ldr	r3, [sp, #4]
 8009468:	6120      	str	r0, [r4, #16]
 800946a:	b15b      	cbz	r3, 8009484 <__smakebuf_r+0x74>
 800946c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009470:	4630      	mov	r0, r6
 8009472:	f000 fd77 	bl	8009f64 <_isatty_r>
 8009476:	b128      	cbz	r0, 8009484 <__smakebuf_r+0x74>
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	f023 0303 	bic.w	r3, r3, #3
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	81a3      	strh	r3, [r4, #12]
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	431d      	orrs	r5, r3
 8009488:	81a5      	strh	r5, [r4, #12]
 800948a:	e7cd      	b.n	8009428 <__smakebuf_r+0x18>
 800948c:	08009219 	.word	0x08009219

08009490 <malloc>:
 8009490:	4b02      	ldr	r3, [pc, #8]	; (800949c <malloc+0xc>)
 8009492:	4601      	mov	r1, r0
 8009494:	6818      	ldr	r0, [r3, #0]
 8009496:	f000 bb2f 	b.w	8009af8 <_malloc_r>
 800949a:	bf00      	nop
 800949c:	2000050c 	.word	0x2000050c

080094a0 <_Balloc>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094a4:	4604      	mov	r4, r0
 80094a6:	460e      	mov	r6, r1
 80094a8:	b93d      	cbnz	r5, 80094ba <_Balloc+0x1a>
 80094aa:	2010      	movs	r0, #16
 80094ac:	f7ff fff0 	bl	8009490 <malloc>
 80094b0:	6260      	str	r0, [r4, #36]	; 0x24
 80094b2:	6045      	str	r5, [r0, #4]
 80094b4:	6085      	str	r5, [r0, #8]
 80094b6:	6005      	str	r5, [r0, #0]
 80094b8:	60c5      	str	r5, [r0, #12]
 80094ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80094bc:	68eb      	ldr	r3, [r5, #12]
 80094be:	b183      	cbz	r3, 80094e2 <_Balloc+0x42>
 80094c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80094c8:	b9b8      	cbnz	r0, 80094fa <_Balloc+0x5a>
 80094ca:	2101      	movs	r1, #1
 80094cc:	fa01 f506 	lsl.w	r5, r1, r6
 80094d0:	1d6a      	adds	r2, r5, #5
 80094d2:	0092      	lsls	r2, r2, #2
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 fab3 	bl	8009a40 <_calloc_r>
 80094da:	b160      	cbz	r0, 80094f6 <_Balloc+0x56>
 80094dc:	6046      	str	r6, [r0, #4]
 80094de:	6085      	str	r5, [r0, #8]
 80094e0:	e00e      	b.n	8009500 <_Balloc+0x60>
 80094e2:	2221      	movs	r2, #33	; 0x21
 80094e4:	2104      	movs	r1, #4
 80094e6:	4620      	mov	r0, r4
 80094e8:	f000 faaa 	bl	8009a40 <_calloc_r>
 80094ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094ee:	60e8      	str	r0, [r5, #12]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e4      	bne.n	80094c0 <_Balloc+0x20>
 80094f6:	2000      	movs	r0, #0
 80094f8:	bd70      	pop	{r4, r5, r6, pc}
 80094fa:	6802      	ldr	r2, [r0, #0]
 80094fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009500:	2300      	movs	r3, #0
 8009502:	6103      	str	r3, [r0, #16]
 8009504:	60c3      	str	r3, [r0, #12]
 8009506:	bd70      	pop	{r4, r5, r6, pc}

08009508 <_Bfree>:
 8009508:	b570      	push	{r4, r5, r6, lr}
 800950a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800950c:	4606      	mov	r6, r0
 800950e:	460d      	mov	r5, r1
 8009510:	b93c      	cbnz	r4, 8009522 <_Bfree+0x1a>
 8009512:	2010      	movs	r0, #16
 8009514:	f7ff ffbc 	bl	8009490 <malloc>
 8009518:	6270      	str	r0, [r6, #36]	; 0x24
 800951a:	6044      	str	r4, [r0, #4]
 800951c:	6084      	str	r4, [r0, #8]
 800951e:	6004      	str	r4, [r0, #0]
 8009520:	60c4      	str	r4, [r0, #12]
 8009522:	b13d      	cbz	r5, 8009534 <_Bfree+0x2c>
 8009524:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009526:	686a      	ldr	r2, [r5, #4]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800952e:	6029      	str	r1, [r5, #0]
 8009530:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009534:	bd70      	pop	{r4, r5, r6, pc}

08009536 <__multadd>:
 8009536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953a:	690d      	ldr	r5, [r1, #16]
 800953c:	461f      	mov	r7, r3
 800953e:	4606      	mov	r6, r0
 8009540:	460c      	mov	r4, r1
 8009542:	f101 0e14 	add.w	lr, r1, #20
 8009546:	2300      	movs	r3, #0
 8009548:	f8de 0000 	ldr.w	r0, [lr]
 800954c:	b281      	uxth	r1, r0
 800954e:	fb02 7101 	mla	r1, r2, r1, r7
 8009552:	0c0f      	lsrs	r7, r1, #16
 8009554:	0c00      	lsrs	r0, r0, #16
 8009556:	fb02 7000 	mla	r0, r2, r0, r7
 800955a:	b289      	uxth	r1, r1
 800955c:	3301      	adds	r3, #1
 800955e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009562:	429d      	cmp	r5, r3
 8009564:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009568:	f84e 1b04 	str.w	r1, [lr], #4
 800956c:	dcec      	bgt.n	8009548 <__multadd+0x12>
 800956e:	b1d7      	cbz	r7, 80095a6 <__multadd+0x70>
 8009570:	68a3      	ldr	r3, [r4, #8]
 8009572:	429d      	cmp	r5, r3
 8009574:	db12      	blt.n	800959c <__multadd+0x66>
 8009576:	6861      	ldr	r1, [r4, #4]
 8009578:	4630      	mov	r0, r6
 800957a:	3101      	adds	r1, #1
 800957c:	f7ff ff90 	bl	80094a0 <_Balloc>
 8009580:	6922      	ldr	r2, [r4, #16]
 8009582:	3202      	adds	r2, #2
 8009584:	f104 010c 	add.w	r1, r4, #12
 8009588:	4680      	mov	r8, r0
 800958a:	0092      	lsls	r2, r2, #2
 800958c:	300c      	adds	r0, #12
 800958e:	f7fe f965 	bl	800785c <memcpy>
 8009592:	4621      	mov	r1, r4
 8009594:	4630      	mov	r0, r6
 8009596:	f7ff ffb7 	bl	8009508 <_Bfree>
 800959a:	4644      	mov	r4, r8
 800959c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095a0:	3501      	adds	r5, #1
 80095a2:	615f      	str	r7, [r3, #20]
 80095a4:	6125      	str	r5, [r4, #16]
 80095a6:	4620      	mov	r0, r4
 80095a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095ac <__hi0bits>:
 80095ac:	0c02      	lsrs	r2, r0, #16
 80095ae:	0412      	lsls	r2, r2, #16
 80095b0:	4603      	mov	r3, r0
 80095b2:	b9b2      	cbnz	r2, 80095e2 <__hi0bits+0x36>
 80095b4:	0403      	lsls	r3, r0, #16
 80095b6:	2010      	movs	r0, #16
 80095b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80095bc:	bf04      	itt	eq
 80095be:	021b      	lsleq	r3, r3, #8
 80095c0:	3008      	addeq	r0, #8
 80095c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80095c6:	bf04      	itt	eq
 80095c8:	011b      	lsleq	r3, r3, #4
 80095ca:	3004      	addeq	r0, #4
 80095cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80095d0:	bf04      	itt	eq
 80095d2:	009b      	lsleq	r3, r3, #2
 80095d4:	3002      	addeq	r0, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	db06      	blt.n	80095e8 <__hi0bits+0x3c>
 80095da:	005b      	lsls	r3, r3, #1
 80095dc:	d503      	bpl.n	80095e6 <__hi0bits+0x3a>
 80095de:	3001      	adds	r0, #1
 80095e0:	4770      	bx	lr
 80095e2:	2000      	movs	r0, #0
 80095e4:	e7e8      	b.n	80095b8 <__hi0bits+0xc>
 80095e6:	2020      	movs	r0, #32
 80095e8:	4770      	bx	lr

080095ea <__lo0bits>:
 80095ea:	6803      	ldr	r3, [r0, #0]
 80095ec:	f013 0207 	ands.w	r2, r3, #7
 80095f0:	4601      	mov	r1, r0
 80095f2:	d00b      	beq.n	800960c <__lo0bits+0x22>
 80095f4:	07da      	lsls	r2, r3, #31
 80095f6:	d423      	bmi.n	8009640 <__lo0bits+0x56>
 80095f8:	0798      	lsls	r0, r3, #30
 80095fa:	bf49      	itett	mi
 80095fc:	085b      	lsrmi	r3, r3, #1
 80095fe:	089b      	lsrpl	r3, r3, #2
 8009600:	2001      	movmi	r0, #1
 8009602:	600b      	strmi	r3, [r1, #0]
 8009604:	bf5c      	itt	pl
 8009606:	600b      	strpl	r3, [r1, #0]
 8009608:	2002      	movpl	r0, #2
 800960a:	4770      	bx	lr
 800960c:	b298      	uxth	r0, r3
 800960e:	b9a8      	cbnz	r0, 800963c <__lo0bits+0x52>
 8009610:	0c1b      	lsrs	r3, r3, #16
 8009612:	2010      	movs	r0, #16
 8009614:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009618:	bf04      	itt	eq
 800961a:	0a1b      	lsreq	r3, r3, #8
 800961c:	3008      	addeq	r0, #8
 800961e:	071a      	lsls	r2, r3, #28
 8009620:	bf04      	itt	eq
 8009622:	091b      	lsreq	r3, r3, #4
 8009624:	3004      	addeq	r0, #4
 8009626:	079a      	lsls	r2, r3, #30
 8009628:	bf04      	itt	eq
 800962a:	089b      	lsreq	r3, r3, #2
 800962c:	3002      	addeq	r0, #2
 800962e:	07da      	lsls	r2, r3, #31
 8009630:	d402      	bmi.n	8009638 <__lo0bits+0x4e>
 8009632:	085b      	lsrs	r3, r3, #1
 8009634:	d006      	beq.n	8009644 <__lo0bits+0x5a>
 8009636:	3001      	adds	r0, #1
 8009638:	600b      	str	r3, [r1, #0]
 800963a:	4770      	bx	lr
 800963c:	4610      	mov	r0, r2
 800963e:	e7e9      	b.n	8009614 <__lo0bits+0x2a>
 8009640:	2000      	movs	r0, #0
 8009642:	4770      	bx	lr
 8009644:	2020      	movs	r0, #32
 8009646:	4770      	bx	lr

08009648 <__i2b>:
 8009648:	b510      	push	{r4, lr}
 800964a:	460c      	mov	r4, r1
 800964c:	2101      	movs	r1, #1
 800964e:	f7ff ff27 	bl	80094a0 <_Balloc>
 8009652:	2201      	movs	r2, #1
 8009654:	6144      	str	r4, [r0, #20]
 8009656:	6102      	str	r2, [r0, #16]
 8009658:	bd10      	pop	{r4, pc}

0800965a <__multiply>:
 800965a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965e:	4614      	mov	r4, r2
 8009660:	690a      	ldr	r2, [r1, #16]
 8009662:	6923      	ldr	r3, [r4, #16]
 8009664:	429a      	cmp	r2, r3
 8009666:	bfb8      	it	lt
 8009668:	460b      	movlt	r3, r1
 800966a:	4689      	mov	r9, r1
 800966c:	bfbc      	itt	lt
 800966e:	46a1      	movlt	r9, r4
 8009670:	461c      	movlt	r4, r3
 8009672:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009676:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800967a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800967e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009682:	eb07 060a 	add.w	r6, r7, sl
 8009686:	429e      	cmp	r6, r3
 8009688:	bfc8      	it	gt
 800968a:	3101      	addgt	r1, #1
 800968c:	f7ff ff08 	bl	80094a0 <_Balloc>
 8009690:	f100 0514 	add.w	r5, r0, #20
 8009694:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009698:	462b      	mov	r3, r5
 800969a:	2200      	movs	r2, #0
 800969c:	4543      	cmp	r3, r8
 800969e:	d316      	bcc.n	80096ce <__multiply+0x74>
 80096a0:	f104 0214 	add.w	r2, r4, #20
 80096a4:	f109 0114 	add.w	r1, r9, #20
 80096a8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80096ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	9c01      	ldr	r4, [sp, #4]
 80096b4:	4294      	cmp	r4, r2
 80096b6:	4613      	mov	r3, r2
 80096b8:	d80c      	bhi.n	80096d4 <__multiply+0x7a>
 80096ba:	2e00      	cmp	r6, #0
 80096bc:	dd03      	ble.n	80096c6 <__multiply+0x6c>
 80096be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d054      	beq.n	8009770 <__multiply+0x116>
 80096c6:	6106      	str	r6, [r0, #16]
 80096c8:	b003      	add	sp, #12
 80096ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ce:	f843 2b04 	str.w	r2, [r3], #4
 80096d2:	e7e3      	b.n	800969c <__multiply+0x42>
 80096d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80096d8:	3204      	adds	r2, #4
 80096da:	f1ba 0f00 	cmp.w	sl, #0
 80096de:	d020      	beq.n	8009722 <__multiply+0xc8>
 80096e0:	46ae      	mov	lr, r5
 80096e2:	4689      	mov	r9, r1
 80096e4:	f04f 0c00 	mov.w	ip, #0
 80096e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80096ec:	f8be b000 	ldrh.w	fp, [lr]
 80096f0:	b2a3      	uxth	r3, r4
 80096f2:	fb0a b303 	mla	r3, sl, r3, fp
 80096f6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80096fa:	f8de 4000 	ldr.w	r4, [lr]
 80096fe:	4463      	add	r3, ip
 8009700:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8009704:	fb0a c40b 	mla	r4, sl, fp, ip
 8009708:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800970c:	b29b      	uxth	r3, r3
 800970e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009712:	454f      	cmp	r7, r9
 8009714:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8009718:	f84e 3b04 	str.w	r3, [lr], #4
 800971c:	d8e4      	bhi.n	80096e8 <__multiply+0x8e>
 800971e:	f8ce c000 	str.w	ip, [lr]
 8009722:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8009726:	f1b9 0f00 	cmp.w	r9, #0
 800972a:	d01f      	beq.n	800976c <__multiply+0x112>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	46ae      	mov	lr, r5
 8009730:	468c      	mov	ip, r1
 8009732:	f04f 0a00 	mov.w	sl, #0
 8009736:	f8bc 4000 	ldrh.w	r4, [ip]
 800973a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800973e:	fb09 b404 	mla	r4, r9, r4, fp
 8009742:	44a2      	add	sl, r4
 8009744:	b29b      	uxth	r3, r3
 8009746:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800974a:	f84e 3b04 	str.w	r3, [lr], #4
 800974e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009752:	f8be 4000 	ldrh.w	r4, [lr]
 8009756:	0c1b      	lsrs	r3, r3, #16
 8009758:	fb09 4303 	mla	r3, r9, r3, r4
 800975c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8009760:	4567      	cmp	r7, ip
 8009762:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009766:	d8e6      	bhi.n	8009736 <__multiply+0xdc>
 8009768:	f8ce 3000 	str.w	r3, [lr]
 800976c:	3504      	adds	r5, #4
 800976e:	e7a0      	b.n	80096b2 <__multiply+0x58>
 8009770:	3e01      	subs	r6, #1
 8009772:	e7a2      	b.n	80096ba <__multiply+0x60>

08009774 <__pow5mult>:
 8009774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009778:	4615      	mov	r5, r2
 800977a:	f012 0203 	ands.w	r2, r2, #3
 800977e:	4606      	mov	r6, r0
 8009780:	460f      	mov	r7, r1
 8009782:	d007      	beq.n	8009794 <__pow5mult+0x20>
 8009784:	3a01      	subs	r2, #1
 8009786:	4c21      	ldr	r4, [pc, #132]	; (800980c <__pow5mult+0x98>)
 8009788:	2300      	movs	r3, #0
 800978a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800978e:	f7ff fed2 	bl	8009536 <__multadd>
 8009792:	4607      	mov	r7, r0
 8009794:	10ad      	asrs	r5, r5, #2
 8009796:	d035      	beq.n	8009804 <__pow5mult+0x90>
 8009798:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800979a:	b93c      	cbnz	r4, 80097ac <__pow5mult+0x38>
 800979c:	2010      	movs	r0, #16
 800979e:	f7ff fe77 	bl	8009490 <malloc>
 80097a2:	6270      	str	r0, [r6, #36]	; 0x24
 80097a4:	6044      	str	r4, [r0, #4]
 80097a6:	6084      	str	r4, [r0, #8]
 80097a8:	6004      	str	r4, [r0, #0]
 80097aa:	60c4      	str	r4, [r0, #12]
 80097ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097b4:	b94c      	cbnz	r4, 80097ca <__pow5mult+0x56>
 80097b6:	f240 2171 	movw	r1, #625	; 0x271
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7ff ff44 	bl	8009648 <__i2b>
 80097c0:	2300      	movs	r3, #0
 80097c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80097c6:	4604      	mov	r4, r0
 80097c8:	6003      	str	r3, [r0, #0]
 80097ca:	f04f 0800 	mov.w	r8, #0
 80097ce:	07eb      	lsls	r3, r5, #31
 80097d0:	d50a      	bpl.n	80097e8 <__pow5mult+0x74>
 80097d2:	4639      	mov	r1, r7
 80097d4:	4622      	mov	r2, r4
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7ff ff3f 	bl	800965a <__multiply>
 80097dc:	4639      	mov	r1, r7
 80097de:	4681      	mov	r9, r0
 80097e0:	4630      	mov	r0, r6
 80097e2:	f7ff fe91 	bl	8009508 <_Bfree>
 80097e6:	464f      	mov	r7, r9
 80097e8:	106d      	asrs	r5, r5, #1
 80097ea:	d00b      	beq.n	8009804 <__pow5mult+0x90>
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	b938      	cbnz	r0, 8009800 <__pow5mult+0x8c>
 80097f0:	4622      	mov	r2, r4
 80097f2:	4621      	mov	r1, r4
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff ff30 	bl	800965a <__multiply>
 80097fa:	6020      	str	r0, [r4, #0]
 80097fc:	f8c0 8000 	str.w	r8, [r0]
 8009800:	4604      	mov	r4, r0
 8009802:	e7e4      	b.n	80097ce <__pow5mult+0x5a>
 8009804:	4638      	mov	r0, r7
 8009806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800980a:	bf00      	nop
 800980c:	0800a5b8 	.word	0x0800a5b8

08009810 <__lshift>:
 8009810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009814:	460c      	mov	r4, r1
 8009816:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800981a:	6923      	ldr	r3, [r4, #16]
 800981c:	6849      	ldr	r1, [r1, #4]
 800981e:	eb0a 0903 	add.w	r9, sl, r3
 8009822:	68a3      	ldr	r3, [r4, #8]
 8009824:	4607      	mov	r7, r0
 8009826:	4616      	mov	r6, r2
 8009828:	f109 0501 	add.w	r5, r9, #1
 800982c:	42ab      	cmp	r3, r5
 800982e:	db31      	blt.n	8009894 <__lshift+0x84>
 8009830:	4638      	mov	r0, r7
 8009832:	f7ff fe35 	bl	80094a0 <_Balloc>
 8009836:	2200      	movs	r2, #0
 8009838:	4680      	mov	r8, r0
 800983a:	f100 0314 	add.w	r3, r0, #20
 800983e:	4611      	mov	r1, r2
 8009840:	4552      	cmp	r2, sl
 8009842:	db2a      	blt.n	800989a <__lshift+0x8a>
 8009844:	6920      	ldr	r0, [r4, #16]
 8009846:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800984a:	f104 0114 	add.w	r1, r4, #20
 800984e:	f016 021f 	ands.w	r2, r6, #31
 8009852:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009856:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800985a:	d022      	beq.n	80098a2 <__lshift+0x92>
 800985c:	f1c2 0c20 	rsb	ip, r2, #32
 8009860:	2000      	movs	r0, #0
 8009862:	680e      	ldr	r6, [r1, #0]
 8009864:	4096      	lsls	r6, r2
 8009866:	4330      	orrs	r0, r6
 8009868:	f843 0b04 	str.w	r0, [r3], #4
 800986c:	f851 0b04 	ldr.w	r0, [r1], #4
 8009870:	458e      	cmp	lr, r1
 8009872:	fa20 f00c 	lsr.w	r0, r0, ip
 8009876:	d8f4      	bhi.n	8009862 <__lshift+0x52>
 8009878:	6018      	str	r0, [r3, #0]
 800987a:	b108      	cbz	r0, 8009880 <__lshift+0x70>
 800987c:	f109 0502 	add.w	r5, r9, #2
 8009880:	3d01      	subs	r5, #1
 8009882:	4638      	mov	r0, r7
 8009884:	f8c8 5010 	str.w	r5, [r8, #16]
 8009888:	4621      	mov	r1, r4
 800988a:	f7ff fe3d 	bl	8009508 <_Bfree>
 800988e:	4640      	mov	r0, r8
 8009890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009894:	3101      	adds	r1, #1
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	e7c8      	b.n	800982c <__lshift+0x1c>
 800989a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800989e:	3201      	adds	r2, #1
 80098a0:	e7ce      	b.n	8009840 <__lshift+0x30>
 80098a2:	3b04      	subs	r3, #4
 80098a4:	f851 2b04 	ldr.w	r2, [r1], #4
 80098a8:	f843 2f04 	str.w	r2, [r3, #4]!
 80098ac:	458e      	cmp	lr, r1
 80098ae:	d8f9      	bhi.n	80098a4 <__lshift+0x94>
 80098b0:	e7e6      	b.n	8009880 <__lshift+0x70>

080098b2 <__mcmp>:
 80098b2:	6903      	ldr	r3, [r0, #16]
 80098b4:	690a      	ldr	r2, [r1, #16]
 80098b6:	1a9b      	subs	r3, r3, r2
 80098b8:	b530      	push	{r4, r5, lr}
 80098ba:	d10c      	bne.n	80098d6 <__mcmp+0x24>
 80098bc:	0092      	lsls	r2, r2, #2
 80098be:	3014      	adds	r0, #20
 80098c0:	3114      	adds	r1, #20
 80098c2:	1884      	adds	r4, r0, r2
 80098c4:	4411      	add	r1, r2
 80098c6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098ca:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098ce:	4295      	cmp	r5, r2
 80098d0:	d003      	beq.n	80098da <__mcmp+0x28>
 80098d2:	d305      	bcc.n	80098e0 <__mcmp+0x2e>
 80098d4:	2301      	movs	r3, #1
 80098d6:	4618      	mov	r0, r3
 80098d8:	bd30      	pop	{r4, r5, pc}
 80098da:	42a0      	cmp	r0, r4
 80098dc:	d3f3      	bcc.n	80098c6 <__mcmp+0x14>
 80098de:	e7fa      	b.n	80098d6 <__mcmp+0x24>
 80098e0:	f04f 33ff 	mov.w	r3, #4294967295
 80098e4:	e7f7      	b.n	80098d6 <__mcmp+0x24>

080098e6 <__mdiff>:
 80098e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ea:	460d      	mov	r5, r1
 80098ec:	4607      	mov	r7, r0
 80098ee:	4611      	mov	r1, r2
 80098f0:	4628      	mov	r0, r5
 80098f2:	4614      	mov	r4, r2
 80098f4:	f7ff ffdd 	bl	80098b2 <__mcmp>
 80098f8:	1e06      	subs	r6, r0, #0
 80098fa:	d108      	bne.n	800990e <__mdiff+0x28>
 80098fc:	4631      	mov	r1, r6
 80098fe:	4638      	mov	r0, r7
 8009900:	f7ff fdce 	bl	80094a0 <_Balloc>
 8009904:	2301      	movs	r3, #1
 8009906:	6103      	str	r3, [r0, #16]
 8009908:	6146      	str	r6, [r0, #20]
 800990a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800990e:	bfa4      	itt	ge
 8009910:	4623      	movge	r3, r4
 8009912:	462c      	movge	r4, r5
 8009914:	4638      	mov	r0, r7
 8009916:	6861      	ldr	r1, [r4, #4]
 8009918:	bfa6      	itte	ge
 800991a:	461d      	movge	r5, r3
 800991c:	2600      	movge	r6, #0
 800991e:	2601      	movlt	r6, #1
 8009920:	f7ff fdbe 	bl	80094a0 <_Balloc>
 8009924:	692b      	ldr	r3, [r5, #16]
 8009926:	60c6      	str	r6, [r0, #12]
 8009928:	6926      	ldr	r6, [r4, #16]
 800992a:	f105 0914 	add.w	r9, r5, #20
 800992e:	f104 0214 	add.w	r2, r4, #20
 8009932:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009936:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800993a:	f100 0514 	add.w	r5, r0, #20
 800993e:	f04f 0c00 	mov.w	ip, #0
 8009942:	f852 ab04 	ldr.w	sl, [r2], #4
 8009946:	f859 4b04 	ldr.w	r4, [r9], #4
 800994a:	fa1c f18a 	uxtah	r1, ip, sl
 800994e:	b2a3      	uxth	r3, r4
 8009950:	1ac9      	subs	r1, r1, r3
 8009952:	0c23      	lsrs	r3, r4, #16
 8009954:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009958:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800995c:	b289      	uxth	r1, r1
 800995e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009962:	45c8      	cmp	r8, r9
 8009964:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009968:	4696      	mov	lr, r2
 800996a:	f845 3b04 	str.w	r3, [r5], #4
 800996e:	d8e8      	bhi.n	8009942 <__mdiff+0x5c>
 8009970:	45be      	cmp	lr, r7
 8009972:	d305      	bcc.n	8009980 <__mdiff+0x9a>
 8009974:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009978:	b18b      	cbz	r3, 800999e <__mdiff+0xb8>
 800997a:	6106      	str	r6, [r0, #16]
 800997c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009980:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009984:	fa1c f381 	uxtah	r3, ip, r1
 8009988:	141a      	asrs	r2, r3, #16
 800998a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800998e:	b29b      	uxth	r3, r3
 8009990:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009994:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009998:	f845 3b04 	str.w	r3, [r5], #4
 800999c:	e7e8      	b.n	8009970 <__mdiff+0x8a>
 800999e:	3e01      	subs	r6, #1
 80099a0:	e7e8      	b.n	8009974 <__mdiff+0x8e>

080099a2 <__d2b>:
 80099a2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099a6:	460e      	mov	r6, r1
 80099a8:	2101      	movs	r1, #1
 80099aa:	ec59 8b10 	vmov	r8, r9, d0
 80099ae:	4615      	mov	r5, r2
 80099b0:	f7ff fd76 	bl	80094a0 <_Balloc>
 80099b4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80099b8:	4607      	mov	r7, r0
 80099ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099be:	bb34      	cbnz	r4, 8009a0e <__d2b+0x6c>
 80099c0:	9301      	str	r3, [sp, #4]
 80099c2:	f1b8 0f00 	cmp.w	r8, #0
 80099c6:	d027      	beq.n	8009a18 <__d2b+0x76>
 80099c8:	a802      	add	r0, sp, #8
 80099ca:	f840 8d08 	str.w	r8, [r0, #-8]!
 80099ce:	f7ff fe0c 	bl	80095ea <__lo0bits>
 80099d2:	9900      	ldr	r1, [sp, #0]
 80099d4:	b1f0      	cbz	r0, 8009a14 <__d2b+0x72>
 80099d6:	9a01      	ldr	r2, [sp, #4]
 80099d8:	f1c0 0320 	rsb	r3, r0, #32
 80099dc:	fa02 f303 	lsl.w	r3, r2, r3
 80099e0:	430b      	orrs	r3, r1
 80099e2:	40c2      	lsrs	r2, r0
 80099e4:	617b      	str	r3, [r7, #20]
 80099e6:	9201      	str	r2, [sp, #4]
 80099e8:	9b01      	ldr	r3, [sp, #4]
 80099ea:	61bb      	str	r3, [r7, #24]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	bf14      	ite	ne
 80099f0:	2102      	movne	r1, #2
 80099f2:	2101      	moveq	r1, #1
 80099f4:	6139      	str	r1, [r7, #16]
 80099f6:	b1c4      	cbz	r4, 8009a2a <__d2b+0x88>
 80099f8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80099fc:	4404      	add	r4, r0
 80099fe:	6034      	str	r4, [r6, #0]
 8009a00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a04:	6028      	str	r0, [r5, #0]
 8009a06:	4638      	mov	r0, r7
 8009a08:	b003      	add	sp, #12
 8009a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a12:	e7d5      	b.n	80099c0 <__d2b+0x1e>
 8009a14:	6179      	str	r1, [r7, #20]
 8009a16:	e7e7      	b.n	80099e8 <__d2b+0x46>
 8009a18:	a801      	add	r0, sp, #4
 8009a1a:	f7ff fde6 	bl	80095ea <__lo0bits>
 8009a1e:	9b01      	ldr	r3, [sp, #4]
 8009a20:	617b      	str	r3, [r7, #20]
 8009a22:	2101      	movs	r1, #1
 8009a24:	6139      	str	r1, [r7, #16]
 8009a26:	3020      	adds	r0, #32
 8009a28:	e7e5      	b.n	80099f6 <__d2b+0x54>
 8009a2a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009a2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a32:	6030      	str	r0, [r6, #0]
 8009a34:	6918      	ldr	r0, [r3, #16]
 8009a36:	f7ff fdb9 	bl	80095ac <__hi0bits>
 8009a3a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009a3e:	e7e1      	b.n	8009a04 <__d2b+0x62>

08009a40 <_calloc_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	fb02 f401 	mul.w	r4, r2, r1
 8009a46:	4621      	mov	r1, r4
 8009a48:	f000 f856 	bl	8009af8 <_malloc_r>
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	b118      	cbz	r0, 8009a58 <_calloc_r+0x18>
 8009a50:	4622      	mov	r2, r4
 8009a52:	2100      	movs	r1, #0
 8009a54:	f7fd ff0d 	bl	8007872 <memset>
 8009a58:	4628      	mov	r0, r5
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}

08009a5c <_free_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4605      	mov	r5, r0
 8009a60:	2900      	cmp	r1, #0
 8009a62:	d045      	beq.n	8009af0 <_free_r+0x94>
 8009a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a68:	1f0c      	subs	r4, r1, #4
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bfb8      	it	lt
 8009a6e:	18e4      	addlt	r4, r4, r3
 8009a70:	f000 fac6 	bl	800a000 <__malloc_lock>
 8009a74:	4a1f      	ldr	r2, [pc, #124]	; (8009af4 <_free_r+0x98>)
 8009a76:	6813      	ldr	r3, [r2, #0]
 8009a78:	4610      	mov	r0, r2
 8009a7a:	b933      	cbnz	r3, 8009a8a <_free_r+0x2e>
 8009a7c:	6063      	str	r3, [r4, #4]
 8009a7e:	6014      	str	r4, [r2, #0]
 8009a80:	4628      	mov	r0, r5
 8009a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a86:	f000 babc 	b.w	800a002 <__malloc_unlock>
 8009a8a:	42a3      	cmp	r3, r4
 8009a8c:	d90c      	bls.n	8009aa8 <_free_r+0x4c>
 8009a8e:	6821      	ldr	r1, [r4, #0]
 8009a90:	1862      	adds	r2, r4, r1
 8009a92:	4293      	cmp	r3, r2
 8009a94:	bf04      	itt	eq
 8009a96:	681a      	ldreq	r2, [r3, #0]
 8009a98:	685b      	ldreq	r3, [r3, #4]
 8009a9a:	6063      	str	r3, [r4, #4]
 8009a9c:	bf04      	itt	eq
 8009a9e:	1852      	addeq	r2, r2, r1
 8009aa0:	6022      	streq	r2, [r4, #0]
 8009aa2:	6004      	str	r4, [r0, #0]
 8009aa4:	e7ec      	b.n	8009a80 <_free_r+0x24>
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	b10a      	cbz	r2, 8009ab0 <_free_r+0x54>
 8009aac:	42a2      	cmp	r2, r4
 8009aae:	d9fa      	bls.n	8009aa6 <_free_r+0x4a>
 8009ab0:	6819      	ldr	r1, [r3, #0]
 8009ab2:	1858      	adds	r0, r3, r1
 8009ab4:	42a0      	cmp	r0, r4
 8009ab6:	d10b      	bne.n	8009ad0 <_free_r+0x74>
 8009ab8:	6820      	ldr	r0, [r4, #0]
 8009aba:	4401      	add	r1, r0
 8009abc:	1858      	adds	r0, r3, r1
 8009abe:	4282      	cmp	r2, r0
 8009ac0:	6019      	str	r1, [r3, #0]
 8009ac2:	d1dd      	bne.n	8009a80 <_free_r+0x24>
 8009ac4:	6810      	ldr	r0, [r2, #0]
 8009ac6:	6852      	ldr	r2, [r2, #4]
 8009ac8:	605a      	str	r2, [r3, #4]
 8009aca:	4401      	add	r1, r0
 8009acc:	6019      	str	r1, [r3, #0]
 8009ace:	e7d7      	b.n	8009a80 <_free_r+0x24>
 8009ad0:	d902      	bls.n	8009ad8 <_free_r+0x7c>
 8009ad2:	230c      	movs	r3, #12
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	e7d3      	b.n	8009a80 <_free_r+0x24>
 8009ad8:	6820      	ldr	r0, [r4, #0]
 8009ada:	1821      	adds	r1, r4, r0
 8009adc:	428a      	cmp	r2, r1
 8009ade:	bf04      	itt	eq
 8009ae0:	6811      	ldreq	r1, [r2, #0]
 8009ae2:	6852      	ldreq	r2, [r2, #4]
 8009ae4:	6062      	str	r2, [r4, #4]
 8009ae6:	bf04      	itt	eq
 8009ae8:	1809      	addeq	r1, r1, r0
 8009aea:	6021      	streq	r1, [r4, #0]
 8009aec:	605c      	str	r4, [r3, #4]
 8009aee:	e7c7      	b.n	8009a80 <_free_r+0x24>
 8009af0:	bd38      	pop	{r3, r4, r5, pc}
 8009af2:	bf00      	nop
 8009af4:	20000738 	.word	0x20000738

08009af8 <_malloc_r>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	1ccd      	adds	r5, r1, #3
 8009afc:	f025 0503 	bic.w	r5, r5, #3
 8009b00:	3508      	adds	r5, #8
 8009b02:	2d0c      	cmp	r5, #12
 8009b04:	bf38      	it	cc
 8009b06:	250c      	movcc	r5, #12
 8009b08:	2d00      	cmp	r5, #0
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	db01      	blt.n	8009b12 <_malloc_r+0x1a>
 8009b0e:	42a9      	cmp	r1, r5
 8009b10:	d903      	bls.n	8009b1a <_malloc_r+0x22>
 8009b12:	230c      	movs	r3, #12
 8009b14:	6033      	str	r3, [r6, #0]
 8009b16:	2000      	movs	r0, #0
 8009b18:	bd70      	pop	{r4, r5, r6, pc}
 8009b1a:	f000 fa71 	bl	800a000 <__malloc_lock>
 8009b1e:	4a23      	ldr	r2, [pc, #140]	; (8009bac <_malloc_r+0xb4>)
 8009b20:	6814      	ldr	r4, [r2, #0]
 8009b22:	4621      	mov	r1, r4
 8009b24:	b991      	cbnz	r1, 8009b4c <_malloc_r+0x54>
 8009b26:	4c22      	ldr	r4, [pc, #136]	; (8009bb0 <_malloc_r+0xb8>)
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	b91b      	cbnz	r3, 8009b34 <_malloc_r+0x3c>
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f000 f991 	bl	8009e54 <_sbrk_r>
 8009b32:	6020      	str	r0, [r4, #0]
 8009b34:	4629      	mov	r1, r5
 8009b36:	4630      	mov	r0, r6
 8009b38:	f000 f98c 	bl	8009e54 <_sbrk_r>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d126      	bne.n	8009b8e <_malloc_r+0x96>
 8009b40:	230c      	movs	r3, #12
 8009b42:	6033      	str	r3, [r6, #0]
 8009b44:	4630      	mov	r0, r6
 8009b46:	f000 fa5c 	bl	800a002 <__malloc_unlock>
 8009b4a:	e7e4      	b.n	8009b16 <_malloc_r+0x1e>
 8009b4c:	680b      	ldr	r3, [r1, #0]
 8009b4e:	1b5b      	subs	r3, r3, r5
 8009b50:	d41a      	bmi.n	8009b88 <_malloc_r+0x90>
 8009b52:	2b0b      	cmp	r3, #11
 8009b54:	d90f      	bls.n	8009b76 <_malloc_r+0x7e>
 8009b56:	600b      	str	r3, [r1, #0]
 8009b58:	50cd      	str	r5, [r1, r3]
 8009b5a:	18cc      	adds	r4, r1, r3
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f000 fa50 	bl	800a002 <__malloc_unlock>
 8009b62:	f104 000b 	add.w	r0, r4, #11
 8009b66:	1d23      	adds	r3, r4, #4
 8009b68:	f020 0007 	bic.w	r0, r0, #7
 8009b6c:	1ac3      	subs	r3, r0, r3
 8009b6e:	d01b      	beq.n	8009ba8 <_malloc_r+0xb0>
 8009b70:	425a      	negs	r2, r3
 8009b72:	50e2      	str	r2, [r4, r3]
 8009b74:	bd70      	pop	{r4, r5, r6, pc}
 8009b76:	428c      	cmp	r4, r1
 8009b78:	bf0d      	iteet	eq
 8009b7a:	6863      	ldreq	r3, [r4, #4]
 8009b7c:	684b      	ldrne	r3, [r1, #4]
 8009b7e:	6063      	strne	r3, [r4, #4]
 8009b80:	6013      	streq	r3, [r2, #0]
 8009b82:	bf18      	it	ne
 8009b84:	460c      	movne	r4, r1
 8009b86:	e7e9      	b.n	8009b5c <_malloc_r+0x64>
 8009b88:	460c      	mov	r4, r1
 8009b8a:	6849      	ldr	r1, [r1, #4]
 8009b8c:	e7ca      	b.n	8009b24 <_malloc_r+0x2c>
 8009b8e:	1cc4      	adds	r4, r0, #3
 8009b90:	f024 0403 	bic.w	r4, r4, #3
 8009b94:	42a0      	cmp	r0, r4
 8009b96:	d005      	beq.n	8009ba4 <_malloc_r+0xac>
 8009b98:	1a21      	subs	r1, r4, r0
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f000 f95a 	bl	8009e54 <_sbrk_r>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d0cd      	beq.n	8009b40 <_malloc_r+0x48>
 8009ba4:	6025      	str	r5, [r4, #0]
 8009ba6:	e7d9      	b.n	8009b5c <_malloc_r+0x64>
 8009ba8:	bd70      	pop	{r4, r5, r6, pc}
 8009baa:	bf00      	nop
 8009bac:	20000738 	.word	0x20000738
 8009bb0:	2000073c 	.word	0x2000073c

08009bb4 <__ssputs_r>:
 8009bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb8:	688e      	ldr	r6, [r1, #8]
 8009bba:	429e      	cmp	r6, r3
 8009bbc:	4682      	mov	sl, r0
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	4691      	mov	r9, r2
 8009bc2:	4698      	mov	r8, r3
 8009bc4:	d835      	bhi.n	8009c32 <__ssputs_r+0x7e>
 8009bc6:	898a      	ldrh	r2, [r1, #12]
 8009bc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bcc:	d031      	beq.n	8009c32 <__ssputs_r+0x7e>
 8009bce:	6825      	ldr	r5, [r4, #0]
 8009bd0:	6909      	ldr	r1, [r1, #16]
 8009bd2:	1a6f      	subs	r7, r5, r1
 8009bd4:	6965      	ldr	r5, [r4, #20]
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bdc:	fb95 f5f3 	sdiv	r5, r5, r3
 8009be0:	f108 0301 	add.w	r3, r8, #1
 8009be4:	443b      	add	r3, r7
 8009be6:	429d      	cmp	r5, r3
 8009be8:	bf38      	it	cc
 8009bea:	461d      	movcc	r5, r3
 8009bec:	0553      	lsls	r3, r2, #21
 8009bee:	d531      	bpl.n	8009c54 <__ssputs_r+0xa0>
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	f7ff ff81 	bl	8009af8 <_malloc_r>
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	b950      	cbnz	r0, 8009c10 <__ssputs_r+0x5c>
 8009bfa:	230c      	movs	r3, #12
 8009bfc:	f8ca 3000 	str.w	r3, [sl]
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c06:	81a3      	strh	r3, [r4, #12]
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c10:	463a      	mov	r2, r7
 8009c12:	6921      	ldr	r1, [r4, #16]
 8009c14:	f7fd fe22 	bl	800785c <memcpy>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c22:	81a3      	strh	r3, [r4, #12]
 8009c24:	6126      	str	r6, [r4, #16]
 8009c26:	6165      	str	r5, [r4, #20]
 8009c28:	443e      	add	r6, r7
 8009c2a:	1bed      	subs	r5, r5, r7
 8009c2c:	6026      	str	r6, [r4, #0]
 8009c2e:	60a5      	str	r5, [r4, #8]
 8009c30:	4646      	mov	r6, r8
 8009c32:	4546      	cmp	r6, r8
 8009c34:	bf28      	it	cs
 8009c36:	4646      	movcs	r6, r8
 8009c38:	4632      	mov	r2, r6
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	6820      	ldr	r0, [r4, #0]
 8009c3e:	f000 f9c5 	bl	8009fcc <memmove>
 8009c42:	68a3      	ldr	r3, [r4, #8]
 8009c44:	1b9b      	subs	r3, r3, r6
 8009c46:	60a3      	str	r3, [r4, #8]
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	441e      	add	r6, r3
 8009c4c:	6026      	str	r6, [r4, #0]
 8009c4e:	2000      	movs	r0, #0
 8009c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c54:	462a      	mov	r2, r5
 8009c56:	f000 f9d5 	bl	800a004 <_realloc_r>
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d1e1      	bne.n	8009c24 <__ssputs_r+0x70>
 8009c60:	6921      	ldr	r1, [r4, #16]
 8009c62:	4650      	mov	r0, sl
 8009c64:	f7ff fefa 	bl	8009a5c <_free_r>
 8009c68:	e7c7      	b.n	8009bfa <__ssputs_r+0x46>
	...

08009c6c <_svfiprintf_r>:
 8009c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c70:	b09d      	sub	sp, #116	; 0x74
 8009c72:	4680      	mov	r8, r0
 8009c74:	9303      	str	r3, [sp, #12]
 8009c76:	898b      	ldrh	r3, [r1, #12]
 8009c78:	061c      	lsls	r4, r3, #24
 8009c7a:	460d      	mov	r5, r1
 8009c7c:	4616      	mov	r6, r2
 8009c7e:	d50f      	bpl.n	8009ca0 <_svfiprintf_r+0x34>
 8009c80:	690b      	ldr	r3, [r1, #16]
 8009c82:	b96b      	cbnz	r3, 8009ca0 <_svfiprintf_r+0x34>
 8009c84:	2140      	movs	r1, #64	; 0x40
 8009c86:	f7ff ff37 	bl	8009af8 <_malloc_r>
 8009c8a:	6028      	str	r0, [r5, #0]
 8009c8c:	6128      	str	r0, [r5, #16]
 8009c8e:	b928      	cbnz	r0, 8009c9c <_svfiprintf_r+0x30>
 8009c90:	230c      	movs	r3, #12
 8009c92:	f8c8 3000 	str.w	r3, [r8]
 8009c96:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9a:	e0c5      	b.n	8009e28 <_svfiprintf_r+0x1bc>
 8009c9c:	2340      	movs	r3, #64	; 0x40
 8009c9e:	616b      	str	r3, [r5, #20]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca4:	2320      	movs	r3, #32
 8009ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009caa:	2330      	movs	r3, #48	; 0x30
 8009cac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cb0:	f04f 0b01 	mov.w	fp, #1
 8009cb4:	4637      	mov	r7, r6
 8009cb6:	463c      	mov	r4, r7
 8009cb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d13c      	bne.n	8009d3a <_svfiprintf_r+0xce>
 8009cc0:	ebb7 0a06 	subs.w	sl, r7, r6
 8009cc4:	d00b      	beq.n	8009cde <_svfiprintf_r+0x72>
 8009cc6:	4653      	mov	r3, sl
 8009cc8:	4632      	mov	r2, r6
 8009cca:	4629      	mov	r1, r5
 8009ccc:	4640      	mov	r0, r8
 8009cce:	f7ff ff71 	bl	8009bb4 <__ssputs_r>
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	f000 80a3 	beq.w	8009e1e <_svfiprintf_r+0x1b2>
 8009cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cda:	4453      	add	r3, sl
 8009cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cde:	783b      	ldrb	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 809c 	beq.w	8009e1e <_svfiprintf_r+0x1b2>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cec:	9304      	str	r3, [sp, #16]
 8009cee:	9307      	str	r3, [sp, #28]
 8009cf0:	9205      	str	r2, [sp, #20]
 8009cf2:	9306      	str	r3, [sp, #24]
 8009cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8009cfa:	2205      	movs	r2, #5
 8009cfc:	7821      	ldrb	r1, [r4, #0]
 8009cfe:	4850      	ldr	r0, [pc, #320]	; (8009e40 <_svfiprintf_r+0x1d4>)
 8009d00:	f7f6 fa6e 	bl	80001e0 <memchr>
 8009d04:	1c67      	adds	r7, r4, #1
 8009d06:	9b04      	ldr	r3, [sp, #16]
 8009d08:	b9d8      	cbnz	r0, 8009d42 <_svfiprintf_r+0xd6>
 8009d0a:	06d9      	lsls	r1, r3, #27
 8009d0c:	bf44      	itt	mi
 8009d0e:	2220      	movmi	r2, #32
 8009d10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d14:	071a      	lsls	r2, r3, #28
 8009d16:	bf44      	itt	mi
 8009d18:	222b      	movmi	r2, #43	; 0x2b
 8009d1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009d1e:	7822      	ldrb	r2, [r4, #0]
 8009d20:	2a2a      	cmp	r2, #42	; 0x2a
 8009d22:	d016      	beq.n	8009d52 <_svfiprintf_r+0xe6>
 8009d24:	9a07      	ldr	r2, [sp, #28]
 8009d26:	2100      	movs	r1, #0
 8009d28:	200a      	movs	r0, #10
 8009d2a:	4627      	mov	r7, r4
 8009d2c:	3401      	adds	r4, #1
 8009d2e:	783b      	ldrb	r3, [r7, #0]
 8009d30:	3b30      	subs	r3, #48	; 0x30
 8009d32:	2b09      	cmp	r3, #9
 8009d34:	d951      	bls.n	8009dda <_svfiprintf_r+0x16e>
 8009d36:	b1c9      	cbz	r1, 8009d6c <_svfiprintf_r+0x100>
 8009d38:	e011      	b.n	8009d5e <_svfiprintf_r+0xf2>
 8009d3a:	2b25      	cmp	r3, #37	; 0x25
 8009d3c:	d0c0      	beq.n	8009cc0 <_svfiprintf_r+0x54>
 8009d3e:	4627      	mov	r7, r4
 8009d40:	e7b9      	b.n	8009cb6 <_svfiprintf_r+0x4a>
 8009d42:	4a3f      	ldr	r2, [pc, #252]	; (8009e40 <_svfiprintf_r+0x1d4>)
 8009d44:	1a80      	subs	r0, r0, r2
 8009d46:	fa0b f000 	lsl.w	r0, fp, r0
 8009d4a:	4318      	orrs	r0, r3
 8009d4c:	9004      	str	r0, [sp, #16]
 8009d4e:	463c      	mov	r4, r7
 8009d50:	e7d3      	b.n	8009cfa <_svfiprintf_r+0x8e>
 8009d52:	9a03      	ldr	r2, [sp, #12]
 8009d54:	1d11      	adds	r1, r2, #4
 8009d56:	6812      	ldr	r2, [r2, #0]
 8009d58:	9103      	str	r1, [sp, #12]
 8009d5a:	2a00      	cmp	r2, #0
 8009d5c:	db01      	blt.n	8009d62 <_svfiprintf_r+0xf6>
 8009d5e:	9207      	str	r2, [sp, #28]
 8009d60:	e004      	b.n	8009d6c <_svfiprintf_r+0x100>
 8009d62:	4252      	negs	r2, r2
 8009d64:	f043 0302 	orr.w	r3, r3, #2
 8009d68:	9207      	str	r2, [sp, #28]
 8009d6a:	9304      	str	r3, [sp, #16]
 8009d6c:	783b      	ldrb	r3, [r7, #0]
 8009d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8009d70:	d10e      	bne.n	8009d90 <_svfiprintf_r+0x124>
 8009d72:	787b      	ldrb	r3, [r7, #1]
 8009d74:	2b2a      	cmp	r3, #42	; 0x2a
 8009d76:	f107 0101 	add.w	r1, r7, #1
 8009d7a:	d132      	bne.n	8009de2 <_svfiprintf_r+0x176>
 8009d7c:	9b03      	ldr	r3, [sp, #12]
 8009d7e:	1d1a      	adds	r2, r3, #4
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	9203      	str	r2, [sp, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	bfb8      	it	lt
 8009d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d8c:	3702      	adds	r7, #2
 8009d8e:	9305      	str	r3, [sp, #20]
 8009d90:	4c2c      	ldr	r4, [pc, #176]	; (8009e44 <_svfiprintf_r+0x1d8>)
 8009d92:	7839      	ldrb	r1, [r7, #0]
 8009d94:	2203      	movs	r2, #3
 8009d96:	4620      	mov	r0, r4
 8009d98:	f7f6 fa22 	bl	80001e0 <memchr>
 8009d9c:	b138      	cbz	r0, 8009dae <_svfiprintf_r+0x142>
 8009d9e:	2340      	movs	r3, #64	; 0x40
 8009da0:	1b00      	subs	r0, r0, r4
 8009da2:	fa03 f000 	lsl.w	r0, r3, r0
 8009da6:	9b04      	ldr	r3, [sp, #16]
 8009da8:	4303      	orrs	r3, r0
 8009daa:	9304      	str	r3, [sp, #16]
 8009dac:	3701      	adds	r7, #1
 8009dae:	7839      	ldrb	r1, [r7, #0]
 8009db0:	4825      	ldr	r0, [pc, #148]	; (8009e48 <_svfiprintf_r+0x1dc>)
 8009db2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009db6:	2206      	movs	r2, #6
 8009db8:	1c7e      	adds	r6, r7, #1
 8009dba:	f7f6 fa11 	bl	80001e0 <memchr>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d035      	beq.n	8009e2e <_svfiprintf_r+0x1c2>
 8009dc2:	4b22      	ldr	r3, [pc, #136]	; (8009e4c <_svfiprintf_r+0x1e0>)
 8009dc4:	b9fb      	cbnz	r3, 8009e06 <_svfiprintf_r+0x19a>
 8009dc6:	9b03      	ldr	r3, [sp, #12]
 8009dc8:	3307      	adds	r3, #7
 8009dca:	f023 0307 	bic.w	r3, r3, #7
 8009dce:	3308      	adds	r3, #8
 8009dd0:	9303      	str	r3, [sp, #12]
 8009dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd4:	444b      	add	r3, r9
 8009dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd8:	e76c      	b.n	8009cb4 <_svfiprintf_r+0x48>
 8009dda:	fb00 3202 	mla	r2, r0, r2, r3
 8009dde:	2101      	movs	r1, #1
 8009de0:	e7a3      	b.n	8009d2a <_svfiprintf_r+0xbe>
 8009de2:	2300      	movs	r3, #0
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	4618      	mov	r0, r3
 8009de8:	240a      	movs	r4, #10
 8009dea:	460f      	mov	r7, r1
 8009dec:	3101      	adds	r1, #1
 8009dee:	783a      	ldrb	r2, [r7, #0]
 8009df0:	3a30      	subs	r2, #48	; 0x30
 8009df2:	2a09      	cmp	r2, #9
 8009df4:	d903      	bls.n	8009dfe <_svfiprintf_r+0x192>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0ca      	beq.n	8009d90 <_svfiprintf_r+0x124>
 8009dfa:	9005      	str	r0, [sp, #20]
 8009dfc:	e7c8      	b.n	8009d90 <_svfiprintf_r+0x124>
 8009dfe:	fb04 2000 	mla	r0, r4, r0, r2
 8009e02:	2301      	movs	r3, #1
 8009e04:	e7f1      	b.n	8009dea <_svfiprintf_r+0x17e>
 8009e06:	ab03      	add	r3, sp, #12
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	4b10      	ldr	r3, [pc, #64]	; (8009e50 <_svfiprintf_r+0x1e4>)
 8009e0e:	a904      	add	r1, sp, #16
 8009e10:	4640      	mov	r0, r8
 8009e12:	f7fd fdcd 	bl	80079b0 <_printf_float>
 8009e16:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e1a:	4681      	mov	r9, r0
 8009e1c:	d1d9      	bne.n	8009dd2 <_svfiprintf_r+0x166>
 8009e1e:	89ab      	ldrh	r3, [r5, #12]
 8009e20:	065b      	lsls	r3, r3, #25
 8009e22:	f53f af38 	bmi.w	8009c96 <_svfiprintf_r+0x2a>
 8009e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e28:	b01d      	add	sp, #116	; 0x74
 8009e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2e:	ab03      	add	r3, sp, #12
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	462a      	mov	r2, r5
 8009e34:	4b06      	ldr	r3, [pc, #24]	; (8009e50 <_svfiprintf_r+0x1e4>)
 8009e36:	a904      	add	r1, sp, #16
 8009e38:	4640      	mov	r0, r8
 8009e3a:	f7fe f86f 	bl	8007f1c <_printf_i>
 8009e3e:	e7ea      	b.n	8009e16 <_svfiprintf_r+0x1aa>
 8009e40:	0800a5c4 	.word	0x0800a5c4
 8009e44:	0800a5ca 	.word	0x0800a5ca
 8009e48:	0800a5ce 	.word	0x0800a5ce
 8009e4c:	080079b1 	.word	0x080079b1
 8009e50:	08009bb5 	.word	0x08009bb5

08009e54 <_sbrk_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4c06      	ldr	r4, [pc, #24]	; (8009e70 <_sbrk_r+0x1c>)
 8009e58:	2300      	movs	r3, #0
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	4608      	mov	r0, r1
 8009e5e:	6023      	str	r3, [r4, #0]
 8009e60:	f000 f946 	bl	800a0f0 <_sbrk>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	d102      	bne.n	8009e6e <_sbrk_r+0x1a>
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	b103      	cbz	r3, 8009e6e <_sbrk_r+0x1a>
 8009e6c:	602b      	str	r3, [r5, #0]
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	20000f50 	.word	0x20000f50

08009e74 <__sread>:
 8009e74:	b510      	push	{r4, lr}
 8009e76:	460c      	mov	r4, r1
 8009e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7c:	f000 f8e8 	bl	800a050 <_read_r>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	bfab      	itete	ge
 8009e84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e86:	89a3      	ldrhlt	r3, [r4, #12]
 8009e88:	181b      	addge	r3, r3, r0
 8009e8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e8e:	bfac      	ite	ge
 8009e90:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e92:	81a3      	strhlt	r3, [r4, #12]
 8009e94:	bd10      	pop	{r4, pc}

08009e96 <__swrite>:
 8009e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9a:	461f      	mov	r7, r3
 8009e9c:	898b      	ldrh	r3, [r1, #12]
 8009e9e:	05db      	lsls	r3, r3, #23
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	4616      	mov	r6, r2
 8009ea6:	d505      	bpl.n	8009eb4 <__swrite+0x1e>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb0:	f000 f868 	bl	8009f84 <_lseek_r>
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ebe:	81a3      	strh	r3, [r4, #12]
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	463b      	mov	r3, r7
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eca:	f000 b817 	b.w	8009efc <_write_r>

08009ece <__sseek>:
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed6:	f000 f855 	bl	8009f84 <_lseek_r>
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	bf15      	itete	ne
 8009ee0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ee2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ee6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eea:	81a3      	strheq	r3, [r4, #12]
 8009eec:	bf18      	it	ne
 8009eee:	81a3      	strhne	r3, [r4, #12]
 8009ef0:	bd10      	pop	{r4, pc}

08009ef2 <__sclose>:
 8009ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef6:	f000 b813 	b.w	8009f20 <_close_r>
	...

08009efc <_write_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4c07      	ldr	r4, [pc, #28]	; (8009f1c <_write_r+0x20>)
 8009f00:	4605      	mov	r5, r0
 8009f02:	4608      	mov	r0, r1
 8009f04:	4611      	mov	r1, r2
 8009f06:	2200      	movs	r2, #0
 8009f08:	6022      	str	r2, [r4, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f000 f8fe 	bl	800a10c <_write>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_write_r+0x1e>
 8009f14:	6823      	ldr	r3, [r4, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_write_r+0x1e>
 8009f18:	602b      	str	r3, [r5, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	20000f50 	.word	0x20000f50

08009f20 <_close_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4c06      	ldr	r4, [pc, #24]	; (8009f3c <_close_r+0x1c>)
 8009f24:	2300      	movs	r3, #0
 8009f26:	4605      	mov	r5, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	6023      	str	r3, [r4, #0]
 8009f2c:	f000 f8b8 	bl	800a0a0 <_close>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_close_r+0x1a>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_close_r+0x1a>
 8009f38:	602b      	str	r3, [r5, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	20000f50 	.word	0x20000f50

08009f40 <_fstat_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4c07      	ldr	r4, [pc, #28]	; (8009f60 <_fstat_r+0x20>)
 8009f44:	2300      	movs	r3, #0
 8009f46:	4605      	mov	r5, r0
 8009f48:	4608      	mov	r0, r1
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	f000 f8af 	bl	800a0b0 <_fstat>
 8009f52:	1c43      	adds	r3, r0, #1
 8009f54:	d102      	bne.n	8009f5c <_fstat_r+0x1c>
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	b103      	cbz	r3, 8009f5c <_fstat_r+0x1c>
 8009f5a:	602b      	str	r3, [r5, #0]
 8009f5c:	bd38      	pop	{r3, r4, r5, pc}
 8009f5e:	bf00      	nop
 8009f60:	20000f50 	.word	0x20000f50

08009f64 <_isatty_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4c06      	ldr	r4, [pc, #24]	; (8009f80 <_isatty_r+0x1c>)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	6023      	str	r3, [r4, #0]
 8009f70:	f000 f8a6 	bl	800a0c0 <_isatty>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_isatty_r+0x1a>
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_isatty_r+0x1a>
 8009f7c:	602b      	str	r3, [r5, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	20000f50 	.word	0x20000f50

08009f84 <_lseek_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	4c07      	ldr	r4, [pc, #28]	; (8009fa4 <_lseek_r+0x20>)
 8009f88:	4605      	mov	r5, r0
 8009f8a:	4608      	mov	r0, r1
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	2200      	movs	r2, #0
 8009f90:	6022      	str	r2, [r4, #0]
 8009f92:	461a      	mov	r2, r3
 8009f94:	f000 f89c 	bl	800a0d0 <_lseek>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d102      	bne.n	8009fa2 <_lseek_r+0x1e>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	b103      	cbz	r3, 8009fa2 <_lseek_r+0x1e>
 8009fa0:	602b      	str	r3, [r5, #0]
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	20000f50 	.word	0x20000f50

08009fa8 <__ascii_mbtowc>:
 8009fa8:	b082      	sub	sp, #8
 8009faa:	b901      	cbnz	r1, 8009fae <__ascii_mbtowc+0x6>
 8009fac:	a901      	add	r1, sp, #4
 8009fae:	b142      	cbz	r2, 8009fc2 <__ascii_mbtowc+0x1a>
 8009fb0:	b14b      	cbz	r3, 8009fc6 <__ascii_mbtowc+0x1e>
 8009fb2:	7813      	ldrb	r3, [r2, #0]
 8009fb4:	600b      	str	r3, [r1, #0]
 8009fb6:	7812      	ldrb	r2, [r2, #0]
 8009fb8:	1c10      	adds	r0, r2, #0
 8009fba:	bf18      	it	ne
 8009fbc:	2001      	movne	r0, #1
 8009fbe:	b002      	add	sp, #8
 8009fc0:	4770      	bx	lr
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	e7fb      	b.n	8009fbe <__ascii_mbtowc+0x16>
 8009fc6:	f06f 0001 	mvn.w	r0, #1
 8009fca:	e7f8      	b.n	8009fbe <__ascii_mbtowc+0x16>

08009fcc <memmove>:
 8009fcc:	4288      	cmp	r0, r1
 8009fce:	b510      	push	{r4, lr}
 8009fd0:	eb01 0302 	add.w	r3, r1, r2
 8009fd4:	d803      	bhi.n	8009fde <memmove+0x12>
 8009fd6:	1e42      	subs	r2, r0, #1
 8009fd8:	4299      	cmp	r1, r3
 8009fda:	d10c      	bne.n	8009ff6 <memmove+0x2a>
 8009fdc:	bd10      	pop	{r4, pc}
 8009fde:	4298      	cmp	r0, r3
 8009fe0:	d2f9      	bcs.n	8009fd6 <memmove+0xa>
 8009fe2:	1881      	adds	r1, r0, r2
 8009fe4:	1ad2      	subs	r2, r2, r3
 8009fe6:	42d3      	cmn	r3, r2
 8009fe8:	d100      	bne.n	8009fec <memmove+0x20>
 8009fea:	bd10      	pop	{r4, pc}
 8009fec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ff0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009ff4:	e7f7      	b.n	8009fe6 <memmove+0x1a>
 8009ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ffa:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009ffe:	e7eb      	b.n	8009fd8 <memmove+0xc>

0800a000 <__malloc_lock>:
 800a000:	4770      	bx	lr

0800a002 <__malloc_unlock>:
 800a002:	4770      	bx	lr

0800a004 <_realloc_r>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	4607      	mov	r7, r0
 800a008:	4614      	mov	r4, r2
 800a00a:	460e      	mov	r6, r1
 800a00c:	b921      	cbnz	r1, 800a018 <_realloc_r+0x14>
 800a00e:	4611      	mov	r1, r2
 800a010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a014:	f7ff bd70 	b.w	8009af8 <_malloc_r>
 800a018:	b922      	cbnz	r2, 800a024 <_realloc_r+0x20>
 800a01a:	f7ff fd1f 	bl	8009a5c <_free_r>
 800a01e:	4625      	mov	r5, r4
 800a020:	4628      	mov	r0, r5
 800a022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a024:	f000 f833 	bl	800a08e <_malloc_usable_size_r>
 800a028:	4284      	cmp	r4, r0
 800a02a:	d90f      	bls.n	800a04c <_realloc_r+0x48>
 800a02c:	4621      	mov	r1, r4
 800a02e:	4638      	mov	r0, r7
 800a030:	f7ff fd62 	bl	8009af8 <_malloc_r>
 800a034:	4605      	mov	r5, r0
 800a036:	2800      	cmp	r0, #0
 800a038:	d0f2      	beq.n	800a020 <_realloc_r+0x1c>
 800a03a:	4631      	mov	r1, r6
 800a03c:	4622      	mov	r2, r4
 800a03e:	f7fd fc0d 	bl	800785c <memcpy>
 800a042:	4631      	mov	r1, r6
 800a044:	4638      	mov	r0, r7
 800a046:	f7ff fd09 	bl	8009a5c <_free_r>
 800a04a:	e7e9      	b.n	800a020 <_realloc_r+0x1c>
 800a04c:	4635      	mov	r5, r6
 800a04e:	e7e7      	b.n	800a020 <_realloc_r+0x1c>

0800a050 <_read_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4c07      	ldr	r4, [pc, #28]	; (800a070 <_read_r+0x20>)
 800a054:	4605      	mov	r5, r0
 800a056:	4608      	mov	r0, r1
 800a058:	4611      	mov	r1, r2
 800a05a:	2200      	movs	r2, #0
 800a05c:	6022      	str	r2, [r4, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	f000 f83e 	bl	800a0e0 <_read>
 800a064:	1c43      	adds	r3, r0, #1
 800a066:	d102      	bne.n	800a06e <_read_r+0x1e>
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	b103      	cbz	r3, 800a06e <_read_r+0x1e>
 800a06c:	602b      	str	r3, [r5, #0]
 800a06e:	bd38      	pop	{r3, r4, r5, pc}
 800a070:	20000f50 	.word	0x20000f50

0800a074 <__ascii_wctomb>:
 800a074:	b149      	cbz	r1, 800a08a <__ascii_wctomb+0x16>
 800a076:	2aff      	cmp	r2, #255	; 0xff
 800a078:	bf85      	ittet	hi
 800a07a:	238a      	movhi	r3, #138	; 0x8a
 800a07c:	6003      	strhi	r3, [r0, #0]
 800a07e:	700a      	strbls	r2, [r1, #0]
 800a080:	f04f 30ff 	movhi.w	r0, #4294967295
 800a084:	bf98      	it	ls
 800a086:	2001      	movls	r0, #1
 800a088:	4770      	bx	lr
 800a08a:	4608      	mov	r0, r1
 800a08c:	4770      	bx	lr

0800a08e <_malloc_usable_size_r>:
 800a08e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800a092:	2800      	cmp	r0, #0
 800a094:	f1a0 0004 	sub.w	r0, r0, #4
 800a098:	bfbc      	itt	lt
 800a09a:	580b      	ldrlt	r3, [r1, r0]
 800a09c:	18c0      	addlt	r0, r0, r3
 800a09e:	4770      	bx	lr

0800a0a0 <_close>:
 800a0a0:	4b02      	ldr	r3, [pc, #8]	; (800a0ac <_close+0xc>)
 800a0a2:	2258      	movs	r2, #88	; 0x58
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0aa:	4770      	bx	lr
 800a0ac:	20000f50 	.word	0x20000f50

0800a0b0 <_fstat>:
 800a0b0:	4b02      	ldr	r3, [pc, #8]	; (800a0bc <_fstat+0xc>)
 800a0b2:	2258      	movs	r2, #88	; 0x58
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ba:	4770      	bx	lr
 800a0bc:	20000f50 	.word	0x20000f50

0800a0c0 <_isatty>:
 800a0c0:	4b02      	ldr	r3, [pc, #8]	; (800a0cc <_isatty+0xc>)
 800a0c2:	2258      	movs	r2, #88	; 0x58
 800a0c4:	601a      	str	r2, [r3, #0]
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	20000f50 	.word	0x20000f50

0800a0d0 <_lseek>:
 800a0d0:	4b02      	ldr	r3, [pc, #8]	; (800a0dc <_lseek+0xc>)
 800a0d2:	2258      	movs	r2, #88	; 0x58
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0da:	4770      	bx	lr
 800a0dc:	20000f50 	.word	0x20000f50

0800a0e0 <_read>:
 800a0e0:	4b02      	ldr	r3, [pc, #8]	; (800a0ec <_read+0xc>)
 800a0e2:	2258      	movs	r2, #88	; 0x58
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ea:	4770      	bx	lr
 800a0ec:	20000f50 	.word	0x20000f50

0800a0f0 <_sbrk>:
 800a0f0:	4b04      	ldr	r3, [pc, #16]	; (800a104 <_sbrk+0x14>)
 800a0f2:	6819      	ldr	r1, [r3, #0]
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	b909      	cbnz	r1, 800a0fc <_sbrk+0xc>
 800a0f8:	4903      	ldr	r1, [pc, #12]	; (800a108 <_sbrk+0x18>)
 800a0fa:	6019      	str	r1, [r3, #0]
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	4402      	add	r2, r0
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	4770      	bx	lr
 800a104:	20000740 	.word	0x20000740
 800a108:	20000f54 	.word	0x20000f54

0800a10c <_write>:
 800a10c:	4b02      	ldr	r3, [pc, #8]	; (800a118 <_write+0xc>)
 800a10e:	2258      	movs	r2, #88	; 0x58
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	f04f 30ff 	mov.w	r0, #4294967295
 800a116:	4770      	bx	lr
 800a118:	20000f50 	.word	0x20000f50

0800a11c <_init>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	bf00      	nop
 800a120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a122:	bc08      	pop	{r3}
 800a124:	469e      	mov	lr, r3
 800a126:	4770      	bx	lr

0800a128 <_fini>:
 800a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12a:	bf00      	nop
 800a12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12e:	bc08      	pop	{r3}
 800a130:	469e      	mov	lr, r3
 800a132:	4770      	bx	lr
